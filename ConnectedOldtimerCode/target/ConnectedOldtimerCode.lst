
/Users/heath/Documents/workspace/Connected-Oldtimer/ConnectedOldtimerCode/target/ConnectedOldtimerCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001388  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080813a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000400  080813a4  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000818  2000046c  2000046c  0003046c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08081410  08081410  00021410  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08081438  08081438  00021438  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000895f3  00000000  00000000  0002143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d4c9  00000000  00000000  000aaa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ffd5  00000000  00000000  000b7ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a98  00000000  00000000  000c7ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002b70  00000000  00000000  000c9965  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022ed5  00000000  00000000  000cc4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e9b6  00000000  00000000  000ef3aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000965a3  00000000  00000000  0010dd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a9c8  00000000  00000000  001a4304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	0c 11 08 08                                         ....

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f001 f829 	bl	8081084 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f001 f82e 	bl	808109a <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	080813a4 	.word	0x080813a4
 808004c:	2000046c 	.word	0x2000046c
 8080050:	2000046c 	.word	0x2000046c
 8080054:	20000c84 	.word	0x20000c84
 8080058:	20000c84 	.word	0x20000c84

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f000 fdd5 	bl	8080c0c <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08081360 	.word	0x08081360
 8080084:	08081394 	.word	0x08081394

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b88c 	b.w	80801a4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f8ad 	bl	80801ec <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f000 bd7b 	b.w	8080b90 <_post_loop>

0808009a <_ZdlPv>:
 808009a:	f000 ba55 	b.w	8080548 <free>

0808009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 808009e:	7800      	ldrb	r0, [r0, #0]
 80800a0:	fab0 f080 	clz	r0, r0
 80800a4:	0940      	lsrs	r0, r0, #5
 80800a6:	4770      	bx	lr

080800a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800a8:	2301      	movs	r3, #1
 80800aa:	7003      	strb	r3, [r0, #0]
 80800ac:	4770      	bx	lr

080800ae <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80800ae:	4770      	bx	lr

080800b0 <_ZN11USARTSerialD0Ev>:
 80800b0:	b510      	push	{r4, lr}
 80800b2:	4604      	mov	r4, r0
 80800b4:	f7ff fff1 	bl	808009a <_ZdlPv>
 80800b8:	4620      	mov	r0, r4
 80800ba:	bd10      	pop	{r4, pc}

080800bc <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 80800bc:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 80800be:	4c0c      	ldr	r4, [pc, #48]	; (80800f0 <_Z22__fetch_global_Serial4v+0x34>)
 80800c0:	6823      	ldr	r3, [r4, #0]
 80800c2:	07db      	lsls	r3, r3, #31
 80800c4:	d411      	bmi.n	80800ea <_Z22__fetch_global_Serial4v+0x2e>
 80800c6:	4620      	mov	r0, r4
 80800c8:	f7ff ffe9 	bl	808009e <__cxa_guard_acquire>
 80800cc:	b168      	cbz	r0, 80800ea <_Z22__fetch_global_Serial4v+0x2e>
 80800ce:	4a09      	ldr	r2, [pc, #36]	; (80800f4 <_Z22__fetch_global_Serial4v+0x38>)
 80800d0:	2103      	movs	r1, #3
 80800d2:	4b09      	ldr	r3, [pc, #36]	; (80800f8 <_Z22__fetch_global_Serial4v+0x3c>)
 80800d4:	4809      	ldr	r0, [pc, #36]	; (80800fc <_Z22__fetch_global_Serial4v+0x40>)
 80800d6:	f000 fc19 	bl	808090c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80800da:	4620      	mov	r0, r4
 80800dc:	f7ff ffe4 	bl	80800a8 <__cxa_guard_release>
 80800e0:	4a07      	ldr	r2, [pc, #28]	; (8080100 <_Z22__fetch_global_Serial4v+0x44>)
 80800e2:	4908      	ldr	r1, [pc, #32]	; (8080104 <_Z22__fetch_global_Serial4v+0x48>)
 80800e4:	4805      	ldr	r0, [pc, #20]	; (80800fc <_Z22__fetch_global_Serial4v+0x40>)
 80800e6:	f000 fe71 	bl	8080dcc <__aeabi_atexit>
	return serial4;
}
 80800ea:	4804      	ldr	r0, [pc, #16]	; (80800fc <_Z22__fetch_global_Serial4v+0x40>)
 80800ec:	bd10      	pop	{r4, pc}
 80800ee:	bf00      	nop
 80800f0:	200004f8 	.word	0x200004f8
 80800f4:	20000470 	.word	0x20000470
 80800f8:	200005ac 	.word	0x200005ac
 80800fc:	20000584 	.word	0x20000584
 8080100:	2000046c 	.word	0x2000046c
 8080104:	080800af 	.word	0x080800af

08080108 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080108:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 808010a:	f7ff ffd7 	bl	80800bc <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 808010e:	4b07      	ldr	r3, [pc, #28]	; (808012c <_Z15serialEventRun4v+0x24>)
 8080110:	4604      	mov	r4, r0
 8080112:	b153      	cbz	r3, 808012a <_Z15serialEventRun4v+0x22>
 8080114:	f000 fc1a 	bl	808094c <_ZN11USARTSerial9isEnabledEv>
 8080118:	b138      	cbz	r0, 808012a <_Z15serialEventRun4v+0x22>
 808011a:	6823      	ldr	r3, [r4, #0]
 808011c:	4620      	mov	r0, r4
 808011e:	691b      	ldr	r3, [r3, #16]
 8080120:	4798      	blx	r3
 8080122:	2800      	cmp	r0, #0
 8080124:	dd01      	ble.n	808012a <_Z15serialEventRun4v+0x22>
        handler();
 8080126:	f3af 8000 	nop.w
 808012a:	bd10      	pop	{r4, pc}
 808012c:	00000000 	.word	0x00000000

08080130 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080130:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080132:	4c0c      	ldr	r4, [pc, #48]	; (8080164 <_Z22__fetch_global_Serial5v+0x34>)
 8080134:	6823      	ldr	r3, [r4, #0]
 8080136:	07db      	lsls	r3, r3, #31
 8080138:	d411      	bmi.n	808015e <_Z22__fetch_global_Serial5v+0x2e>
 808013a:	4620      	mov	r0, r4
 808013c:	f7ff ffaf 	bl	808009e <__cxa_guard_acquire>
 8080140:	b168      	cbz	r0, 808015e <_Z22__fetch_global_Serial5v+0x2e>
 8080142:	4a09      	ldr	r2, [pc, #36]	; (8080168 <_Z22__fetch_global_Serial5v+0x38>)
 8080144:	2104      	movs	r1, #4
 8080146:	4b09      	ldr	r3, [pc, #36]	; (808016c <_Z22__fetch_global_Serial5v+0x3c>)
 8080148:	4809      	ldr	r0, [pc, #36]	; (8080170 <_Z22__fetch_global_Serial5v+0x40>)
 808014a:	f000 fbdf 	bl	808090c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808014e:	4620      	mov	r0, r4
 8080150:	f7ff ffaa 	bl	80800a8 <__cxa_guard_release>
 8080154:	4a07      	ldr	r2, [pc, #28]	; (8080174 <_Z22__fetch_global_Serial5v+0x44>)
 8080156:	4908      	ldr	r1, [pc, #32]	; (8080178 <_Z22__fetch_global_Serial5v+0x48>)
 8080158:	4805      	ldr	r0, [pc, #20]	; (8080170 <_Z22__fetch_global_Serial5v+0x40>)
 808015a:	f000 fe37 	bl	8080dcc <__aeabi_atexit>
	return serial5;
}
 808015e:	4804      	ldr	r0, [pc, #16]	; (8080170 <_Z22__fetch_global_Serial5v+0x40>)
 8080160:	bd10      	pop	{r4, pc}
 8080162:	bf00      	nop
 8080164:	200004f4 	.word	0x200004f4
 8080168:	20000500 	.word	0x20000500
 808016c:	20000630 	.word	0x20000630
 8080170:	20000598 	.word	0x20000598
 8080174:	2000046c 	.word	0x2000046c
 8080178:	080800af 	.word	0x080800af

0808017c <_Z15serialEventRun5v>:


void serialEventRun5()
{
 808017c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 808017e:	f7ff ffd7 	bl	8080130 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080182:	4b07      	ldr	r3, [pc, #28]	; (80801a0 <_Z15serialEventRun5v+0x24>)
 8080184:	4604      	mov	r4, r0
 8080186:	b153      	cbz	r3, 808019e <_Z15serialEventRun5v+0x22>
 8080188:	f000 fbe0 	bl	808094c <_ZN11USARTSerial9isEnabledEv>
 808018c:	b138      	cbz	r0, 808019e <_Z15serialEventRun5v+0x22>
 808018e:	6823      	ldr	r3, [r4, #0]
 8080190:	4620      	mov	r0, r4
 8080192:	691b      	ldr	r3, [r3, #16]
 8080194:	4798      	blx	r3
 8080196:	2800      	cmp	r0, #0
 8080198:	dd01      	ble.n	808019e <_Z15serialEventRun5v+0x22>
        handler();
 808019a:	f3af 8000 	nop.w
 808019e:	bd10      	pop	{r4, pc}
 80801a0:	00000000 	.word	0x00000000

080801a4 <setup>:
#include "Serial4/Serial4.h"
#include "Serial5/Serial5.h"
#include "../lib/TinyGPS++/src/TinyGPS++.h"


void setup() {
 80801a4:	b508      	push	{r3, lr}

  Serial.begin(9600);
 80801a6:	f000 fc53 	bl	8080a50 <_Z16_fetch_usbserialv>
 80801aa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80801ae:	f000 fc35 	bl	8080a1c <_ZN9USBSerial5beginEl>
  Serial4.begin(9600);
 80801b2:	f7ff ff83 	bl	80800bc <_Z22__fetch_global_Serial4v>
 80801b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80801ba:	f000 fbc1 	bl	8080940 <_ZN11USARTSerial5beginEm>
  Serial5.begin(9600);
 80801be:	f7ff ffb7 	bl	8080130 <_Z22__fetch_global_Serial5v>
 80801c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80801c6:	f000 fbbb 	bl	8080940 <_ZN11USARTSerial5beginEm>
  pinMode(led1, OUTPUT);
 80801ca:	4b06      	ldr	r3, [pc, #24]	; (80801e4 <setup+0x40>)
 80801cc:	2101      	movs	r1, #1
 80801ce:	8818      	ldrh	r0, [r3, #0]
 80801d0:	f000 fd6c 	bl	8080cac <pinMode>
  pinMode(led2, OUTPUT);
 80801d4:	4b04      	ldr	r3, [pc, #16]	; (80801e8 <setup+0x44>)
 80801d6:	2101      	movs	r1, #1
 80801d8:	8818      	ldrh	r0, [r3, #0]

}
 80801da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  Serial.begin(9600);
  Serial4.begin(9600);
  Serial5.begin(9600);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
 80801de:	f000 bd65 	b.w	8080cac <pinMode>
 80801e2:	bf00      	nop
 80801e4:	200004fc 	.word	0x200004fc
 80801e8:	20000400 	.word	0x20000400

080801ec <loop>:

}


void loop() {
 80801ec:	b538      	push	{r3, r4, r5, lr}
  // To blink the LED, first we'll turn it on...
  digitalWrite(led1, HIGH);
 80801ee:	4d22      	ldr	r5, [pc, #136]	; (8080278 <loop+0x8c>)
  digitalWrite(led2, HIGH);
 80801f0:	4c22      	ldr	r4, [pc, #136]	; (808027c <loop+0x90>)
}


void loop() {
  // To blink the LED, first we'll turn it on...
  digitalWrite(led1, HIGH);
 80801f2:	8828      	ldrh	r0, [r5, #0]
 80801f4:	2101      	movs	r1, #1
 80801f6:	f000 fd6a 	bl	8080cce <digitalWrite>
  digitalWrite(led2, HIGH);
 80801fa:	2101      	movs	r1, #1
 80801fc:	8820      	ldrh	r0, [r4, #0]
 80801fe:	f000 fd66 	bl	8080cce <digitalWrite>
  Serial4.print("n0.val=67");
 8080202:	f7ff ff5b 	bl	80800bc <_Z22__fetch_global_Serial4v>
 8080206:	491e      	ldr	r1, [pc, #120]	; (8080280 <loop+0x94>)
 8080208:	f000 fa84 	bl	8080714 <_ZN5Print5printEPKc>
  Serial4.write(0xff);
 808020c:	f7ff ff56 	bl	80800bc <_Z22__fetch_global_Serial4v>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
 8080210:	21ff      	movs	r1, #255	; 0xff
 8080212:	f000 fb98 	bl	8080946 <_ZN11USARTSerial5writeEt>
  Serial4.write(0xff);
 8080216:	f7ff ff51 	bl	80800bc <_Z22__fetch_global_Serial4v>
 808021a:	21ff      	movs	r1, #255	; 0xff
 808021c:	f000 fb93 	bl	8080946 <_ZN11USARTSerial5writeEt>
  Serial4.write(0xff);
 8080220:	f7ff ff4c 	bl	80800bc <_Z22__fetch_global_Serial4v>
 8080224:	21ff      	movs	r1, #255	; 0xff
 8080226:	f000 fb8e 	bl	8080946 <_ZN11USARTSerial5writeEt>

  // We'll leave it on for 1 second...
  delay(500);
 808022a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808022e:	f000 f99b 	bl	8080568 <delay>

  // Then we'll turn it off...
  digitalWrite(led1, LOW);
 8080232:	8828      	ldrh	r0, [r5, #0]
 8080234:	2100      	movs	r1, #0
 8080236:	f000 fd4a 	bl	8080cce <digitalWrite>
  digitalWrite(led2, LOW);
 808023a:	2100      	movs	r1, #0
 808023c:	8820      	ldrh	r0, [r4, #0]
 808023e:	f000 fd46 	bl	8080cce <digitalWrite>
  Serial4.printf("n0.val=66");
 8080242:	f7ff ff3b 	bl	80800bc <_Z22__fetch_global_Serial4v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080246:	4a0f      	ldr	r2, [pc, #60]	; (8080284 <loop+0x98>)
 8080248:	2100      	movs	r1, #0
 808024a:	f000 faa2 	bl	8080792 <_ZN5Print11printf_implEbPKcz>
  Serial4.write(0xff);
 808024e:	f7ff ff35 	bl	80800bc <_Z22__fetch_global_Serial4v>
 8080252:	21ff      	movs	r1, #255	; 0xff
 8080254:	f000 fb77 	bl	8080946 <_ZN11USARTSerial5writeEt>
  Serial4.write(0xff);
 8080258:	f7ff ff30 	bl	80800bc <_Z22__fetch_global_Serial4v>
 808025c:	21ff      	movs	r1, #255	; 0xff
 808025e:	f000 fb72 	bl	8080946 <_ZN11USARTSerial5writeEt>
  Serial4.write(0xff);
 8080262:	f7ff ff2b 	bl	80800bc <_Z22__fetch_global_Serial4v>
 8080266:	21ff      	movs	r1, #255	; 0xff
 8080268:	f000 fb6d 	bl	8080946 <_ZN11USARTSerial5writeEt>
  // Wait 1 second...
  delay(500);
  //Serial.printlnf("printooooboi");

  // And repeat!
}
 808026c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Serial4.printf("n0.val=66");
  Serial4.write(0xff);
  Serial4.write(0xff);
  Serial4.write(0xff);
  // Wait 1 second...
  delay(500);
 8080270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080274:	f000 b978 	b.w	8080568 <delay>
 8080278:	200004fc 	.word	0x200004fc
 808027c:	20000400 	.word	0x20000400
 8080280:	08081120 	.word	0x08081120
 8080284:	0808112a 	.word	0x0808112a

08080288 <_GLOBAL__sub_I_led1>:
  //Serial.printlnf("printooooboi");

  // And repeat!
}
 8080288:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808028a:	f000 f829 	bl	80802e0 <HAL_Pin_Map>
 808028e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

int led1 = D0; 
int led2 = D7; 
SYSTEM_THREAD(ENABLED);
 8080292:	2100      	movs	r1, #0
 8080294:	2001      	movs	r0, #1
 8080296:	f000 b923 	b.w	80804e0 <system_thread_set_state>

0808029a <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
 808029a:	f000 b821 	b.w	80802e0 <HAL_Pin_Map>
	...

080802a0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80802a0:	b508      	push	{r3, lr}
 80802a2:	4b02      	ldr	r3, [pc, #8]	; (80802ac <os_mutex_create+0xc>)
 80802a4:	681b      	ldr	r3, [r3, #0]
 80802a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80802a8:	9301      	str	r3, [sp, #4]
 80802aa:	bd08      	pop	{r3, pc}
 80802ac:	080401d0 	.word	0x080401d0

080802b0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80802b0:	b508      	push	{r3, lr}
 80802b2:	4b02      	ldr	r3, [pc, #8]	; (80802bc <HAL_Core_Get_Last_Reset_Info+0xc>)
 80802b4:	681b      	ldr	r3, [r3, #0]
 80802b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80802b8:	9301      	str	r3, [sp, #4]
 80802ba:	bd08      	pop	{r3, pc}
 80802bc:	080401b8 	.word	0x080401b8

080802c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80802c0:	b508      	push	{r3, lr}
 80802c2:	4b02      	ldr	r3, [pc, #8]	; (80802cc <HAL_RNG_GetRandomNumber+0xc>)
 80802c4:	681b      	ldr	r3, [r3, #0]
 80802c6:	685b      	ldr	r3, [r3, #4]
 80802c8:	9301      	str	r3, [sp, #4]
 80802ca:	bd08      	pop	{r3, pc}
 80802cc:	0804019c 	.word	0x0804019c

080802d0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80802d0:	b508      	push	{r3, lr}
 80802d2:	4b02      	ldr	r3, [pc, #8]	; (80802dc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80802d4:	681b      	ldr	r3, [r3, #0]
 80802d6:	695b      	ldr	r3, [r3, #20]
 80802d8:	9301      	str	r3, [sp, #4]
 80802da:	bd08      	pop	{r3, pc}
 80802dc:	0804019c 	.word	0x0804019c

080802e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80802e0:	b508      	push	{r3, lr}
 80802e2:	4b02      	ldr	r3, [pc, #8]	; (80802ec <HAL_Pin_Map+0xc>)
 80802e4:	681b      	ldr	r3, [r3, #0]
 80802e6:	681b      	ldr	r3, [r3, #0]
 80802e8:	9301      	str	r3, [sp, #4]
 80802ea:	bd08      	pop	{r3, pc}
 80802ec:	080401b0 	.word	0x080401b0

080802f0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80802f0:	b508      	push	{r3, lr}
 80802f2:	4b02      	ldr	r3, [pc, #8]	; (80802fc <HAL_Pin_Mode+0xc>)
 80802f4:	681b      	ldr	r3, [r3, #0]
 80802f6:	689b      	ldr	r3, [r3, #8]
 80802f8:	9301      	str	r3, [sp, #4]
 80802fa:	bd08      	pop	{r3, pc}
 80802fc:	080401b0 	.word	0x080401b0

08080300 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080300:	b508      	push	{r3, lr}
 8080302:	4b02      	ldr	r3, [pc, #8]	; (808030c <HAL_Get_Pin_Mode+0xc>)
 8080304:	681b      	ldr	r3, [r3, #0]
 8080306:	68db      	ldr	r3, [r3, #12]
 8080308:	9301      	str	r3, [sp, #4]
 808030a:	bd08      	pop	{r3, pc}
 808030c:	080401b0 	.word	0x080401b0

08080310 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080310:	b508      	push	{r3, lr}
 8080312:	4b02      	ldr	r3, [pc, #8]	; (808031c <HAL_GPIO_Write+0xc>)
 8080314:	681b      	ldr	r3, [r3, #0]
 8080316:	691b      	ldr	r3, [r3, #16]
 8080318:	9301      	str	r3, [sp, #4]
 808031a:	bd08      	pop	{r3, pc}
 808031c:	080401b0 	.word	0x080401b0

08080320 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8080320:	b508      	push	{r3, lr}
 8080322:	4b02      	ldr	r3, [pc, #8]	; (808032c <HAL_I2C_Write_Data+0xc>)
 8080324:	681b      	ldr	r3, [r3, #0]
 8080326:	6a1b      	ldr	r3, [r3, #32]
 8080328:	9301      	str	r3, [sp, #4]
 808032a:	bd08      	pop	{r3, pc}
 808032c:	080401ac 	.word	0x080401ac

08080330 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8080330:	b508      	push	{r3, lr}
 8080332:	4b02      	ldr	r3, [pc, #8]	; (808033c <HAL_I2C_Available_Data+0xc>)
 8080334:	681b      	ldr	r3, [r3, #0]
 8080336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080338:	9301      	str	r3, [sp, #4]
 808033a:	bd08      	pop	{r3, pc}
 808033c:	080401ac 	.word	0x080401ac

08080340 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8080340:	b508      	push	{r3, lr}
 8080342:	4b02      	ldr	r3, [pc, #8]	; (808034c <HAL_I2C_Read_Data+0xc>)
 8080344:	681b      	ldr	r3, [r3, #0]
 8080346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080348:	9301      	str	r3, [sp, #4]
 808034a:	bd08      	pop	{r3, pc}
 808034c:	080401ac 	.word	0x080401ac

08080350 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8080350:	b508      	push	{r3, lr}
 8080352:	4b02      	ldr	r3, [pc, #8]	; (808035c <HAL_I2C_Peek_Data+0xc>)
 8080354:	681b      	ldr	r3, [r3, #0]
 8080356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080358:	9301      	str	r3, [sp, #4]
 808035a:	bd08      	pop	{r3, pc}
 808035c:	080401ac 	.word	0x080401ac

08080360 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8080360:	b508      	push	{r3, lr}
 8080362:	4b02      	ldr	r3, [pc, #8]	; (808036c <HAL_I2C_Flush_Data+0xc>)
 8080364:	681b      	ldr	r3, [r3, #0]
 8080366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080368:	9301      	str	r3, [sp, #4]
 808036a:	bd08      	pop	{r3, pc}
 808036c:	080401ac 	.word	0x080401ac

08080370 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8080370:	b508      	push	{r3, lr}
 8080372:	4b02      	ldr	r3, [pc, #8]	; (808037c <HAL_I2C_Is_Enabled+0xc>)
 8080374:	681b      	ldr	r3, [r3, #0]
 8080376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080378:	9301      	str	r3, [sp, #4]
 808037a:	bd08      	pop	{r3, pc}
 808037c:	080401ac 	.word	0x080401ac

08080380 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080380:	b508      	push	{r3, lr}
 8080382:	4b02      	ldr	r3, [pc, #8]	; (808038c <HAL_I2C_Init+0xc>)
 8080384:	681b      	ldr	r3, [r3, #0]
 8080386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080388:	9301      	str	r3, [sp, #4]
 808038a:	bd08      	pop	{r3, pc}
 808038c:	080401ac 	.word	0x080401ac

08080390 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080390:	b508      	push	{r3, lr}
 8080392:	4b02      	ldr	r3, [pc, #8]	; (808039c <HAL_SPI_Init+0xc>)
 8080394:	681b      	ldr	r3, [r3, #0]
 8080396:	69db      	ldr	r3, [r3, #28]
 8080398:	9301      	str	r3, [sp, #4]
 808039a:	bd08      	pop	{r3, pc}
 808039c:	080401b4 	.word	0x080401b4

080803a0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80803a0:	b508      	push	{r3, lr}
 80803a2:	4b02      	ldr	r3, [pc, #8]	; (80803ac <HAL_SPI_Is_Enabled+0xc>)
 80803a4:	681b      	ldr	r3, [r3, #0]
 80803a6:	6a1b      	ldr	r3, [r3, #32]
 80803a8:	9301      	str	r3, [sp, #4]
 80803aa:	bd08      	pop	{r3, pc}
 80803ac:	080401b4 	.word	0x080401b4

080803b0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80803b0:	b508      	push	{r3, lr}
 80803b2:	4b02      	ldr	r3, [pc, #8]	; (80803bc <HAL_USART_Init+0xc>)
 80803b4:	681b      	ldr	r3, [r3, #0]
 80803b6:	699b      	ldr	r3, [r3, #24]
 80803b8:	9301      	str	r3, [sp, #4]
 80803ba:	bd08      	pop	{r3, pc}
 80803bc:	080401c4 	.word	0x080401c4

080803c0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80803c0:	b508      	push	{r3, lr}
 80803c2:	4b02      	ldr	r3, [pc, #8]	; (80803cc <HAL_USART_Write_Data+0xc>)
 80803c4:	681b      	ldr	r3, [r3, #0]
 80803c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80803c8:	9301      	str	r3, [sp, #4]
 80803ca:	bd08      	pop	{r3, pc}
 80803cc:	080401c4 	.word	0x080401c4

080803d0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80803d0:	b508      	push	{r3, lr}
 80803d2:	4b02      	ldr	r3, [pc, #8]	; (80803dc <HAL_USART_Available_Data+0xc>)
 80803d4:	681b      	ldr	r3, [r3, #0]
 80803d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80803d8:	9301      	str	r3, [sp, #4]
 80803da:	bd08      	pop	{r3, pc}
 80803dc:	080401c4 	.word	0x080401c4

080803e0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80803e0:	b508      	push	{r3, lr}
 80803e2:	4b02      	ldr	r3, [pc, #8]	; (80803ec <HAL_USART_Read_Data+0xc>)
 80803e4:	681b      	ldr	r3, [r3, #0]
 80803e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80803e8:	9301      	str	r3, [sp, #4]
 80803ea:	bd08      	pop	{r3, pc}
 80803ec:	080401c4 	.word	0x080401c4

080803f0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80803f0:	b508      	push	{r3, lr}
 80803f2:	4b02      	ldr	r3, [pc, #8]	; (80803fc <HAL_USART_Peek_Data+0xc>)
 80803f4:	681b      	ldr	r3, [r3, #0]
 80803f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80803f8:	9301      	str	r3, [sp, #4]
 80803fa:	bd08      	pop	{r3, pc}
 80803fc:	080401c4 	.word	0x080401c4

08080400 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080400:	b508      	push	{r3, lr}
 8080402:	4b02      	ldr	r3, [pc, #8]	; (808040c <HAL_USART_Flush_Data+0xc>)
 8080404:	681b      	ldr	r3, [r3, #0]
 8080406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080408:	9301      	str	r3, [sp, #4]
 808040a:	bd08      	pop	{r3, pc}
 808040c:	080401c4 	.word	0x080401c4

08080410 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080410:	b508      	push	{r3, lr}
 8080412:	4b02      	ldr	r3, [pc, #8]	; (808041c <HAL_USART_Is_Enabled+0xc>)
 8080414:	681b      	ldr	r3, [r3, #0]
 8080416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080418:	9301      	str	r3, [sp, #4]
 808041a:	bd08      	pop	{r3, pc}
 808041c:	080401c4 	.word	0x080401c4

08080420 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080420:	b508      	push	{r3, lr}
 8080422:	4b02      	ldr	r3, [pc, #8]	; (808042c <HAL_USART_Available_Data_For_Write+0xc>)
 8080424:	681b      	ldr	r3, [r3, #0]
 8080426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080428:	9301      	str	r3, [sp, #4]
 808042a:	bd08      	pop	{r3, pc}
 808042c:	080401c4 	.word	0x080401c4

08080430 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8080430:	b508      	push	{r3, lr}
 8080432:	4b02      	ldr	r3, [pc, #8]	; (808043c <HAL_USART_BeginConfig+0xc>)
 8080434:	681b      	ldr	r3, [r3, #0]
 8080436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080438:	9301      	str	r3, [sp, #4]
 808043a:	bd08      	pop	{r3, pc}
 808043c:	080401c4 	.word	0x080401c4

08080440 <HAL_USART_Write_NineBitData>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, HAL_USART_Write_NineBitData, uint32_t(HAL_USART_Serial serial, uint16_t data))
 8080440:	b508      	push	{r3, lr}
 8080442:	4b02      	ldr	r3, [pc, #8]	; (808044c <HAL_USART_Write_NineBitData+0xc>)
 8080444:	681b      	ldr	r3, [r3, #0]
 8080446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8080448:	9301      	str	r3, [sp, #4]
 808044a:	bd08      	pop	{r3, pc}
 808044c:	080401c4 	.word	0x080401c4

08080450 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080450:	b508      	push	{r3, lr}
 8080452:	4b02      	ldr	r3, [pc, #8]	; (808045c <HAL_USB_USART_Init+0xc>)
 8080454:	681b      	ldr	r3, [r3, #0]
 8080456:	681b      	ldr	r3, [r3, #0]
 8080458:	9301      	str	r3, [sp, #4]
 808045a:	bd08      	pop	{r3, pc}
 808045c:	0806001c 	.word	0x0806001c

08080460 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080460:	b508      	push	{r3, lr}
 8080462:	4b02      	ldr	r3, [pc, #8]	; (808046c <HAL_USB_USART_Begin+0xc>)
 8080464:	681b      	ldr	r3, [r3, #0]
 8080466:	685b      	ldr	r3, [r3, #4]
 8080468:	9301      	str	r3, [sp, #4]
 808046a:	bd08      	pop	{r3, pc}
 808046c:	0806001c 	.word	0x0806001c

08080470 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080470:	b508      	push	{r3, lr}
 8080472:	4b02      	ldr	r3, [pc, #8]	; (808047c <HAL_USB_USART_Available_Data+0xc>)
 8080474:	681b      	ldr	r3, [r3, #0]
 8080476:	691b      	ldr	r3, [r3, #16]
 8080478:	9301      	str	r3, [sp, #4]
 808047a:	bd08      	pop	{r3, pc}
 808047c:	0806001c 	.word	0x0806001c

08080480 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080480:	b508      	push	{r3, lr}
 8080482:	4b02      	ldr	r3, [pc, #8]	; (808048c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080484:	681b      	ldr	r3, [r3, #0]
 8080486:	695b      	ldr	r3, [r3, #20]
 8080488:	9301      	str	r3, [sp, #4]
 808048a:	bd08      	pop	{r3, pc}
 808048c:	0806001c 	.word	0x0806001c

08080490 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080490:	b508      	push	{r3, lr}
 8080492:	4b02      	ldr	r3, [pc, #8]	; (808049c <HAL_USB_USART_Receive_Data+0xc>)
 8080494:	681b      	ldr	r3, [r3, #0]
 8080496:	699b      	ldr	r3, [r3, #24]
 8080498:	9301      	str	r3, [sp, #4]
 808049a:	bd08      	pop	{r3, pc}
 808049c:	0806001c 	.word	0x0806001c

080804a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80804a0:	b508      	push	{r3, lr}
 80804a2:	4b02      	ldr	r3, [pc, #8]	; (80804ac <HAL_USB_USART_Send_Data+0xc>)
 80804a4:	681b      	ldr	r3, [r3, #0]
 80804a6:	69db      	ldr	r3, [r3, #28]
 80804a8:	9301      	str	r3, [sp, #4]
 80804aa:	bd08      	pop	{r3, pc}
 80804ac:	0806001c 	.word	0x0806001c

080804b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80804b0:	b508      	push	{r3, lr}
 80804b2:	4b02      	ldr	r3, [pc, #8]	; (80804bc <HAL_USB_USART_Flush_Data+0xc>)
 80804b4:	681b      	ldr	r3, [r3, #0]
 80804b6:	6a1b      	ldr	r3, [r3, #32]
 80804b8:	9301      	str	r3, [sp, #4]
 80804ba:	bd08      	pop	{r3, pc}
 80804bc:	0806001c 	.word	0x0806001c

080804c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80804c0:	b508      	push	{r3, lr}
 80804c2:	4b02      	ldr	r3, [pc, #8]	; (80804cc <set_system_mode+0xc>)
 80804c4:	681b      	ldr	r3, [r3, #0]
 80804c6:	685b      	ldr	r3, [r3, #4]
 80804c8:	9301      	str	r3, [sp, #4]
 80804ca:	bd08      	pop	{r3, pc}
 80804cc:	080401a4 	.word	0x080401a4

080804d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80804d0:	b508      	push	{r3, lr}
 80804d2:	4b02      	ldr	r3, [pc, #8]	; (80804dc <system_delay_ms+0xc>)
 80804d4:	681b      	ldr	r3, [r3, #0]
 80804d6:	695b      	ldr	r3, [r3, #20]
 80804d8:	9301      	str	r3, [sp, #4]
 80804da:	bd08      	pop	{r3, pc}
 80804dc:	080401a4 	.word	0x080401a4

080804e0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80804e0:	b508      	push	{r3, lr}
 80804e2:	4b02      	ldr	r3, [pc, #8]	; (80804ec <system_thread_set_state+0xc>)
 80804e4:	681b      	ldr	r3, [r3, #0]
 80804e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80804e8:	9301      	str	r3, [sp, #4]
 80804ea:	bd08      	pop	{r3, pc}
 80804ec:	080401a4 	.word	0x080401a4

080804f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80804f0:	b508      	push	{r3, lr}
 80804f2:	4b03      	ldr	r3, [pc, #12]	; (8080500 <system_ctrl_set_app_request_handler+0x10>)
 80804f4:	681b      	ldr	r3, [r3, #0]
 80804f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80804fa:	9301      	str	r3, [sp, #4]
 80804fc:	bd08      	pop	{r3, pc}
 80804fe:	0000      	.short	0x0000
 8080500:	080401a4 	.word	0x080401a4

08080504 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080504:	b508      	push	{r3, lr}
 8080506:	4b03      	ldr	r3, [pc, #12]	; (8080514 <system_ctrl_set_result+0x10>)
 8080508:	681b      	ldr	r3, [r3, #0]
 808050a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808050e:	9301      	str	r3, [sp, #4]
 8080510:	bd08      	pop	{r3, pc}
 8080512:	0000      	.short	0x0000
 8080514:	080401a4 	.word	0x080401a4

08080518 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080518:	b508      	push	{r3, lr}
 808051a:	4b02      	ldr	r3, [pc, #8]	; (8080524 <spark_set_random_seed_from_cloud_handler+0xc>)
 808051c:	681b      	ldr	r3, [r3, #0]
 808051e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080520:	9301      	str	r3, [sp, #4]
 8080522:	bd08      	pop	{r3, pc}
 8080524:	080401cc 	.word	0x080401cc

08080528 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080528:	b508      	push	{r3, lr}
 808052a:	4b02      	ldr	r3, [pc, #8]	; (8080534 <network_ready+0xc>)
 808052c:	681b      	ldr	r3, [r3, #0]
 808052e:	691b      	ldr	r3, [r3, #16]
 8080530:	9301      	str	r3, [sp, #4]
 8080532:	bd08      	pop	{r3, pc}
 8080534:	080401c8 	.word	0x080401c8

08080538 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080538:	b508      	push	{r3, lr}
 808053a:	4b02      	ldr	r3, [pc, #8]	; (8080544 <malloc+0xc>)
 808053c:	681b      	ldr	r3, [r3, #0]
 808053e:	681b      	ldr	r3, [r3, #0]
 8080540:	9301      	str	r3, [sp, #4]
 8080542:	bd08      	pop	{r3, pc}
 8080544:	080401a0 	.word	0x080401a0

08080548 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080548:	b508      	push	{r3, lr}
 808054a:	4b02      	ldr	r3, [pc, #8]	; (8080554 <free+0xc>)
 808054c:	681b      	ldr	r3, [r3, #0]
 808054e:	685b      	ldr	r3, [r3, #4]
 8080550:	9301      	str	r3, [sp, #4]
 8080552:	bd08      	pop	{r3, pc}
 8080554:	080401a0 	.word	0x080401a0

08080558 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8080558:	b508      	push	{r3, lr}
 808055a:	4b02      	ldr	r3, [pc, #8]	; (8080564 <vsnprintf+0xc>)
 808055c:	681b      	ldr	r3, [r3, #0]
 808055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080560:	9301      	str	r3, [sp, #4]
 8080562:	bd08      	pop	{r3, pc}
 8080564:	080401a0 	.word	0x080401a0

08080568 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080568:	2100      	movs	r1, #0
 808056a:	f7ff bfb1 	b.w	80804d0 <system_delay_ms>

0808056e <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808056e:	2200      	movs	r2, #0
 8080570:	4611      	mov	r1, r2
 8080572:	4610      	mov	r0, r2
 8080574:	f7ff bfd8 	b.w	8080528 <network_ready>

08080578 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8080578:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808057a:	4c0b      	ldr	r4, [pc, #44]	; (80805a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 808057c:	2528      	movs	r5, #40	; 0x28
 808057e:	462a      	mov	r2, r5
 8080580:	2100      	movs	r1, #0
 8080582:	4620      	mov	r0, r4
 8080584:	f000 fd89 	bl	808109a <memset>
        cid = -1;
 8080588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808058c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 808058e:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8080590:	4c06      	ldr	r4, [pc, #24]	; (80805ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8080592:	4b07      	ldr	r3, [pc, #28]	; (80805b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8080594:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080596:	252c      	movs	r5, #44	; 0x2c
 8080598:	f840 3b04 	str.w	r3, [r0], #4
 808059c:	462a      	mov	r2, r5
 808059e:	2100      	movs	r1, #0
 80805a0:	f000 fd7b 	bl	808109a <memset>
        size = sizeof(*this);
 80805a4:	80a5      	strh	r5, [r4, #4]
 80805a6:	bd38      	pop	{r3, r4, r5, pc}
 80805a8:	200006e4 	.word	0x200006e4
 80805ac:	200006b4 	.word	0x200006b4
 80805b0:	0808113c 	.word	0x0808113c

080805b4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80805b4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80805b6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80805b8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80805ba:	b113      	cbz	r3, 80805c2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80805bc:	2203      	movs	r2, #3
 80805be:	4601      	mov	r1, r0
 80805c0:	4798      	blx	r3
    }
 80805c2:	4620      	mov	r0, r4
 80805c4:	bd10      	pop	{r4, pc}

080805c6 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80805c6:	4770      	bx	lr

080805c8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80805c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80805ca:	4606      	mov	r6, r0
 80805cc:	4615      	mov	r5, r2
 80805ce:	460c      	mov	r4, r1
 80805d0:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80805d2:	42bc      	cmp	r4, r7
 80805d4:	d006      	beq.n	80805e4 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80805d6:	6833      	ldr	r3, [r6, #0]
 80805d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80805dc:	689b      	ldr	r3, [r3, #8]
 80805de:	4630      	mov	r0, r6
 80805e0:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80805e2:	e7f6      	b.n	80805d2 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80805e4:	4628      	mov	r0, r5
 80805e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080805e8 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80805e8:	2200      	movs	r2, #0
 80805ea:	7c00      	ldrb	r0, [r0, #16]
 80805ec:	f7ff be98 	b.w	8080320 <HAL_I2C_Write_Data>

080805f0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80805f0:	2100      	movs	r1, #0
 80805f2:	7c00      	ldrb	r0, [r0, #16]
 80805f4:	f7ff be9c 	b.w	8080330 <HAL_I2C_Available_Data>

080805f8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80805f8:	2100      	movs	r1, #0
 80805fa:	7c00      	ldrb	r0, [r0, #16]
 80805fc:	f7ff bea0 	b.w	8080340 <HAL_I2C_Read_Data>

08080600 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8080600:	2100      	movs	r1, #0
 8080602:	7c00      	ldrb	r0, [r0, #16]
 8080604:	f7ff bea4 	b.w	8080350 <HAL_I2C_Peek_Data>

08080608 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8080608:	2100      	movs	r1, #0
 808060a:	7c00      	ldrb	r0, [r0, #16]
 808060c:	f7ff bea8 	b.w	8080360 <HAL_I2C_Flush_Data>

08080610 <_ZN7TwoWireD0Ev>:
 8080610:	b510      	push	{r4, lr}
 8080612:	4604      	mov	r4, r0
 8080614:	f7ff fd41 	bl	808009a <_ZdlPv>
 8080618:	4620      	mov	r0, r4
 808061a:	bd10      	pop	{r4, pc}

0808061c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808061c:	b510      	push	{r4, lr}
 808061e:	4604      	mov	r4, r0
 8080620:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080626:	60a3      	str	r3, [r4, #8]
 8080628:	4b04      	ldr	r3, [pc, #16]	; (808063c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808062a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 808062c:	7420      	strb	r0, [r4, #16]
 808062e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080630:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8080632:	f7ff fea5 	bl	8080380 <HAL_I2C_Init>

}
 8080636:	4620      	mov	r0, r4
 8080638:	bd10      	pop	{r4, pc}
 808063a:	bf00      	nop
 808063c:	08081148 	.word	0x08081148

08080640 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8080640:	2100      	movs	r1, #0
 8080642:	7c00      	ldrb	r0, [r0, #16]
 8080644:	f7ff be94 	b.w	8080370 <HAL_I2C_Is_Enabled>

08080648 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080648:	4770      	bx	lr

0808064a <_ZN9IPAddressD0Ev>:
 808064a:	b510      	push	{r4, lr}
 808064c:	4604      	mov	r4, r0
 808064e:	f7ff fd24 	bl	808009a <_ZdlPv>
 8080652:	4620      	mov	r0, r4
 8080654:	bd10      	pop	{r4, pc}

08080656 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080658:	460f      	mov	r7, r1
 808065a:	f100 0608 	add.w	r6, r0, #8
 808065e:	1d05      	adds	r5, r0, #4
 8080660:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080662:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8080666:	220a      	movs	r2, #10
 8080668:	4638      	mov	r0, r7
 808066a:	f000 f890 	bl	808078e <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808066e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080670:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080672:	d007      	beq.n	8080684 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8080674:	2c00      	cmp	r4, #0
 8080676:	d0f4      	beq.n	8080662 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080678:	212e      	movs	r1, #46	; 0x2e
 808067a:	4638      	mov	r0, r7
 808067c:	f000 f84e 	bl	808071c <_ZN5Print5printEc>
 8080680:	4404      	add	r4, r0
 8080682:	e7ee      	b.n	8080662 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8080684:	4620      	mov	r0, r4
 8080686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080688 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8080688:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808068a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808068e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8080692:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8080696:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808069a:	6041      	str	r1, [r0, #4]
 808069c:	bd10      	pop	{r4, pc}
	...

080806a0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80806a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80806a2:	4d04      	ldr	r5, [pc, #16]	; (80806b4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80806a4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80806a6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80806aa:	9500      	str	r5, [sp, #0]
 80806ac:	f7ff ffec 	bl	8080688 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80806b0:	b003      	add	sp, #12
 80806b2:	bd30      	pop	{r4, r5, pc}
 80806b4:	08081170 	.word	0x08081170

080806b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80806b8:	4a01      	ldr	r2, [pc, #4]	; (80806c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80806ba:	4b02      	ldr	r3, [pc, #8]	; (80806c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80806bc:	601a      	str	r2, [r3, #0]
 80806be:	4770      	bx	lr
 80806c0:	08081237 	.word	0x08081237
 80806c4:	2000070c 	.word	0x2000070c

080806c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80806c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80806ca:	4606      	mov	r6, r0
 80806cc:	460d      	mov	r5, r1
 80806ce:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80806d0:	2400      	movs	r4, #0
  while (size--) {
 80806d2:	42bd      	cmp	r5, r7
 80806d4:	d00c      	beq.n	80806f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80806d6:	6833      	ldr	r3, [r6, #0]
 80806d8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80806dc:	689b      	ldr	r3, [r3, #8]
 80806de:	4630      	mov	r0, r6
 80806e0:	4798      	blx	r3
     if (chunk>=0)
 80806e2:	2800      	cmp	r0, #0
 80806e4:	db01      	blt.n	80806ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80806e6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80806e8:	e7f3      	b.n	80806d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80806ea:	2c00      	cmp	r4, #0
 80806ec:	bf08      	it	eq
 80806ee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80806f0:	4620      	mov	r0, r4
 80806f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080806f4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80806f4:	b570      	push	{r4, r5, r6, lr}
 80806f6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80806f8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80806fa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80806fc:	b149      	cbz	r1, 8080712 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80806fe:	f000 fcfd 	bl	80810fc <strlen>
 8080702:	682b      	ldr	r3, [r5, #0]
 8080704:	4602      	mov	r2, r0
 8080706:	4621      	mov	r1, r4
 8080708:	4628      	mov	r0, r5
    }
 808070a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808070e:	68db      	ldr	r3, [r3, #12]
 8080710:	4718      	bx	r3
    }
 8080712:	bd70      	pop	{r4, r5, r6, pc}

08080714 <_ZN5Print5printEPKc>:
 8080714:	b508      	push	{r3, lr}
 8080716:	f7ff ffed 	bl	80806f4 <_ZN5Print5writeEPKc>
 808071a:	bd08      	pop	{r3, pc}

0808071c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808071c:	6803      	ldr	r3, [r0, #0]
 808071e:	689b      	ldr	r3, [r3, #8]
 8080720:	4718      	bx	r3

08080722 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080722:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080724:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080726:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080728:	f7ff fff8 	bl	808071c <_ZN5Print5printEc>
  n += print('\n');
 808072c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808072e:	4604      	mov	r4, r0
  n += print('\n');
 8080730:	4628      	mov	r0, r5
 8080732:	f7ff fff3 	bl	808071c <_ZN5Print5printEc>
  return n;
}
 8080736:	4420      	add	r0, r4
 8080738:	bd38      	pop	{r3, r4, r5, pc}

0808073a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808073a:	2a01      	cmp	r2, #1
 808073c:	bf98      	it	ls
 808073e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080740:	b530      	push	{r4, r5, lr}
 8080742:	460b      	mov	r3, r1
 8080744:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080746:	2100      	movs	r1, #0
 8080748:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808074c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8080750:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8080754:	fb05 3312 	mls	r3, r5, r2, r3
 8080758:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808075a:	2b09      	cmp	r3, #9
 808075c:	bf94      	ite	ls
 808075e:	3330      	addls	r3, #48	; 0x30
 8080760:	3337      	addhi	r3, #55	; 0x37
 8080762:	b2db      	uxtb	r3, r3
 8080764:	4621      	mov	r1, r4
 8080766:	f804 3901 	strb.w	r3, [r4], #-1
 808076a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808076c:	2d00      	cmp	r5, #0
 808076e:	d1ef      	bne.n	8080750 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8080770:	f7ff ffc0 	bl	80806f4 <_ZN5Print5writeEPKc>
}
 8080774:	b00b      	add	sp, #44	; 0x2c
 8080776:	bd30      	pop	{r4, r5, pc}

08080778 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8080778:	b410      	push	{r4}
  if (base == 0) return write(n);
 808077a:	b922      	cbnz	r2, 8080786 <_ZN5Print5printEmi+0xe>
 808077c:	6803      	ldr	r3, [r0, #0]
 808077e:	b2c9      	uxtb	r1, r1
 8080780:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8080782:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8080784:	4718      	bx	r3
  else return printNumber(n, base);
 8080786:	b2d2      	uxtb	r2, r2
}
 8080788:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808078a:	f7ff bfd6 	b.w	808073a <_ZN5Print11printNumberEmh>

0808078e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808078e:	f7ff bff3 	b.w	8080778 <_ZN5Print5printEmi>

08080792 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8080792:	b40c      	push	{r2, r3}
 8080794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8080798:	b087      	sub	sp, #28
 808079a:	af00      	add	r7, sp, #0
 808079c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80807a0:	f854 9b04 	ldr.w	r9, [r4], #4
 80807a4:	4605      	mov	r5, r0
 80807a6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80807a8:	4623      	mov	r3, r4
 80807aa:	464a      	mov	r2, r9
 80807ac:	2114      	movs	r1, #20
 80807ae:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80807b0:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80807b2:	f7ff fed1 	bl	8080558 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80807b6:	2813      	cmp	r0, #19
 80807b8:	d805      	bhi.n	80807c6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80807ba:	1d39      	adds	r1, r7, #4
 80807bc:	4628      	mov	r0, r5
 80807be:	f7ff ff99 	bl	80806f4 <_ZN5Print5writeEPKc>
 80807c2:	4604      	mov	r4, r0
 80807c4:	e013      	b.n	80807ee <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80807c6:	f100 0308 	add.w	r3, r0, #8
 80807ca:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80807ce:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80807d0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80807d4:	1c41      	adds	r1, r0, #1
 80807d6:	4623      	mov	r3, r4
 80807d8:	464a      	mov	r2, r9
 80807da:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80807dc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80807de:	f7ff febb 	bl	8080558 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80807e2:	4669      	mov	r1, sp
 80807e4:	4628      	mov	r0, r5
 80807e6:	f7ff ff85 	bl	80806f4 <_ZN5Print5writeEPKc>
 80807ea:	4604      	mov	r4, r0
 80807ec:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80807ee:	b11e      	cbz	r6, 80807f8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80807f0:	4628      	mov	r0, r5
 80807f2:	f7ff ff96 	bl	8080722 <_ZN5Print7printlnEv>
 80807f6:	4404      	add	r4, r0
    return n;
}
 80807f8:	4620      	mov	r0, r4
 80807fa:	371c      	adds	r7, #28
 80807fc:	46bd      	mov	sp, r7
 80807fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8080802:	b002      	add	sp, #8
 8080804:	4770      	bx	lr

08080806 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080806:	b510      	push	{r4, lr}
 8080808:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808080a:	f7ff fed3 	bl	80805b4 <_ZNSt14_Function_baseD1Ev>
 808080e:	4620      	mov	r0, r4
 8080810:	bd10      	pop	{r4, pc}
	...

08080814 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080814:	4803      	ldr	r0, [pc, #12]	; (8080824 <_GLOBAL__sub_I_RGB+0x10>)
 8080816:	2300      	movs	r3, #0
 8080818:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808081a:	4a03      	ldr	r2, [pc, #12]	; (8080828 <_GLOBAL__sub_I_RGB+0x14>)
 808081c:	4903      	ldr	r1, [pc, #12]	; (808082c <_GLOBAL__sub_I_RGB+0x18>)
 808081e:	f000 bad5 	b.w	8080dcc <__aeabi_atexit>
 8080822:	bf00      	nop
 8080824:	20000710 	.word	0x20000710
 8080828:	2000046c 	.word	0x2000046c
 808082c:	08080807 	.word	0x08080807

08080830 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8080830:	4770      	bx	lr

08080832 <_ZN8SPIClassD0Ev>:
 8080832:	b510      	push	{r4, lr}
 8080834:	4604      	mov	r4, r0
 8080836:	f7ff fc30 	bl	808009a <_ZdlPv>
 808083a:	4620      	mov	r0, r4
 808083c:	bd10      	pop	{r4, pc}
	...

08080840 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8080840:	b570      	push	{r4, r5, r6, lr}
 8080842:	4604      	mov	r4, r0
 8080844:	460e      	mov	r6, r1
 8080846:	4b07      	ldr	r3, [pc, #28]	; (8080864 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8080848:	2500      	movs	r5, #0
 808084a:	6003      	str	r3, [r0, #0]
 808084c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8080850:	f7ff fd26 	bl	80802a0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8080854:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8080856:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8080858:	f7ff fd9a 	bl	8080390 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 808085c:	60a5      	str	r5, [r4, #8]
}
 808085e:	4620      	mov	r0, r4
 8080860:	bd70      	pop	{r4, r5, r6, pc}
 8080862:	bf00      	nop
 8080864:	08081268 	.word	0x08081268

08080868 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8080868:	7900      	ldrb	r0, [r0, #4]
 808086a:	f7ff bd99 	b.w	80803a0 <HAL_SPI_Is_Enabled>
	...

08080870 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080870:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 8080874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080876:	4c0d      	ldr	r4, [pc, #52]	; (80808ac <_GLOBAL__sub_I_System+0x3c>)
 8080878:	2500      	movs	r5, #0
 808087a:	8063      	strh	r3, [r4, #2]
 808087c:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080880:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080882:	80a3      	strh	r3, [r4, #4]
 8080884:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080886:	f7ff fe1b 	bl	80804c0 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 808088a:	a802      	add	r0, sp, #8
 808088c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080890:	462a      	mov	r2, r5
 8080892:	4629      	mov	r1, r5
 8080894:	f7ff fd0c 	bl	80802b0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080898:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 808089a:	2b1e      	cmp	r3, #30
 808089c:	d104      	bne.n	80808a8 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 808089e:	2303      	movs	r3, #3
 80808a0:	7023      	strb	r3, [r4, #0]
 80808a2:	2311      	movs	r3, #17
 80808a4:	8065      	strh	r5, [r4, #2]
 80808a6:	80a3      	strh	r3, [r4, #4]
 80808a8:	b003      	add	sp, #12
 80808aa:	bd30      	pop	{r4, r5, pc}
 80808ac:	20000720 	.word	0x20000720

080808b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80808b0:	4b02      	ldr	r3, [pc, #8]	; (80808bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80808b2:	681a      	ldr	r2, [r3, #0]
 80808b4:	4b02      	ldr	r3, [pc, #8]	; (80808c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80808b6:	601a      	str	r2, [r3, #0]
 80808b8:	4770      	bx	lr
 80808ba:	bf00      	nop
 80808bc:	20000404 	.word	0x20000404
 80808c0:	20000728 	.word	0x20000728

080808c4 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80808c4:	7441      	strb	r1, [r0, #17]
 80808c6:	4770      	bx	lr

080808c8 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80808c8:	7c00      	ldrb	r0, [r0, #16]
 80808ca:	f7ff bda9 	b.w	8080420 <HAL_USART_Available_Data_For_Write>

080808ce <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80808ce:	7c00      	ldrb	r0, [r0, #16]
 80808d0:	f7ff bd7e 	b.w	80803d0 <HAL_USART_Available_Data>

080808d4 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80808d4:	7c00      	ldrb	r0, [r0, #16]
 80808d6:	f7ff bd8b 	b.w	80803f0 <HAL_USART_Peek_Data>

080808da <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80808da:	7c00      	ldrb	r0, [r0, #16]
 80808dc:	f7ff bd80 	b.w	80803e0 <HAL_USART_Read_Data>

080808e0 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80808e0:	7c00      	ldrb	r0, [r0, #16]
 80808e2:	f7ff bd8d 	b.w	8080400 <HAL_USART_Flush_Data>

080808e6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80808e6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80808e8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80808ea:	4604      	mov	r4, r0
 80808ec:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80808ee:	b925      	cbnz	r5, 80808fa <_ZN11USARTSerial5writeEh+0x14>
 80808f0:	7c00      	ldrb	r0, [r0, #16]
 80808f2:	f7ff fd95 	bl	8080420 <HAL_USART_Available_Data_For_Write>
 80808f6:	2800      	cmp	r0, #0
 80808f8:	dd05      	ble.n	8080906 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80808fa:	4631      	mov	r1, r6
 80808fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80808fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8080902:	f7ff bd5d 	b.w	80803c0 <HAL_USART_Write_Data>
  }
  return 0;
}
 8080906:	4628      	mov	r0, r5
 8080908:	bd70      	pop	{r4, r5, r6, pc}
	...

0808090c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808090c:	b510      	push	{r4, lr}
 808090e:	4604      	mov	r4, r0
 8080910:	4608      	mov	r0, r1
 8080912:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080914:	2200      	movs	r2, #0
 8080916:	6062      	str	r2, [r4, #4]
 8080918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808091c:	60a2      	str	r2, [r4, #8]
 808091e:	4a05      	ldr	r2, [pc, #20]	; (8080934 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8080920:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8080922:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8080924:	2201      	movs	r2, #1
 8080926:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8080928:	461a      	mov	r2, r3
 808092a:	f7ff fd41 	bl	80803b0 <HAL_USART_Init>
}
 808092e:	4620      	mov	r0, r4
 8080930:	bd10      	pop	{r4, pc}
 8080932:	bf00      	nop
 8080934:	080812a4 	.word	0x080812a4

08080938 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8080938:	2300      	movs	r3, #0
 808093a:	7c00      	ldrb	r0, [r0, #16]
 808093c:	f7ff bd78 	b.w	8080430 <HAL_USART_BeginConfig>

08080940 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8080940:	2200      	movs	r2, #0
 8080942:	f7ff bff9 	b.w	8080938 <_ZN11USARTSerial5beginEmm>

08080946 <_ZN11USARTSerial5writeEt>:
  return 0;
}

size_t USARTSerial::write(uint16_t c)
{
  return HAL_USART_Write_NineBitData(_serial, c);
 8080946:	7c00      	ldrb	r0, [r0, #16]
 8080948:	f7ff bd7a 	b.w	8080440 <HAL_USART_Write_NineBitData>

0808094c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808094c:	7c00      	ldrb	r0, [r0, #16]
 808094e:	f7ff bd5f 	b.w	8080410 <HAL_USART_Is_Enabled>
	...

08080954 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8080954:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8080956:	4d0c      	ldr	r5, [pc, #48]	; (8080988 <_Z22__fetch_global_Serial1v+0x34>)
 8080958:	6829      	ldr	r1, [r5, #0]
 808095a:	f011 0401 	ands.w	r4, r1, #1
 808095e:	d111      	bne.n	8080984 <_Z22__fetch_global_Serial1v+0x30>
 8080960:	4628      	mov	r0, r5
 8080962:	f7ff fb9c 	bl	808009e <__cxa_guard_acquire>
 8080966:	b168      	cbz	r0, 8080984 <_Z22__fetch_global_Serial1v+0x30>
 8080968:	4a08      	ldr	r2, [pc, #32]	; (808098c <_Z22__fetch_global_Serial1v+0x38>)
 808096a:	4621      	mov	r1, r4
 808096c:	4b08      	ldr	r3, [pc, #32]	; (8080990 <_Z22__fetch_global_Serial1v+0x3c>)
 808096e:	4809      	ldr	r0, [pc, #36]	; (8080994 <_Z22__fetch_global_Serial1v+0x40>)
 8080970:	f7ff ffcc 	bl	808090c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080974:	4628      	mov	r0, r5
 8080976:	f7ff fb97 	bl	80800a8 <__cxa_guard_release>
 808097a:	4a07      	ldr	r2, [pc, #28]	; (8080998 <_Z22__fetch_global_Serial1v+0x44>)
 808097c:	4907      	ldr	r1, [pc, #28]	; (808099c <_Z22__fetch_global_Serial1v+0x48>)
 808097e:	4805      	ldr	r0, [pc, #20]	; (8080994 <_Z22__fetch_global_Serial1v+0x40>)
 8080980:	f000 fa24 	bl	8080dcc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8080984:	4803      	ldr	r0, [pc, #12]	; (8080994 <_Z22__fetch_global_Serial1v+0x40>)
 8080986:	bd38      	pop	{r3, r4, r5, pc}
 8080988:	200007c4 	.word	0x200007c4
 808098c:	200007c8 	.word	0x200007c8
 8080990:	20000740 	.word	0x20000740
 8080994:	2000072c 	.word	0x2000072c
 8080998:	2000046c 	.word	0x2000046c
 808099c:	080800af 	.word	0x080800af

080809a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80809a0:	7441      	strb	r1, [r0, #17]
 80809a2:	4770      	bx	lr

080809a4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80809a4:	4770      	bx	lr

080809a6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80809a6:	2100      	movs	r1, #0
 80809a8:	7c00      	ldrb	r0, [r0, #16]
 80809aa:	f7ff bd71 	b.w	8080490 <HAL_USB_USART_Receive_Data>

080809ae <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80809ae:	2101      	movs	r1, #1
 80809b0:	7c00      	ldrb	r0, [r0, #16]
 80809b2:	f7ff bd6d 	b.w	8080490 <HAL_USB_USART_Receive_Data>

080809b6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80809b6:	7c00      	ldrb	r0, [r0, #16]
 80809b8:	f7ff bd62 	b.w	8080480 <HAL_USB_USART_Available_Data_For_Write>

080809bc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80809bc:	7c00      	ldrb	r0, [r0, #16]
 80809be:	f7ff bd57 	b.w	8080470 <HAL_USB_USART_Available_Data>

080809c2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80809c2:	b538      	push	{r3, r4, r5, lr}
 80809c4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80809c6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80809c8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80809ca:	f7ff fd59 	bl	8080480 <HAL_USB_USART_Available_Data_For_Write>
 80809ce:	2800      	cmp	r0, #0
 80809d0:	dc01      	bgt.n	80809d6 <_ZN9USBSerial5writeEh+0x14>
 80809d2:	7c60      	ldrb	r0, [r4, #17]
 80809d4:	b120      	cbz	r0, 80809e0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80809d6:	4629      	mov	r1, r5
 80809d8:	7c20      	ldrb	r0, [r4, #16]
 80809da:	f7ff fd61 	bl	80804a0 <HAL_USB_USART_Send_Data>
    return 1;
 80809de:	2001      	movs	r0, #1
  }
  return 0;
}
 80809e0:	bd38      	pop	{r3, r4, r5, pc}

080809e2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80809e2:	7c00      	ldrb	r0, [r0, #16]
 80809e4:	f7ff bd64 	b.w	80804b0 <HAL_USB_USART_Flush_Data>

080809e8 <_ZN9USBSerialD0Ev>:
 80809e8:	b510      	push	{r4, lr}
 80809ea:	4604      	mov	r4, r0
 80809ec:	f7ff fb55 	bl	808009a <_ZdlPv>
 80809f0:	4620      	mov	r0, r4
 80809f2:	bd10      	pop	{r4, pc}

080809f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80809f4:	b510      	push	{r4, lr}
 80809f6:	4604      	mov	r4, r0
 80809f8:	2300      	movs	r3, #0
 80809fa:	6063      	str	r3, [r4, #4]
 80809fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080a00:	60a3      	str	r3, [r4, #8]
 8080a02:	4b05      	ldr	r3, [pc, #20]	; (8080a18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8080a04:	4608      	mov	r0, r1
 8080a06:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8080a08:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8080a0a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8080a0c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8080a0e:	4611      	mov	r1, r2
 8080a10:	f7ff fd1e 	bl	8080450 <HAL_USB_USART_Init>
}
 8080a14:	4620      	mov	r0, r4
 8080a16:	bd10      	pop	{r4, pc}
 8080a18:	080812d4 	.word	0x080812d4

08080a1c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8080a1c:	2200      	movs	r2, #0
 8080a1e:	7c00      	ldrb	r0, [r0, #16]
 8080a20:	f7ff bd1e 	b.w	8080460 <HAL_USB_USART_Begin>

08080a24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080a24:	b510      	push	{r4, lr}
 8080a26:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080a28:	2214      	movs	r2, #20
 8080a2a:	2100      	movs	r1, #0
 8080a2c:	f000 fb35 	bl	808109a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080a30:	4b05      	ldr	r3, [pc, #20]	; (8080a48 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080a32:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080a34:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8080a36:	4b05      	ldr	r3, [pc, #20]	; (8080a4c <_Z19acquireSerialBufferv+0x28>)
 8080a38:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080a3a:	f240 1301 	movw	r3, #257	; 0x101
 8080a3e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080a40:	2381      	movs	r3, #129	; 0x81
 8080a42:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8080a44:	bd10      	pop	{r4, pc}
 8080a46:	bf00      	nop
 8080a48:	200008d1 	.word	0x200008d1
 8080a4c:	20000850 	.word	0x20000850

08080a50 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080a50:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080a52:	4d0e      	ldr	r5, [pc, #56]	; (8080a8c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8080a54:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080a56:	a801      	add	r0, sp, #4
 8080a58:	f7ff ffe4 	bl	8080a24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080a5c:	6829      	ldr	r1, [r5, #0]
 8080a5e:	f011 0401 	ands.w	r4, r1, #1
 8080a62:	d110      	bne.n	8080a86 <_Z16_fetch_usbserialv+0x36>
 8080a64:	4628      	mov	r0, r5
 8080a66:	f7ff fb1a 	bl	808009e <__cxa_guard_acquire>
 8080a6a:	b160      	cbz	r0, 8080a86 <_Z16_fetch_usbserialv+0x36>
 8080a6c:	aa01      	add	r2, sp, #4
 8080a6e:	4621      	mov	r1, r4
 8080a70:	4807      	ldr	r0, [pc, #28]	; (8080a90 <_Z16_fetch_usbserialv+0x40>)
 8080a72:	f7ff ffbf 	bl	80809f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080a76:	4628      	mov	r0, r5
 8080a78:	f7ff fb16 	bl	80800a8 <__cxa_guard_release>
 8080a7c:	4a05      	ldr	r2, [pc, #20]	; (8080a94 <_Z16_fetch_usbserialv+0x44>)
 8080a7e:	4906      	ldr	r1, [pc, #24]	; (8080a98 <_Z16_fetch_usbserialv+0x48>)
 8080a80:	4803      	ldr	r0, [pc, #12]	; (8080a90 <_Z16_fetch_usbserialv+0x40>)
 8080a82:	f000 f9a3 	bl	8080dcc <__aeabi_atexit>
	return _usbserial;
}
 8080a86:	4802      	ldr	r0, [pc, #8]	; (8080a90 <_Z16_fetch_usbserialv+0x40>)
 8080a88:	b007      	add	sp, #28
 8080a8a:	bd30      	pop	{r4, r5, pc}
 8080a8c:	2000084c 	.word	0x2000084c
 8080a90:	200009d4 	.word	0x200009d4
 8080a94:	2000046c 	.word	0x2000046c
 8080a98:	080809a5 	.word	0x080809a5

08080a9c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8080a9c:	b510      	push	{r4, lr}
 8080a9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080aa0:	2214      	movs	r2, #20
 8080aa2:	2100      	movs	r1, #0
 8080aa4:	f000 faf9 	bl	808109a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080aa8:	4b05      	ldr	r3, [pc, #20]	; (8080ac0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080aaa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080aac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8080aae:	4b05      	ldr	r3, [pc, #20]	; (8080ac4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8080ab0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080ab2:	f240 1301 	movw	r3, #257	; 0x101
 8080ab6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080ab8:	2381      	movs	r3, #129	; 0x81
 8080aba:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8080abc:	bd10      	pop	{r4, pc}
 8080abe:	bf00      	nop
 8080ac0:	20000a84 	.word	0x20000a84
 8080ac4:	200009ec 	.word	0x200009ec

08080ac8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8080ac8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080aca:	4c0e      	ldr	r4, [pc, #56]	; (8080b04 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8080acc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8080ace:	a801      	add	r0, sp, #4
 8080ad0:	f7ff ffe4 	bl	8080a9c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080ad4:	6823      	ldr	r3, [r4, #0]
 8080ad6:	07db      	lsls	r3, r3, #31
 8080ad8:	d410      	bmi.n	8080afc <_Z17_fetch_usbserial1v+0x34>
 8080ada:	4620      	mov	r0, r4
 8080adc:	f7ff fadf 	bl	808009e <__cxa_guard_acquire>
 8080ae0:	b160      	cbz	r0, 8080afc <_Z17_fetch_usbserial1v+0x34>
 8080ae2:	aa01      	add	r2, sp, #4
 8080ae4:	2101      	movs	r1, #1
 8080ae6:	4808      	ldr	r0, [pc, #32]	; (8080b08 <_Z17_fetch_usbserial1v+0x40>)
 8080ae8:	f7ff ff84 	bl	80809f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080aec:	4620      	mov	r0, r4
 8080aee:	f7ff fadb 	bl	80800a8 <__cxa_guard_release>
 8080af2:	4a06      	ldr	r2, [pc, #24]	; (8080b0c <_Z17_fetch_usbserial1v+0x44>)
 8080af4:	4906      	ldr	r1, [pc, #24]	; (8080b10 <_Z17_fetch_usbserial1v+0x48>)
 8080af6:	4804      	ldr	r0, [pc, #16]	; (8080b08 <_Z17_fetch_usbserial1v+0x40>)
 8080af8:	f000 f968 	bl	8080dcc <__aeabi_atexit>
  return _usbserial1;
}
 8080afc:	4802      	ldr	r0, [pc, #8]	; (8080b08 <_Z17_fetch_usbserial1v+0x40>)
 8080afe:	b006      	add	sp, #24
 8080b00:	bd10      	pop	{r4, pc}
 8080b02:	bf00      	nop
 8080b04:	200009e8 	.word	0x200009e8
 8080b08:	20000a70 	.word	0x20000a70
 8080b0c:	2000046c 	.word	0x2000046c
 8080b10:	080809a5 	.word	0x080809a5

08080b14 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8080b14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080b16:	4b18      	ldr	r3, [pc, #96]	; (8080b78 <serialEventRun+0x64>)
 8080b18:	b133      	cbz	r3, 8080b28 <serialEventRun+0x14>
 8080b1a:	f7ff ff99 	bl	8080a50 <_Z16_fetch_usbserialv>
 8080b1e:	6803      	ldr	r3, [r0, #0]
 8080b20:	691b      	ldr	r3, [r3, #16]
 8080b22:	4798      	blx	r3
 8080b24:	2800      	cmp	r0, #0
 8080b26:	dc1e      	bgt.n	8080b66 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8080b28:	4b14      	ldr	r3, [pc, #80]	; (8080b7c <serialEventRun+0x68>)
 8080b2a:	b133      	cbz	r3, 8080b3a <serialEventRun+0x26>
 8080b2c:	f7ff ff12 	bl	8080954 <_Z22__fetch_global_Serial1v>
 8080b30:	6803      	ldr	r3, [r0, #0]
 8080b32:	691b      	ldr	r3, [r3, #16]
 8080b34:	4798      	blx	r3
 8080b36:	2800      	cmp	r0, #0
 8080b38:	dc18      	bgt.n	8080b6c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8080b3a:	4b11      	ldr	r3, [pc, #68]	; (8080b80 <serialEventRun+0x6c>)
 8080b3c:	b10b      	cbz	r3, 8080b42 <serialEventRun+0x2e>
 8080b3e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8080b42:	4b10      	ldr	r3, [pc, #64]	; (8080b84 <serialEventRun+0x70>)
 8080b44:	b10b      	cbz	r3, 8080b4a <serialEventRun+0x36>
 8080b46:	f7ff fadf 	bl	8080108 <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8080b4a:	4b0f      	ldr	r3, [pc, #60]	; (8080b88 <serialEventRun+0x74>)
 8080b4c:	b10b      	cbz	r3, 8080b52 <serialEventRun+0x3e>
 8080b4e:	f7ff fb15 	bl	808017c <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080b52:	4b0e      	ldr	r3, [pc, #56]	; (8080b8c <serialEventRun+0x78>)
 8080b54:	b17b      	cbz	r3, 8080b76 <serialEventRun+0x62>
 8080b56:	f7ff ffb7 	bl	8080ac8 <_Z17_fetch_usbserial1v>
 8080b5a:	6803      	ldr	r3, [r0, #0]
 8080b5c:	691b      	ldr	r3, [r3, #16]
 8080b5e:	4798      	blx	r3
 8080b60:	2800      	cmp	r0, #0
 8080b62:	dc06      	bgt.n	8080b72 <serialEventRun+0x5e>
 8080b64:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8080b66:	f3af 8000 	nop.w
 8080b6a:	e7dd      	b.n	8080b28 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8080b6c:	f3af 8000 	nop.w
 8080b70:	e7e3      	b.n	8080b3a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8080b72:	f3af 8000 	nop.w
 8080b76:	bd08      	pop	{r3, pc}
	...
 8080b84:	08080109 	.word	0x08080109
 8080b88:	0808017d 	.word	0x0808017d
 8080b8c:	00000000 	.word	0x00000000

08080b90 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8080b90:	b508      	push	{r3, lr}
	serialEventRun();
 8080b92:	f7ff ffbf 	bl	8080b14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080b96:	f7ff fb9b 	bl	80802d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080b9a:	4b01      	ldr	r3, [pc, #4]	; (8080ba0 <_post_loop+0x10>)
 8080b9c:	6018      	str	r0, [r3, #0]
 8080b9e:	bd08      	pop	{r3, pc}
 8080ba0:	20000b90 	.word	0x20000b90

08080ba4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080ba4:	4802      	ldr	r0, [pc, #8]	; (8080bb0 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080ba6:	4a03      	ldr	r2, [pc, #12]	; (8080bb4 <_Z33system_initialize_user_backup_ramv+0x10>)
 8080ba8:	4903      	ldr	r1, [pc, #12]	; (8080bb8 <_Z33system_initialize_user_backup_ramv+0x14>)
 8080baa:	1a12      	subs	r2, r2, r0
 8080bac:	f000 ba6a 	b.w	8081084 <memcpy>
 8080bb0:	40024000 	.word	0x40024000
 8080bb4:	40024004 	.word	0x40024004
 8080bb8:	080813a0 	.word	0x080813a0

08080bbc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080bbc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080bbe:	2300      	movs	r3, #0
 8080bc0:	9300      	str	r3, [sp, #0]
 8080bc2:	461a      	mov	r2, r3
 8080bc4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080bc8:	f7ff fc9c 	bl	8080504 <system_ctrl_set_result>
}
 8080bcc:	b003      	add	sp, #12
 8080bce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080bd4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8080bd4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080bd6:	8843      	ldrh	r3, [r0, #2]
 8080bd8:	2b0a      	cmp	r3, #10
 8080bda:	d008      	beq.n	8080bee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080bdc:	2b50      	cmp	r3, #80	; 0x50
 8080bde:	d109      	bne.n	8080bf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8080be0:	4b09      	ldr	r3, [pc, #36]	; (8080c08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080be2:	681b      	ldr	r3, [r3, #0]
 8080be4:	b13b      	cbz	r3, 8080bf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8080be6:	b003      	add	sp, #12
 8080be8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8080bec:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8080bee:	f7ff ffe5 	bl	8080bbc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8080bf2:	e006      	b.n	8080c02 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080bf4:	2300      	movs	r3, #0
 8080bf6:	9300      	str	r3, [sp, #0]
 8080bf8:	461a      	mov	r2, r3
 8080bfa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080bfe:	f7ff fc81 	bl	8080504 <system_ctrl_set_result>
        break;
    }
}
 8080c02:	b003      	add	sp, #12
 8080c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8080c08:	20000b88 	.word	0x20000b88

08080c0c <module_user_init_hook>:

void module_user_init_hook()
{
 8080c0c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080c0e:	4c10      	ldr	r4, [pc, #64]	; (8080c50 <module_user_init_hook+0x44>)
 8080c10:	4d10      	ldr	r5, [pc, #64]	; (8080c54 <module_user_init_hook+0x48>)
 8080c12:	6823      	ldr	r3, [r4, #0]
 8080c14:	42ab      	cmp	r3, r5
 8080c16:	4b10      	ldr	r3, [pc, #64]	; (8080c58 <module_user_init_hook+0x4c>)
 8080c18:	bf0c      	ite	eq
 8080c1a:	2201      	moveq	r2, #1
 8080c1c:	2200      	movne	r2, #0
 8080c1e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080c20:	d002      	beq.n	8080c28 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8080c22:	f7ff ffbf 	bl	8080ba4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080c26:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 8080c28:	f7ff fb4a 	bl	80802c0 <HAL_RNG_GetRandomNumber>
 8080c2c:	f000 fa3e 	bl	80810ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8080c30:	4b0a      	ldr	r3, [pc, #40]	; (8080c5c <module_user_init_hook+0x50>)
 8080c32:	b11b      	cbz	r3, 8080c3c <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 8080c34:	f7ff fb44 	bl	80802c0 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 8080c38:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080c3c:	2100      	movs	r1, #0
 8080c3e:	4807      	ldr	r0, [pc, #28]	; (8080c5c <module_user_init_hook+0x50>)
 8080c40:	f7ff fc6a 	bl	8080518 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080c48:	2100      	movs	r1, #0
 8080c4a:	4805      	ldr	r0, [pc, #20]	; (8080c60 <module_user_init_hook+0x54>)
 8080c4c:	f7ff bc50 	b.w	80804f0 <system_ctrl_set_app_request_handler>
 8080c50:	40024000 	.word	0x40024000
 8080c54:	9a271c1e 	.word	0x9a271c1e
 8080c58:	20000b8c 	.word	0x20000b8c
 8080c5c:	00000000 	.word	0x00000000
 8080c60:	08080bd5 	.word	0x08080bd5

08080c64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8080c64:	b510      	push	{r4, lr}
 8080c66:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8080c68:	480f      	ldr	r0, [pc, #60]	; (8080ca8 <pinAvailable+0x44>)
 8080c6a:	f7ff fdfd 	bl	8080868 <_ZN8SPIClass9isEnabledEv>
 8080c6e:	b128      	cbz	r0, 8080c7c <pinAvailable+0x18>
 8080c70:	f1a4 030d 	sub.w	r3, r4, #13
 8080c74:	2b02      	cmp	r3, #2
 8080c76:	d801      	bhi.n	8080c7c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8080c78:	2000      	movs	r0, #0
 8080c7a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8080c7c:	f000 f840 	bl	8080d00 <_Z19__fetch_global_Wirev>
 8080c80:	f7ff fcde 	bl	8080640 <_ZN7TwoWire9isEnabledEv>
 8080c84:	b108      	cbz	r0, 8080c8a <pinAvailable+0x26>
 8080c86:	2c01      	cmp	r4, #1
 8080c88:	d9f6      	bls.n	8080c78 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8080c8a:	f7ff fe63 	bl	8080954 <_Z22__fetch_global_Serial1v>
 8080c8e:	f7ff fe5d 	bl	808094c <_ZN11USARTSerial9isEnabledEv>
 8080c92:	b118      	cbz	r0, 8080c9c <pinAvailable+0x38>
 8080c94:	f1a4 0312 	sub.w	r3, r4, #18
 8080c98:	2b01      	cmp	r3, #1
 8080c9a:	d9ed      	bls.n	8080c78 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8080c9c:	2c2e      	cmp	r4, #46	; 0x2e
 8080c9e:	bf8c      	ite	hi
 8080ca0:	2000      	movhi	r0, #0
 8080ca2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8080ca4:	bd10      	pop	{r4, pc}
 8080ca6:	bf00      	nop
 8080ca8:	20000bb4 	.word	0x20000bb4

08080cac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8080cac:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8080cae:	b538      	push	{r3, r4, r5, lr}
 8080cb0:	4604      	mov	r4, r0
 8080cb2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8080cb4:	d80a      	bhi.n	8080ccc <pinMode+0x20>
 8080cb6:	29ff      	cmp	r1, #255	; 0xff
 8080cb8:	d008      	beq.n	8080ccc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8080cba:	f7ff ffd3 	bl	8080c64 <pinAvailable>
 8080cbe:	b128      	cbz	r0, 8080ccc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8080cc0:	4629      	mov	r1, r5
 8080cc2:	4620      	mov	r0, r4
}
 8080cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8080cc8:	f7ff bb12 	b.w	80802f0 <HAL_Pin_Mode>
 8080ccc:	bd38      	pop	{r3, r4, r5, pc}

08080cce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8080cce:	b538      	push	{r3, r4, r5, lr}
 8080cd0:	4604      	mov	r4, r0
 8080cd2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8080cd4:	f7ff fb14 	bl	8080300 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8080cd8:	28ff      	cmp	r0, #255	; 0xff
 8080cda:	d010      	beq.n	8080cfe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8080cdc:	2806      	cmp	r0, #6
 8080cde:	d804      	bhi.n	8080cea <digitalWrite+0x1c>
 8080ce0:	234d      	movs	r3, #77	; 0x4d
 8080ce2:	fa23 f000 	lsr.w	r0, r3, r0
 8080ce6:	07c3      	lsls	r3, r0, #31
 8080ce8:	d409      	bmi.n	8080cfe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8080cea:	4620      	mov	r0, r4
 8080cec:	f7ff ffba 	bl	8080c64 <pinAvailable>
 8080cf0:	b128      	cbz	r0, 8080cfe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8080cf2:	4629      	mov	r1, r5
 8080cf4:	4620      	mov	r0, r4
}
 8080cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8080cfa:	f7ff bb09 	b.w	8080310 <HAL_GPIO_Write>
 8080cfe:	bd38      	pop	{r3, r4, r5, pc}

08080d00 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8080d00:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8080d02:	4d0b      	ldr	r5, [pc, #44]	; (8080d30 <_Z19__fetch_global_Wirev+0x30>)
 8080d04:	6829      	ldr	r1, [r5, #0]
 8080d06:	f011 0401 	ands.w	r4, r1, #1
 8080d0a:	d10f      	bne.n	8080d2c <_Z19__fetch_global_Wirev+0x2c>
 8080d0c:	4628      	mov	r0, r5
 8080d0e:	f7ff f9c6 	bl	808009e <__cxa_guard_acquire>
 8080d12:	b158      	cbz	r0, 8080d2c <_Z19__fetch_global_Wirev+0x2c>
 8080d14:	4621      	mov	r1, r4
 8080d16:	4807      	ldr	r0, [pc, #28]	; (8080d34 <_Z19__fetch_global_Wirev+0x34>)
 8080d18:	f7ff fc80 	bl	808061c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8080d1c:	4628      	mov	r0, r5
 8080d1e:	f7ff f9c3 	bl	80800a8 <__cxa_guard_release>
 8080d22:	4a05      	ldr	r2, [pc, #20]	; (8080d38 <_Z19__fetch_global_Wirev+0x38>)
 8080d24:	4905      	ldr	r1, [pc, #20]	; (8080d3c <_Z19__fetch_global_Wirev+0x3c>)
 8080d26:	4803      	ldr	r0, [pc, #12]	; (8080d34 <_Z19__fetch_global_Wirev+0x34>)
 8080d28:	f000 f850 	bl	8080dcc <__aeabi_atexit>
	return wire;
}
 8080d2c:	4801      	ldr	r0, [pc, #4]	; (8080d34 <_Z19__fetch_global_Wirev+0x34>)
 8080d2e:	bd38      	pop	{r3, r4, r5, pc}
 8080d30:	20000b94 	.word	0x20000b94
 8080d34:	20000b98 	.word	0x20000b98
 8080d38:	2000046c 	.word	0x2000046c
 8080d3c:	080805c7 	.word	0x080805c7

08080d40 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 8080d40:	b513      	push	{r0, r1, r4, lr}
 8080d42:	4c08      	ldr	r4, [pc, #32]	; (8080d64 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8080d44:	2300      	movs	r3, #0
 8080d46:	461a      	mov	r2, r3
 8080d48:	4619      	mov	r1, r3
 8080d4a:	9300      	str	r3, [sp, #0]
 8080d4c:	4620      	mov	r0, r4
 8080d4e:	f7ff fca7 	bl	80806a0 <_ZN9IPAddressC1Ehhhh>
 8080d52:	4620      	mov	r0, r4
 8080d54:	4a04      	ldr	r2, [pc, #16]	; (8080d68 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8080d56:	4905      	ldr	r1, [pc, #20]	; (8080d6c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8080d58:	b002      	add	sp, #8
 8080d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080d5e:	f000 b835 	b.w	8080dcc <__aeabi_atexit>
 8080d62:	bf00      	nop
 8080d64:	20000bac 	.word	0x20000bac
 8080d68:	2000046c 	.word	0x2000046c
 8080d6c:	08080649 	.word	0x08080649

08080d70 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8080d70:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8080d72:	4e11      	ldr	r6, [pc, #68]	; (8080db8 <_GLOBAL__sub_I_SPI+0x48>)
 8080d74:	4d11      	ldr	r5, [pc, #68]	; (8080dbc <_GLOBAL__sub_I_SPI+0x4c>)
 8080d76:	4c12      	ldr	r4, [pc, #72]	; (8080dc0 <_GLOBAL__sub_I_SPI+0x50>)
 8080d78:	2100      	movs	r1, #0
 8080d7a:	4630      	mov	r0, r6
 8080d7c:	f7ff fd60 	bl	8080840 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8080d80:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8080d82:	4e10      	ldr	r6, [pc, #64]	; (8080dc4 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8080d84:	462a      	mov	r2, r5
 8080d86:	4621      	mov	r1, r4
 8080d88:	f000 f820 	bl	8080dcc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8080d8c:	2101      	movs	r1, #1
 8080d8e:	4630      	mov	r0, r6
 8080d90:	f7ff fd56 	bl	8080840 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8080d94:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8080d96:	4e0c      	ldr	r6, [pc, #48]	; (8080dc8 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8080d98:	462a      	mov	r2, r5
 8080d9a:	4621      	mov	r1, r4
 8080d9c:	f000 f816 	bl	8080dcc <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8080da0:	2102      	movs	r1, #2
 8080da2:	4630      	mov	r0, r6
 8080da4:	f7ff fd4c 	bl	8080840 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8080da8:	462a      	mov	r2, r5
 8080daa:	4621      	mov	r1, r4
 8080dac:	4630      	mov	r0, r6
 8080dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8080db2:	f000 b80b 	b.w	8080dcc <__aeabi_atexit>
 8080db6:	bf00      	nop
 8080db8:	20000bb4 	.word	0x20000bb4
 8080dbc:	2000046c 	.word	0x2000046c
 8080dc0:	08080831 	.word	0x08080831
 8080dc4:	20000bc4 	.word	0x20000bc4
 8080dc8:	20000bd4 	.word	0x20000bd4

08080dcc <__aeabi_atexit>:
 8080dcc:	460b      	mov	r3, r1
 8080dce:	4601      	mov	r1, r0
 8080dd0:	4618      	mov	r0, r3
 8080dd2:	f000 b949 	b.w	8081068 <__cxa_atexit>
	...

08080dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8080dd8:	4b24      	ldr	r3, [pc, #144]	; (8080e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8080dda:	681a      	ldr	r2, [r3, #0]
 8080ddc:	07d0      	lsls	r0, r2, #31
 8080dde:	bf5c      	itt	pl
 8080de0:	2201      	movpl	r2, #1
 8080de2:	601a      	strpl	r2, [r3, #0]
 8080de4:	4b22      	ldr	r3, [pc, #136]	; (8080e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8080de6:	681a      	ldr	r2, [r3, #0]
 8080de8:	07d1      	lsls	r1, r2, #31
 8080dea:	bf5c      	itt	pl
 8080dec:	2201      	movpl	r2, #1
 8080dee:	601a      	strpl	r2, [r3, #0]
 8080df0:	4b20      	ldr	r3, [pc, #128]	; (8080e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8080df2:	681a      	ldr	r2, [r3, #0]
 8080df4:	07d2      	lsls	r2, r2, #31
 8080df6:	bf5c      	itt	pl
 8080df8:	2201      	movpl	r2, #1
 8080dfa:	601a      	strpl	r2, [r3, #0]
 8080dfc:	4b1e      	ldr	r3, [pc, #120]	; (8080e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8080dfe:	681a      	ldr	r2, [r3, #0]
 8080e00:	07d0      	lsls	r0, r2, #31
 8080e02:	bf5c      	itt	pl
 8080e04:	2201      	movpl	r2, #1
 8080e06:	601a      	strpl	r2, [r3, #0]
 8080e08:	4b1c      	ldr	r3, [pc, #112]	; (8080e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8080e0a:	681a      	ldr	r2, [r3, #0]
 8080e0c:	07d1      	lsls	r1, r2, #31
 8080e0e:	bf5c      	itt	pl
 8080e10:	2201      	movpl	r2, #1
 8080e12:	601a      	strpl	r2, [r3, #0]
 8080e14:	4b1a      	ldr	r3, [pc, #104]	; (8080e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8080e16:	681a      	ldr	r2, [r3, #0]
 8080e18:	07d2      	lsls	r2, r2, #31
 8080e1a:	bf5c      	itt	pl
 8080e1c:	2201      	movpl	r2, #1
 8080e1e:	601a      	strpl	r2, [r3, #0]
 8080e20:	4b18      	ldr	r3, [pc, #96]	; (8080e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8080e22:	681a      	ldr	r2, [r3, #0]
 8080e24:	07d0      	lsls	r0, r2, #31
 8080e26:	bf5c      	itt	pl
 8080e28:	2201      	movpl	r2, #1
 8080e2a:	601a      	strpl	r2, [r3, #0]
 8080e2c:	4b16      	ldr	r3, [pc, #88]	; (8080e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8080e2e:	681a      	ldr	r2, [r3, #0]
 8080e30:	07d1      	lsls	r1, r2, #31
 8080e32:	bf5c      	itt	pl
 8080e34:	2201      	movpl	r2, #1
 8080e36:	601a      	strpl	r2, [r3, #0]
 8080e38:	4b14      	ldr	r3, [pc, #80]	; (8080e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8080e3a:	681a      	ldr	r2, [r3, #0]
 8080e3c:	07d2      	lsls	r2, r2, #31
 8080e3e:	bf5c      	itt	pl
 8080e40:	2201      	movpl	r2, #1
 8080e42:	601a      	strpl	r2, [r3, #0]
 8080e44:	4b12      	ldr	r3, [pc, #72]	; (8080e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8080e46:	681a      	ldr	r2, [r3, #0]
 8080e48:	07d0      	lsls	r0, r2, #31
 8080e4a:	bf5c      	itt	pl
 8080e4c:	2201      	movpl	r2, #1
 8080e4e:	601a      	strpl	r2, [r3, #0]
 8080e50:	4b10      	ldr	r3, [pc, #64]	; (8080e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8080e52:	681a      	ldr	r2, [r3, #0]
 8080e54:	07d1      	lsls	r1, r2, #31
 8080e56:	bf5c      	itt	pl
 8080e58:	2201      	movpl	r2, #1
 8080e5a:	601a      	strpl	r2, [r3, #0]
 8080e5c:	4b0e      	ldr	r3, [pc, #56]	; (8080e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8080e5e:	681a      	ldr	r2, [r3, #0]
 8080e60:	07d2      	lsls	r2, r2, #31
 8080e62:	bf5c      	itt	pl
 8080e64:	2201      	movpl	r2, #1
 8080e66:	601a      	strpl	r2, [r3, #0]
 8080e68:	4770      	bx	lr
 8080e6a:	bf00      	nop
 8080e6c:	20000c10 	.word	0x20000c10
 8080e70:	20000c0c 	.word	0x20000c0c
 8080e74:	20000c08 	.word	0x20000c08
 8080e78:	20000c04 	.word	0x20000c04
 8080e7c:	20000c00 	.word	0x20000c00
 8080e80:	20000bfc 	.word	0x20000bfc
 8080e84:	20000bf8 	.word	0x20000bf8
 8080e88:	20000bf4 	.word	0x20000bf4
 8080e8c:	20000bf0 	.word	0x20000bf0
 8080e90:	20000bec 	.word	0x20000bec
 8080e94:	20000be8 	.word	0x20000be8
 8080e98:	20000be4 	.word	0x20000be4

08080e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8080e9c:	4b18      	ldr	r3, [pc, #96]	; (8080f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8080e9e:	681a      	ldr	r2, [r3, #0]
 8080ea0:	07d1      	lsls	r1, r2, #31
 8080ea2:	bf5c      	itt	pl
 8080ea4:	2201      	movpl	r2, #1
 8080ea6:	601a      	strpl	r2, [r3, #0]
 8080ea8:	4b16      	ldr	r3, [pc, #88]	; (8080f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8080eaa:	681a      	ldr	r2, [r3, #0]
 8080eac:	07d2      	lsls	r2, r2, #31
 8080eae:	bf5c      	itt	pl
 8080eb0:	2201      	movpl	r2, #1
 8080eb2:	601a      	strpl	r2, [r3, #0]
 8080eb4:	4b14      	ldr	r3, [pc, #80]	; (8080f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8080eb6:	681a      	ldr	r2, [r3, #0]
 8080eb8:	07d0      	lsls	r0, r2, #31
 8080eba:	bf5c      	itt	pl
 8080ebc:	2201      	movpl	r2, #1
 8080ebe:	601a      	strpl	r2, [r3, #0]
 8080ec0:	4b12      	ldr	r3, [pc, #72]	; (8080f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8080ec2:	681a      	ldr	r2, [r3, #0]
 8080ec4:	07d1      	lsls	r1, r2, #31
 8080ec6:	bf5c      	itt	pl
 8080ec8:	2201      	movpl	r2, #1
 8080eca:	601a      	strpl	r2, [r3, #0]
 8080ecc:	4b10      	ldr	r3, [pc, #64]	; (8080f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8080ece:	681a      	ldr	r2, [r3, #0]
 8080ed0:	07d2      	lsls	r2, r2, #31
 8080ed2:	bf5c      	itt	pl
 8080ed4:	2201      	movpl	r2, #1
 8080ed6:	601a      	strpl	r2, [r3, #0]
 8080ed8:	4b0e      	ldr	r3, [pc, #56]	; (8080f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8080eda:	681a      	ldr	r2, [r3, #0]
 8080edc:	07d0      	lsls	r0, r2, #31
 8080ede:	bf5c      	itt	pl
 8080ee0:	2201      	movpl	r2, #1
 8080ee2:	601a      	strpl	r2, [r3, #0]
 8080ee4:	4b0c      	ldr	r3, [pc, #48]	; (8080f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8080ee6:	681a      	ldr	r2, [r3, #0]
 8080ee8:	07d1      	lsls	r1, r2, #31
 8080eea:	bf5c      	itt	pl
 8080eec:	2201      	movpl	r2, #1
 8080eee:	601a      	strpl	r2, [r3, #0]
 8080ef0:	4b0a      	ldr	r3, [pc, #40]	; (8080f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8080ef2:	681a      	ldr	r2, [r3, #0]
 8080ef4:	07d2      	lsls	r2, r2, #31
 8080ef6:	bf5c      	itt	pl
 8080ef8:	2201      	movpl	r2, #1
 8080efa:	601a      	strpl	r2, [r3, #0]
 8080efc:	4770      	bx	lr
 8080efe:	bf00      	nop
 8080f00:	20000c30 	.word	0x20000c30
 8080f04:	20000c2c 	.word	0x20000c2c
 8080f08:	20000c28 	.word	0x20000c28
 8080f0c:	20000c24 	.word	0x20000c24
 8080f10:	20000c20 	.word	0x20000c20
 8080f14:	20000c1c 	.word	0x20000c1c
 8080f18:	20000c18 	.word	0x20000c18
 8080f1c:	20000c14 	.word	0x20000c14

08080f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8080f20:	4b18      	ldr	r3, [pc, #96]	; (8080f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8080f22:	681a      	ldr	r2, [r3, #0]
 8080f24:	07d1      	lsls	r1, r2, #31
 8080f26:	bf5c      	itt	pl
 8080f28:	2201      	movpl	r2, #1
 8080f2a:	601a      	strpl	r2, [r3, #0]
 8080f2c:	4b16      	ldr	r3, [pc, #88]	; (8080f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8080f2e:	681a      	ldr	r2, [r3, #0]
 8080f30:	07d2      	lsls	r2, r2, #31
 8080f32:	bf5c      	itt	pl
 8080f34:	2201      	movpl	r2, #1
 8080f36:	601a      	strpl	r2, [r3, #0]
 8080f38:	4b14      	ldr	r3, [pc, #80]	; (8080f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8080f3a:	681a      	ldr	r2, [r3, #0]
 8080f3c:	07d0      	lsls	r0, r2, #31
 8080f3e:	bf5c      	itt	pl
 8080f40:	2201      	movpl	r2, #1
 8080f42:	601a      	strpl	r2, [r3, #0]
 8080f44:	4b12      	ldr	r3, [pc, #72]	; (8080f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8080f46:	681a      	ldr	r2, [r3, #0]
 8080f48:	07d1      	lsls	r1, r2, #31
 8080f4a:	bf5c      	itt	pl
 8080f4c:	2201      	movpl	r2, #1
 8080f4e:	601a      	strpl	r2, [r3, #0]
 8080f50:	4b10      	ldr	r3, [pc, #64]	; (8080f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8080f52:	681a      	ldr	r2, [r3, #0]
 8080f54:	07d2      	lsls	r2, r2, #31
 8080f56:	bf5c      	itt	pl
 8080f58:	2201      	movpl	r2, #1
 8080f5a:	601a      	strpl	r2, [r3, #0]
 8080f5c:	4b0e      	ldr	r3, [pc, #56]	; (8080f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8080f5e:	681a      	ldr	r2, [r3, #0]
 8080f60:	07d0      	lsls	r0, r2, #31
 8080f62:	bf5c      	itt	pl
 8080f64:	2201      	movpl	r2, #1
 8080f66:	601a      	strpl	r2, [r3, #0]
 8080f68:	4b0c      	ldr	r3, [pc, #48]	; (8080f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8080f6a:	681a      	ldr	r2, [r3, #0]
 8080f6c:	07d1      	lsls	r1, r2, #31
 8080f6e:	bf5c      	itt	pl
 8080f70:	2201      	movpl	r2, #1
 8080f72:	601a      	strpl	r2, [r3, #0]
 8080f74:	4b0a      	ldr	r3, [pc, #40]	; (8080fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8080f76:	681a      	ldr	r2, [r3, #0]
 8080f78:	07d2      	lsls	r2, r2, #31
 8080f7a:	bf5c      	itt	pl
 8080f7c:	2201      	movpl	r2, #1
 8080f7e:	601a      	strpl	r2, [r3, #0]
 8080f80:	4770      	bx	lr
 8080f82:	bf00      	nop
 8080f84:	20000c50 	.word	0x20000c50
 8080f88:	20000c4c 	.word	0x20000c4c
 8080f8c:	20000c48 	.word	0x20000c48
 8080f90:	20000c44 	.word	0x20000c44
 8080f94:	20000c40 	.word	0x20000c40
 8080f98:	20000c3c 	.word	0x20000c3c
 8080f9c:	20000c38 	.word	0x20000c38
 8080fa0:	20000c34 	.word	0x20000c34

08080fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8080fa4:	4b24      	ldr	r3, [pc, #144]	; (8081038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8080fa6:	681a      	ldr	r2, [r3, #0]
 8080fa8:	07d0      	lsls	r0, r2, #31
 8080faa:	bf5c      	itt	pl
 8080fac:	2201      	movpl	r2, #1
 8080fae:	601a      	strpl	r2, [r3, #0]
 8080fb0:	4b22      	ldr	r3, [pc, #136]	; (808103c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8080fb2:	681a      	ldr	r2, [r3, #0]
 8080fb4:	07d1      	lsls	r1, r2, #31
 8080fb6:	bf5c      	itt	pl
 8080fb8:	2201      	movpl	r2, #1
 8080fba:	601a      	strpl	r2, [r3, #0]
 8080fbc:	4b20      	ldr	r3, [pc, #128]	; (8081040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8080fbe:	681a      	ldr	r2, [r3, #0]
 8080fc0:	07d2      	lsls	r2, r2, #31
 8080fc2:	bf5c      	itt	pl
 8080fc4:	2201      	movpl	r2, #1
 8080fc6:	601a      	strpl	r2, [r3, #0]
 8080fc8:	4b1e      	ldr	r3, [pc, #120]	; (8081044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8080fca:	681a      	ldr	r2, [r3, #0]
 8080fcc:	07d0      	lsls	r0, r2, #31
 8080fce:	bf5c      	itt	pl
 8080fd0:	2201      	movpl	r2, #1
 8080fd2:	601a      	strpl	r2, [r3, #0]
 8080fd4:	4b1c      	ldr	r3, [pc, #112]	; (8081048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8080fd6:	681a      	ldr	r2, [r3, #0]
 8080fd8:	07d1      	lsls	r1, r2, #31
 8080fda:	bf5c      	itt	pl
 8080fdc:	2201      	movpl	r2, #1
 8080fde:	601a      	strpl	r2, [r3, #0]
 8080fe0:	4b1a      	ldr	r3, [pc, #104]	; (808104c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8080fe2:	681a      	ldr	r2, [r3, #0]
 8080fe4:	07d2      	lsls	r2, r2, #31
 8080fe6:	bf5c      	itt	pl
 8080fe8:	2201      	movpl	r2, #1
 8080fea:	601a      	strpl	r2, [r3, #0]
 8080fec:	4b18      	ldr	r3, [pc, #96]	; (8081050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8080fee:	681a      	ldr	r2, [r3, #0]
 8080ff0:	07d0      	lsls	r0, r2, #31
 8080ff2:	bf5c      	itt	pl
 8080ff4:	2201      	movpl	r2, #1
 8080ff6:	601a      	strpl	r2, [r3, #0]
 8080ff8:	4b16      	ldr	r3, [pc, #88]	; (8081054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8080ffa:	681a      	ldr	r2, [r3, #0]
 8080ffc:	07d1      	lsls	r1, r2, #31
 8080ffe:	bf5c      	itt	pl
 8081000:	2201      	movpl	r2, #1
 8081002:	601a      	strpl	r2, [r3, #0]
 8081004:	4b14      	ldr	r3, [pc, #80]	; (8081058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8081006:	681a      	ldr	r2, [r3, #0]
 8081008:	07d2      	lsls	r2, r2, #31
 808100a:	bf5c      	itt	pl
 808100c:	2201      	movpl	r2, #1
 808100e:	601a      	strpl	r2, [r3, #0]
 8081010:	4b12      	ldr	r3, [pc, #72]	; (808105c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8081012:	681a      	ldr	r2, [r3, #0]
 8081014:	07d0      	lsls	r0, r2, #31
 8081016:	bf5c      	itt	pl
 8081018:	2201      	movpl	r2, #1
 808101a:	601a      	strpl	r2, [r3, #0]
 808101c:	4b10      	ldr	r3, [pc, #64]	; (8081060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808101e:	681a      	ldr	r2, [r3, #0]
 8081020:	07d1      	lsls	r1, r2, #31
 8081022:	bf5c      	itt	pl
 8081024:	2201      	movpl	r2, #1
 8081026:	601a      	strpl	r2, [r3, #0]
 8081028:	4b0e      	ldr	r3, [pc, #56]	; (8081064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808102a:	681a      	ldr	r2, [r3, #0]
 808102c:	07d2      	lsls	r2, r2, #31
 808102e:	bf5c      	itt	pl
 8081030:	2201      	movpl	r2, #1
 8081032:	601a      	strpl	r2, [r3, #0]
 8081034:	4770      	bx	lr
 8081036:	bf00      	nop
 8081038:	20000c80 	.word	0x20000c80
 808103c:	20000c7c 	.word	0x20000c7c
 8081040:	20000c78 	.word	0x20000c78
 8081044:	20000c74 	.word	0x20000c74
 8081048:	20000c70 	.word	0x20000c70
 808104c:	20000c6c 	.word	0x20000c6c
 8081050:	20000c68 	.word	0x20000c68
 8081054:	20000c64 	.word	0x20000c64
 8081058:	20000c60 	.word	0x20000c60
 808105c:	20000c5c 	.word	0x20000c5c
 8081060:	20000c58 	.word	0x20000c58
 8081064:	20000c54 	.word	0x20000c54

08081068 <__cxa_atexit>:
 8081068:	b510      	push	{r4, lr}
 808106a:	4c05      	ldr	r4, [pc, #20]	; (8081080 <__cxa_atexit+0x18>)
 808106c:	4613      	mov	r3, r2
 808106e:	b12c      	cbz	r4, 808107c <__cxa_atexit+0x14>
 8081070:	460a      	mov	r2, r1
 8081072:	4601      	mov	r1, r0
 8081074:	2002      	movs	r0, #2
 8081076:	f3af 8000 	nop.w
 808107a:	bd10      	pop	{r4, pc}
 808107c:	4620      	mov	r0, r4
 808107e:	bd10      	pop	{r4, pc}
 8081080:	00000000 	.word	0x00000000

08081084 <memcpy>:
 8081084:	b510      	push	{r4, lr}
 8081086:	1e43      	subs	r3, r0, #1
 8081088:	440a      	add	r2, r1
 808108a:	4291      	cmp	r1, r2
 808108c:	d004      	beq.n	8081098 <memcpy+0x14>
 808108e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8081092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8081096:	e7f8      	b.n	808108a <memcpy+0x6>
 8081098:	bd10      	pop	{r4, pc}

0808109a <memset>:
 808109a:	4603      	mov	r3, r0
 808109c:	4402      	add	r2, r0
 808109e:	4293      	cmp	r3, r2
 80810a0:	d002      	beq.n	80810a8 <memset+0xe>
 80810a2:	f803 1b01 	strb.w	r1, [r3], #1
 80810a6:	e7fa      	b.n	808109e <memset+0x4>
 80810a8:	4770      	bx	lr
	...

080810ac <srand>:
 80810ac:	b538      	push	{r3, r4, r5, lr}
 80810ae:	4b12      	ldr	r3, [pc, #72]	; (80810f8 <srand+0x4c>)
 80810b0:	4605      	mov	r5, r0
 80810b2:	681c      	ldr	r4, [r3, #0]
 80810b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80810b6:	b9d3      	cbnz	r3, 80810ee <srand+0x42>
 80810b8:	2018      	movs	r0, #24
 80810ba:	f7ff fa3d 	bl	8080538 <malloc>
 80810be:	f243 330e 	movw	r3, #13070	; 0x330e
 80810c2:	63a0      	str	r0, [r4, #56]	; 0x38
 80810c4:	8003      	strh	r3, [r0, #0]
 80810c6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80810ca:	8043      	strh	r3, [r0, #2]
 80810cc:	f241 2334 	movw	r3, #4660	; 0x1234
 80810d0:	8083      	strh	r3, [r0, #4]
 80810d2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80810d6:	80c3      	strh	r3, [r0, #6]
 80810d8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80810dc:	8103      	strh	r3, [r0, #8]
 80810de:	2305      	movs	r3, #5
 80810e0:	8143      	strh	r3, [r0, #10]
 80810e2:	230b      	movs	r3, #11
 80810e4:	8183      	strh	r3, [r0, #12]
 80810e6:	2201      	movs	r2, #1
 80810e8:	2300      	movs	r3, #0
 80810ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80810ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80810f0:	2200      	movs	r2, #0
 80810f2:	611d      	str	r5, [r3, #16]
 80810f4:	615a      	str	r2, [r3, #20]
 80810f6:	bd38      	pop	{r3, r4, r5, pc}
 80810f8:	20000468 	.word	0x20000468

080810fc <strlen>:
 80810fc:	4603      	mov	r3, r0
 80810fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081102:	2a00      	cmp	r2, #0
 8081104:	d1fb      	bne.n	80810fe <strlen+0x2>
 8081106:	1a18      	subs	r0, r3, r0
 8081108:	3801      	subs	r0, #1
 808110a:	4770      	bx	lr

0808110c <dynalib_user>:
 808110c:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 808111c:	0000 0000 306e 762e 6c61 363d 0037 306e     ....n0.val=67.n0
 808112c:	762e 6c61 363d 0036                         .val=66.

08081134 <_ZTVN5spark13CellularClassE>:
	...
 808113c:	056f 0808                                   o...

08081140 <_ZTV7TwoWire>:
	...
 8081148:	05c7 0808 0611 0808 05e9 0808 05c9 0808     ................
 8081158:	05f1 0808 05f9 0808 0601 0808 0609 0808     ................

08081168 <_ZTV9IPAddress>:
	...
 8081170:	0657 0808 0649 0808 064b 0808 0066 6e6c     W...I...K...f.ln
 8081180:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 8081190:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80811a0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80811b0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80811c0:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80811d0:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80811e0:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80811f0:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 8081200:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 8081210:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 8081220:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 8081230:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 8081240:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 8081250:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

08081260 <_ZTV8SPIClass>:
	...
 8081268:	0831 0808 0833 0808 005a 2b25 3330 3a64     1...3...Z.%+03d:
 8081278:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8081288:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8081298:	0000 0000                                   ....

0808129c <_ZTV11USARTSerial>:
	...
 80812a4:	00af 0808 00b1 0808 08e7 0808 06c9 0808     ................
 80812b4:	08cf 0808 08db 0808 08d5 0808 08e1 0808     ................
 80812c4:	08c5 0808 08c9 0808                         ........

080812cc <_ZTV9USBSerial>:
	...
 80812d4:	09a5 0808 09e9 0808 09c3 0808 06c9 0808     ................
 80812e4:	09bd 0808 09a7 0808 09af 0808 09e3 0808     ................
 80812f4:	09b7 0808 09a1 0808                         ........

080812fc <__sf_fake_stdin>:
	...

0808131c <__sf_fake_stdout>:
	...

0808133c <__sf_fake_stderr>:
	...
 808135c:	0043                                        C.

0808135e <link_const_variable_data_end>:
	...

08081360 <link_constructors_location>:
 8081360:	08080289 	.word	0x08080289
 8081364:	0808029b 	.word	0x0808029b
 8081368:	08080579 	.word	0x08080579
 808136c:	080806b9 	.word	0x080806b9
 8081370:	08080815 	.word	0x08080815
 8081374:	08080871 	.word	0x08080871
 8081378:	080808b1 	.word	0x080808b1
 808137c:	08080d41 	.word	0x08080d41
 8081380:	08080d71 	.word	0x08080d71
 8081384:	08080dd9 	.word	0x08080dd9
 8081388:	08080e9d 	.word	0x08080e9d
 808138c:	08080f21 	.word	0x08080f21
 8081390:	08080fa5 	.word	0x08080fa5

08081394 <link_constructors_end>:
	...
