
/Users/heath/Documents/workspace/Connected-Oldtimer/ConnectedOldtimerCode/target/ConnectedOldtimerCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002938  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08082950  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000078  20000400  08082954  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000908  20000478  20000478  00030478  2**3
                  ALLOC
  5 .module_info_suffix 00000028  080829cc  080829cc  000229cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080829f4  080829f4  000229f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0008bdac  00000000  00000000  000229f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d6ac  00000000  00000000  000ae7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000101b5  00000000  00000000  000bbe50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001b48  00000000  00000000  000cc005  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002c30  00000000  00000000  000cdb4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022073  00000000  00000000  000d077d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ebe4  00000000  00000000  000f27f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00096a04  00000000  00000000  001113d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000ac18  00000000  00000000  001a7dd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	54 25 08 08                                         T%..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f002 f997 	bl	8082360 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f002 f99c 	bl	8082376 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08082954 	.word	0x08082954
 808004c:	20000478 	.word	0x20000478
 8080050:	20000478 	.word	0x20000478
 8080054:	20000d80 	.word	0x20000d80
 8080058:	20000d80 	.word	0x20000d80

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 fa8f 	bl	8081580 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08082918 	.word	0x08082918
 8080084:	0808294c 	.word	0x0808294c

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b88e 	b.w	80801a8 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f91b 	bl	80802c8 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 ba35 	b.w	8081504 <_post_loop>

0808009a <_ZdlPv>:
 808009a:	f000 be0d 	b.w	8080cb8 <free>

0808009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 808009e:	7800      	ldrb	r0, [r0, #0]
 80800a0:	fab0 f080 	clz	r0, r0
 80800a4:	0940      	lsrs	r0, r0, #5
 80800a6:	4770      	bx	lr

080800a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800a8:	2301      	movs	r3, #1
 80800aa:	7003      	strb	r3, [r0, #0]
 80800ac:	4770      	bx	lr

080800ae <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80800ae:	4770      	bx	lr

080800b0 <_ZN10CANChannelD1Ev>:

public:
  CANChannel(HAL_CAN_Channel channel,
             uint16_t rxQueueSize = 32,
             uint16_t txQueueSize = 32);
  ~CANChannel() {};
 80800b0:	4770      	bx	lr

080800b2 <_ZN11USARTSerialD0Ev>:
 80800b2:	b510      	push	{r4, lr}
 80800b4:	4604      	mov	r4, r0
 80800b6:	f7ff fff0 	bl	808009a <_ZdlPv>
 80800ba:	4620      	mov	r0, r4
 80800bc:	bd10      	pop	{r4, pc}
	...

080800c0 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 80800c0:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 80800c2:	4c0c      	ldr	r4, [pc, #48]	; (80800f4 <_Z22__fetch_global_Serial4v+0x34>)
 80800c4:	6823      	ldr	r3, [r4, #0]
 80800c6:	07db      	lsls	r3, r3, #31
 80800c8:	d411      	bmi.n	80800ee <_Z22__fetch_global_Serial4v+0x2e>
 80800ca:	4620      	mov	r0, r4
 80800cc:	f7ff ffe7 	bl	808009e <__cxa_guard_acquire>
 80800d0:	b168      	cbz	r0, 80800ee <_Z22__fetch_global_Serial4v+0x2e>
 80800d2:	4a09      	ldr	r2, [pc, #36]	; (80800f8 <_Z22__fetch_global_Serial4v+0x38>)
 80800d4:	2103      	movs	r1, #3
 80800d6:	4b09      	ldr	r3, [pc, #36]	; (80800fc <_Z22__fetch_global_Serial4v+0x3c>)
 80800d8:	4809      	ldr	r0, [pc, #36]	; (8080100 <_Z22__fetch_global_Serial4v+0x40>)
 80800da:	f001 f8d1 	bl	8081280 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80800de:	4620      	mov	r0, r4
 80800e0:	f7ff ffe2 	bl	80800a8 <__cxa_guard_release>
 80800e4:	4a07      	ldr	r2, [pc, #28]	; (8080104 <_Z22__fetch_global_Serial4v+0x44>)
 80800e6:	4908      	ldr	r1, [pc, #32]	; (8080108 <_Z22__fetch_global_Serial4v+0x48>)
 80800e8:	4805      	ldr	r0, [pc, #20]	; (8080100 <_Z22__fetch_global_Serial4v+0x40>)
 80800ea:	f001 fb29 	bl	8081740 <__aeabi_atexit>
	return serial4;
}
 80800ee:	4804      	ldr	r0, [pc, #16]	; (8080100 <_Z22__fetch_global_Serial4v+0x40>)
 80800f0:	bd10      	pop	{r4, pc}
 80800f2:	bf00      	nop
 80800f4:	2000079c 	.word	0x2000079c
 80800f8:	20000502 	.word	0x20000502
 80800fc:	2000047e 	.word	0x2000047e
 8080100:	20000788 	.word	0x20000788
 8080104:	20000478 	.word	0x20000478
 8080108:	080800af 	.word	0x080800af

0808010c <_Z15serialEventRun4v>:

void serialEventRun4()
{
 808010c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 808010e:	f7ff ffd7 	bl	80800c0 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080112:	4b07      	ldr	r3, [pc, #28]	; (8080130 <_Z15serialEventRun4v+0x24>)
 8080114:	4604      	mov	r4, r0
 8080116:	b153      	cbz	r3, 808012e <_Z15serialEventRun4v+0x22>
 8080118:	f001 f8d2 	bl	80812c0 <_ZN11USARTSerial9isEnabledEv>
 808011c:	b138      	cbz	r0, 808012e <_Z15serialEventRun4v+0x22>
 808011e:	6823      	ldr	r3, [r4, #0]
 8080120:	4620      	mov	r0, r4
 8080122:	691b      	ldr	r3, [r3, #16]
 8080124:	4798      	blx	r3
 8080126:	2800      	cmp	r0, #0
 8080128:	dd01      	ble.n	808012e <_Z15serialEventRun4v+0x22>
        handler();
 808012a:	f3af 8000 	nop.w
 808012e:	bd10      	pop	{r4, pc}
 8080130:	00000000 	.word	0x00000000

08080134 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080134:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080136:	4c0c      	ldr	r4, [pc, #48]	; (8080168 <_Z22__fetch_global_Serial5v+0x34>)
 8080138:	6823      	ldr	r3, [r4, #0]
 808013a:	07db      	lsls	r3, r3, #31
 808013c:	d411      	bmi.n	8080162 <_Z22__fetch_global_Serial5v+0x2e>
 808013e:	4620      	mov	r0, r4
 8080140:	f7ff ffad 	bl	808009e <__cxa_guard_acquire>
 8080144:	b168      	cbz	r0, 8080162 <_Z22__fetch_global_Serial5v+0x2e>
 8080146:	4a09      	ldr	r2, [pc, #36]	; (808016c <_Z22__fetch_global_Serial5v+0x38>)
 8080148:	2104      	movs	r1, #4
 808014a:	4b09      	ldr	r3, [pc, #36]	; (8080170 <_Z22__fetch_global_Serial5v+0x3c>)
 808014c:	4809      	ldr	r0, [pc, #36]	; (8080174 <_Z22__fetch_global_Serial5v+0x40>)
 808014e:	f001 f897 	bl	8081280 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080152:	4620      	mov	r0, r4
 8080154:	f7ff ffa8 	bl	80800a8 <__cxa_guard_release>
 8080158:	4a07      	ldr	r2, [pc, #28]	; (8080178 <_Z22__fetch_global_Serial5v+0x44>)
 808015a:	4908      	ldr	r1, [pc, #32]	; (808017c <_Z22__fetch_global_Serial5v+0x48>)
 808015c:	4805      	ldr	r0, [pc, #20]	; (8080174 <_Z22__fetch_global_Serial5v+0x40>)
 808015e:	f001 faef 	bl	8081740 <__aeabi_atexit>
	return serial5;
}
 8080162:	4804      	ldr	r0, [pc, #16]	; (8080174 <_Z22__fetch_global_Serial5v+0x40>)
 8080164:	bd10      	pop	{r4, pc}
 8080166:	bf00      	nop
 8080168:	2000060c 	.word	0x2000060c
 808016c:	20000586 	.word	0x20000586
 8080170:	20000610 	.word	0x20000610
 8080174:	20000698 	.word	0x20000698
 8080178:	20000478 	.word	0x20000478
 808017c:	080800af 	.word	0x080800af

08080180 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080180:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080182:	f7ff ffd7 	bl	8080134 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080186:	4b07      	ldr	r3, [pc, #28]	; (80801a4 <_Z15serialEventRun5v+0x24>)
 8080188:	4604      	mov	r4, r0
 808018a:	b153      	cbz	r3, 80801a2 <_Z15serialEventRun5v+0x22>
 808018c:	f001 f898 	bl	80812c0 <_ZN11USARTSerial9isEnabledEv>
 8080190:	b138      	cbz	r0, 80801a2 <_Z15serialEventRun5v+0x22>
 8080192:	6823      	ldr	r3, [r4, #0]
 8080194:	4620      	mov	r0, r4
 8080196:	691b      	ldr	r3, [r3, #16]
 8080198:	4798      	blx	r3
 808019a:	2800      	cmp	r0, #0
 808019c:	dd01      	ble.n	80801a2 <_Z15serialEventRun5v+0x22>
        handler();
 808019e:	f3af 8000 	nop.w
 80801a2:	bd10      	pop	{r4, pc}
 80801a4:	00000000 	.word	0x00000000

080801a8 <setup>:
CANChannel can(CAN_D1_D2);
uint16_t motorTemperature = 0;
uint16_t motorRPM = 0;
uint8_t fuelLevel = 0;
int tempSS = A2;
void setup() {
 80801a8:	b510      	push	{r4, lr}

  SPI.begin(tempSS);
 80801aa:	4b1e      	ldr	r3, [pc, #120]	; (8080224 <setup+0x7c>)
  can.begin(125000); // pick the baud rate for your network
 80801ac:	4c1e      	ldr	r4, [pc, #120]	; (8080228 <setup+0x80>)
uint16_t motorRPM = 0;
uint8_t fuelLevel = 0;
int tempSS = A2;
void setup() {

  SPI.begin(tempSS);
 80801ae:	8819      	ldrh	r1, [r3, #0]
 80801b0:	481e      	ldr	r0, [pc, #120]	; (808022c <setup+0x84>)
 80801b2:	f001 f80d 	bl	80811d0 <_ZN8SPIClass5beginEt>
  can.begin(125000); // pick the baud rate for your network
 80801b6:	4620      	mov	r0, r4
 80801b8:	2200      	movs	r2, #0
 80801ba:	491d      	ldr	r1, [pc, #116]	; (8080230 <setup+0x88>)
 80801bc:	f000 fd97 	bl	8080cee <_ZN10CANChannel5beginEmm>
    // accept one message. If no filter added by user then accept all messages
  can.addFilter(0x100, 0x7FF);
 80801c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80801c4:	2300      	movs	r3, #0
 80801c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80801ca:	4620      	mov	r0, r4
 80801cc:	f000 fd97 	bl	8080cfe <_ZN10CANChannel9addFilterEmm15HAL_CAN_Filters>

  Serial.begin(9600); //usb debugging
 80801d0:	f001 f8f8 	bl	80813c4 <_Z16_fetch_usbserialv>
 80801d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80801d8:	f001 f8da 	bl	8081390 <_ZN9USBSerial5beginEl>
  Serial4.begin(9600); // uart for nextion c2 & c3
 80801dc:	f7ff ff70 	bl	80800c0 <_Z22__fetch_global_Serial4v>
 80801e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80801e4:	f001 f866 	bl	80812b4 <_ZN11USARTSerial5beginEm>
  Serial1.blockOnOverrun(true);
 80801e8:	f001 f86e 	bl	80812c8 <_Z22__fetch_global_Serial1v>
 80801ec:	6803      	ldr	r3, [r0, #0]
 80801ee:	2101      	movs	r1, #1
 80801f0:	6a1b      	ldr	r3, [r3, #32]
 80801f2:	4798      	blx	r3
  Serial5.begin(GPSBaud); // uart for GPS
 80801f4:	f7ff ff9e 	bl	8080134 <_Z22__fetch_global_Serial5v>
 80801f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80801fc:	f001 f85a 	bl	80812b4 <_ZN11USARTSerial5beginEm>
  Serial1.begin(GPSBaud); // 
 8080200:	f001 f862 	bl	80812c8 <_Z22__fetch_global_Serial1v>
 8080204:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080208:	f001 f854 	bl	80812b4 <_ZN11USARTSerial5beginEm>
  pinMode(led1, OUTPUT);
 808020c:	4b09      	ldr	r3, [pc, #36]	; (8080234 <setup+0x8c>)
 808020e:	2101      	movs	r1, #1
 8080210:	8818      	ldrh	r0, [r3, #0]
 8080212:	f001 fa05 	bl	8081620 <pinMode>
  pinMode(led2, OUTPUT);
  //Serial.print("started");

}
 8080216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial4.begin(9600); // uart for nextion c2 & c3
  Serial1.blockOnOverrun(true);
  Serial5.begin(GPSBaud); // uart for GPS
  Serial1.begin(GPSBaud); // 
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
 808021a:	4b07      	ldr	r3, [pc, #28]	; (8080238 <setup+0x90>)
 808021c:	2101      	movs	r1, #1
 808021e:	8818      	ldrh	r0, [r3, #0]
 8080220:	f001 b9fe 	b.w	8081620 <pinMode>
 8080224:	20000400 	.word	0x20000400
 8080228:	2000060a 	.word	0x2000060a
 808022c:	20000cb0 	.word	0x20000cb0
 8080230:	0001e848 	.word	0x0001e848
 8080234:	200007a0 	.word	0x200007a0
 8080238:	20000404 	.word	0x20000404

0808023c <_Z10canReceivev>:

  Serial.println();
}


void canReceive(){
 808023c:	b530      	push	{r4, r5, lr}
     : id { 0 },
       size { sizeof(CANMessage) },
       extended { false },
       rtr { false },
       len { 0 },
       data { 0 }
 808023e:	2300      	movs	r3, #0
 8080240:	b085      	sub	sp, #20
 8080242:	2210      	movs	r2, #16
  
  CANMessage message;

  while(can.receive(message)) {
    if (message.id == 0x100) {
      digitalWrite(motorTemperature, !message.data[0]);
 8080244:	4c1c      	ldr	r4, [pc, #112]	; (80802b8 <_Z10canReceivev+0x7c>)
 8080246:	9300      	str	r3, [sp, #0]
 8080248:	f88d 2004 	strb.w	r2, [sp, #4]
 808024c:	f88d 3005 	strb.w	r3, [sp, #5]
 8080250:	f88d 3006 	strb.w	r3, [sp, #6]
 8080254:	f88d 3007 	strb.w	r3, [sp, #7]
 8080258:	9302      	str	r3, [sp, #8]
 808025a:	9303      	str	r3, [sp, #12]
    }
    if (message.id == 0x200) {
      digitalWrite(motorRPM, !message.data[0]);
 808025c:	4d17      	ldr	r5, [pc, #92]	; (80802bc <_Z10canReceivev+0x80>)

void canReceive(){
  
  CANMessage message;

  while(can.receive(message)) {
 808025e:	4669      	mov	r1, sp
 8080260:	4817      	ldr	r0, [pc, #92]	; (80802c0 <_Z10canReceivev+0x84>)
 8080262:	f000 fd48 	bl	8080cf6 <_ZN10CANChannel7receiveER10CANMessage>
 8080266:	b328      	cbz	r0, 80802b4 <_Z10canReceivev+0x78>
    if (message.id == 0x100) {
 8080268:	9b00      	ldr	r3, [sp, #0]
 808026a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 808026e:	d107      	bne.n	8080280 <_Z10canReceivev+0x44>
      digitalWrite(motorTemperature, !message.data[0]);
 8080270:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8080274:	8820      	ldrh	r0, [r4, #0]
 8080276:	fab1 f181 	clz	r1, r1
 808027a:	0949      	lsrs	r1, r1, #5
 808027c:	f001 f9e1 	bl	8081642 <digitalWrite>
    }
    if (message.id == 0x200) {
 8080280:	9b00      	ldr	r3, [sp, #0]
 8080282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8080286:	d107      	bne.n	8080298 <_Z10canReceivev+0x5c>
      digitalWrite(motorRPM, !message.data[0]);
 8080288:	f89d 1008 	ldrb.w	r1, [sp, #8]
 808028c:	8828      	ldrh	r0, [r5, #0]
 808028e:	fab1 f181 	clz	r1, r1
 8080292:	0949      	lsrs	r1, r1, #5
 8080294:	f001 f9d5 	bl	8081642 <digitalWrite>
    }
    if (message.id == 0x300) {
 8080298:	9b00      	ldr	r3, [sp, #0]
 808029a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 808029e:	d1de      	bne.n	808025e <_Z10canReceivev+0x22>
      digitalWrite(fuelLevel, !message.data[0]);
 80802a0:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80802a4:	4b07      	ldr	r3, [pc, #28]	; (80802c4 <_Z10canReceivev+0x88>)
 80802a6:	fab1 f181 	clz	r1, r1
 80802aa:	7818      	ldrb	r0, [r3, #0]
 80802ac:	0949      	lsrs	r1, r1, #5
 80802ae:	f001 f9c8 	bl	8081642 <digitalWrite>
 80802b2:	e7d3      	b.n	808025c <_Z10canReceivev+0x20>
    }
  }
}  
 80802b4:	b005      	add	sp, #20
 80802b6:	bd30      	pop	{r4, r5, pc}
 80802b8:	20000694 	.word	0x20000694
 80802bc:	2000047c 	.word	0x2000047c
 80802c0:	2000060a 	.word	0x2000060a
 80802c4:	20000784 	.word	0x20000784

080802c8 <loop>:
  //Serial.print("started");

}


void loop() {
 80802c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

canReceive();
 80802cc:	f7ff ffb6 	bl	808023c <_Z10canReceivev>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80802d0:	f000 fbb6 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>
 80802d4:	4605      	mov	r5, r0
static void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do 
  {
    while (Serial5.available())
 80802d6:	f7ff ff2d 	bl	8080134 <_Z22__fetch_global_Serial5v>
 80802da:	6803      	ldr	r3, [r0, #0]
 80802dc:	691b      	ldr	r3, [r3, #16]
 80802de:	4798      	blx	r3
 80802e0:	4604      	mov	r4, r0
 80802e2:	b148      	cbz	r0, 80802f8 <loop+0x30>
      gps.encode(Serial5.read());
 80802e4:	f7ff ff26 	bl	8080134 <_Z22__fetch_global_Serial5v>
 80802e8:	6803      	ldr	r3, [r0, #0]
 80802ea:	695b      	ldr	r3, [r3, #20]
 80802ec:	4798      	blx	r3
 80802ee:	b2c1      	uxtb	r1, r0
 80802f0:	4847      	ldr	r0, [pc, #284]	; (8080410 <loop+0x148>)
 80802f2:	f000 fb13 	bl	808091c <_ZN11TinyGPSPlus6encodeEc>
 80802f6:	e7ee      	b.n	80802d6 <loop+0xe>
 80802f8:	f000 fba2 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>


static void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do 
 80802fc:	1b40      	subs	r0, r0, r5
 80802fe:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8080302:	d3e8      	bcc.n	80802d6 <loop+0xe>
//     if (gps.encode(Serial5.read()))
//       displayInfo();
smartDelay(500);

  // To blink the LED, first we'll turn it on...
  digitalWrite(led1, HIGH);
 8080304:	4e43      	ldr	r6, [pc, #268]	; (8080414 <loop+0x14c>)
  digitalWrite(led2, HIGH);
 8080306:	4d44      	ldr	r5, [pc, #272]	; (8080418 <loop+0x150>)
//     if (gps.encode(Serial5.read()))
//       displayInfo();
smartDelay(500);

  // To blink the LED, first we'll turn it on...
  digitalWrite(led1, HIGH);
 8080308:	2101      	movs	r1, #1
 808030a:	8830      	ldrh	r0, [r6, #0]
 808030c:	f001 f999 	bl	8081642 <digitalWrite>
  digitalWrite(led2, HIGH);
 8080310:	2101      	movs	r1, #1
 8080312:	8828      	ldrh	r0, [r5, #0]
 8080314:	f001 f995 	bl	8081642 <digitalWrite>
 8080318:	4b3d      	ldr	r3, [pc, #244]	; (8080410 <loop+0x148>)
 808031a:	46b2      	mov	sl, r6

  // We'll leave it on for 1 second...
  //collect speed

  if (gps.location.isValid()) {
 808031c:	781a      	ldrb	r2, [r3, #0]
 808031e:	f8df b118 	ldr.w	fp, [pc, #280]	; 8080438 <loop+0x170>
 8080322:	2a00      	cmp	r2, #0
 8080324:	d038      	beq.n	8080398 <loop+0xd0>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
 8080326:	f883 4059 	strb.w	r4, [r3, #89]	; 0x59
    speed = gps.speed.kmph();
 808032a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 808032c:	f001 fca8 	bl	8081c80 <__aeabi_i2d>
 8080330:	a335      	add	r3, pc, #212	; (adr r3, 8080408 <loop+0x140>)
 8080332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080336:	f001 fd09 	bl	8081d4c <__aeabi_dmul>
 808033a:	2200      	movs	r2, #0
 808033c:	4b37      	ldr	r3, [pc, #220]	; (808041c <loop+0x154>)
 808033e:	f001 fe2f 	bl	8081fa0 <__aeabi_ddiv>
 8080342:	4c37      	ldr	r4, [pc, #220]	; (8080420 <loop+0x158>)
 8080344:	e9c4 0100 	strd	r0, r1, [r4]
    //speed = 102.4;
    Serial.println(speed);
 8080348:	f001 f83c 	bl	80813c4 <_Z16_fetch_usbserialv>
 808034c:	2302      	movs	r3, #2
 808034e:	9300      	str	r3, [sp, #0]
 8080350:	e9d4 2300 	ldrd	r2, r3, [r4]
 8080354:	f000 fec4 	bl	80810e0 <_ZN5Print7printlnEdi>
    speed = speed + 0.5 - (speed<0);
 8080358:	e9d4 6700 	ldrd	r6, r7, [r4]
 808035c:	2200      	movs	r2, #0
 808035e:	4b31      	ldr	r3, [pc, #196]	; (8080424 <loop+0x15c>)
 8080360:	4630      	mov	r0, r6
 8080362:	4639      	mov	r1, r7
 8080364:	f001 fb40 	bl	80819e8 <__adddf3>
 8080368:	2200      	movs	r2, #0
 808036a:	4680      	mov	r8, r0
 808036c:	4689      	mov	r9, r1
 808036e:	2300      	movs	r3, #0
 8080370:	4630      	mov	r0, r6
 8080372:	4639      	mov	r1, r7
 8080374:	f001 ff5c 	bl	8082230 <__aeabi_dcmplt>
 8080378:	2200      	movs	r2, #0
 808037a:	b908      	cbnz	r0, 8080380 <loop+0xb8>
 808037c:	2300      	movs	r3, #0
 808037e:	e000      	b.n	8080382 <loop+0xba>
 8080380:	4b29      	ldr	r3, [pc, #164]	; (8080428 <loop+0x160>)
 8080382:	4640      	mov	r0, r8
 8080384:	4649      	mov	r1, r9
 8080386:	f001 fb2d 	bl	80819e4 <__aeabi_dsub>
 808038a:	e9c4 0100 	strd	r0, r1, [r4]
    nextionSpeed = (uint8_t)speed;
 808038e:	f001 ffb5 	bl	80822fc <__aeabi_d2uiz>
 8080392:	f88b 0000 	strb.w	r0, [fp]
 8080396:	e007      	b.n	80803a8 <loop+0xe0>
  }
  else {
    nextionSpeed = 10; // we know that gps is not valid/
 8080398:	230a      	movs	r3, #10
 808039a:	f88b 3000 	strb.w	r3, [fp]
    Serial.println("speed invalid");
 808039e:	f001 f811 	bl	80813c4 <_Z16_fetch_usbserialv>
 80803a2:	4922      	ldr	r1, [pc, #136]	; (808042c <loop+0x164>)
 80803a4:	f000 fd95 	bl	8080ed2 <_ZN5Print7printlnEPKc>
  
  //Serial.println("counting");
  //speed = gps.speed.kmph();
  //Serial.print(speed);
  // Then we'll turn it off...
  digitalWrite(led1, LOW);
 80803a8:	f8ba 0000 	ldrh.w	r0, [sl]
 80803ac:	2100      	movs	r1, #0
 80803ae:	f001 f948 	bl	8081642 <digitalWrite>
  digitalWrite(led2, LOW);
 80803b2:	2100      	movs	r1, #0
 80803b4:	8828      	ldrh	r0, [r5, #0]
 80803b6:	f001 f944 	bl	8081642 <digitalWrite>
  Serial4.printf("n0.val=");
 80803ba:	f7ff fe81 	bl	80800c0 <_Z22__fetch_global_Serial4v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80803be:	4a1c      	ldr	r2, [pc, #112]	; (8080430 <loop+0x168>)
 80803c0:	2100      	movs	r1, #0
 80803c2:	f000 fe9b 	bl	80810fc <_ZN5Print11printf_implEbPKcz>
  Serial4.print(nextionSpeed);
 80803c6:	f7ff fe7b 	bl	80800c0 <_Z22__fetch_global_Serial4v>
 80803ca:	220a      	movs	r2, #10
 80803cc:	f89b 1000 	ldrb.w	r1, [fp]
 80803d0:	f000 fdb3 	bl	8080f3a <_ZN5Print5printEhi>
  Serial4.write(0xff);
 80803d4:	f7ff fe74 	bl	80800c0 <_Z22__fetch_global_Serial4v>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
 80803d8:	21ff      	movs	r1, #255	; 0xff
 80803da:	f000 ff6e 	bl	80812ba <_ZN11USARTSerial5writeEt>
  Serial4.write(0xff);
 80803de:	f7ff fe6f 	bl	80800c0 <_Z22__fetch_global_Serial4v>
 80803e2:	21ff      	movs	r1, #255	; 0xff
 80803e4:	f000 ff69 	bl	80812ba <_ZN11USARTSerial5writeEt>
  Serial4.write(0xff);
 80803e8:	f7ff fe6a 	bl	80800c0 <_Z22__fetch_global_Serial4v>
 80803ec:	21ff      	movs	r1, #255	; 0xff
 80803ee:	f000 ff64 	bl	80812ba <_ZN11USARTSerial5writeEt>
  Serial.println("nextion send");
 80803f2:	f000 ffe7 	bl	80813c4 <_Z16_fetch_usbserialv>
 80803f6:	490f      	ldr	r1, [pc, #60]	; (8080434 <loop+0x16c>)
  // Wait 1 second...
  //delay(500);
  //Serial.printlnf("printooooboi");

  // And repeat!
}
 80803f8:	b003      	add	sp, #12
 80803fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial4.printf("n0.val=");
  Serial4.print(nextionSpeed);
  Serial4.write(0xff);
  Serial4.write(0xff);
  Serial4.write(0xff);
  Serial.println("nextion send");
 80803fe:	f000 bd68 	b.w	8080ed2 <_ZN5Print7printlnEPKc>
 8080402:	bf00      	nop
 8080404:	f3af 8000 	nop.w
 8080408:	c083126f 	.word	0xc083126f
 808040c:	3ffda1ca 	.word	0x3ffda1ca
 8080410:	200006ac 	.word	0x200006ac
 8080414:	200007a0 	.word	0x200007a0
 8080418:	20000404 	.word	0x20000404
 808041c:	40590000 	.word	0x40590000
 8080420:	200007a8 	.word	0x200007a8
 8080424:	3fe00000 	.word	0x3fe00000
 8080428:	3ff00000 	.word	0x3ff00000
 808042c:	0808258d 	.word	0x0808258d
 8080430:	0808259b 	.word	0x0808259b
 8080434:	080825a3 	.word	0x080825a3
 8080438:	20000408 	.word	0x20000408

0808043c <_GLOBAL__sub_I_led1>:
  {
    while (Serial5.available())
      gps.encode(Serial5.read());
      //displayInfo();
  } while (millis() - start < ms);
}
 808043c:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808043e:	f000 fb07 	bl	8080a50 <HAL_Pin_Map>

int led1 = D0; 
int led2 = D7; 
SYSTEM_THREAD(ENABLED);
 8080442:	2100      	movs	r1, #0
 8080444:	2001      	movs	r0, #1
 8080446:	f000 fc03 	bl	8080c50 <system_thread_set_state>

TinyGPSPlus gps;
static const uint32_t GPSBaud = 9600;
double speed =0;
uint8_t nextionSpeed = 69;
CANChannel can(CAN_D1_D2);
 808044a:	4c08      	ldr	r4, [pc, #32]	; (808046c <_GLOBAL__sub_I_led1+0x30>)
#include "../lib/TinyGPS++/src/TinyGPS++.h"
//#include "Serial1/Serial1.h"
//#include "Particle.h";


TinyGPSPlus gps;
 808044c:	4808      	ldr	r0, [pc, #32]	; (8080470 <_GLOBAL__sub_I_led1+0x34>)
 808044e:	f000 f815 	bl	808047c <_ZN11TinyGPSPlusC1Ev>
static const uint32_t GPSBaud = 9600;
double speed =0;
uint8_t nextionSpeed = 69;
CANChannel can(CAN_D1_D2);
 8080452:	2320      	movs	r3, #32
 8080454:	461a      	mov	r2, r3
 8080456:	2100      	movs	r1, #0
 8080458:	4620      	mov	r0, r4
 808045a:	f000 fc3d 	bl	8080cd8 <_ZN10CANChannelC1E15HAL_CAN_Channeltt>
 808045e:	4620      	mov	r0, r4
  {
    while (Serial5.available())
      gps.encode(Serial5.read());
      //displayInfo();
  } while (millis() - start < ms);
}
 8080460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

TinyGPSPlus gps;
static const uint32_t GPSBaud = 9600;
double speed =0;
uint8_t nextionSpeed = 69;
CANChannel can(CAN_D1_D2);
 8080464:	4a03      	ldr	r2, [pc, #12]	; (8080474 <_GLOBAL__sub_I_led1+0x38>)
 8080466:	4904      	ldr	r1, [pc, #16]	; (8080478 <_GLOBAL__sub_I_led1+0x3c>)
 8080468:	f001 b96a 	b.w	8081740 <__aeabi_atexit>
 808046c:	2000060a 	.word	0x2000060a
 8080470:	200006ac 	.word	0x200006ac
 8080474:	20000478 	.word	0x20000478
 8080478:	080800b1 	.word	0x080800b1

0808047c <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
 808047c:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
 808047e:	2102      	movs	r1, #2
 8080480:	7002      	strb	r2, [r0, #0]
 8080482:	7042      	strb	r2, [r0, #1]
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
 8080484:	8082      	strh	r2, [r0, #4]
 8080486:	6082      	str	r2, [r0, #8]
 8080488:	7302      	strb	r2, [r0, #12]
 808048a:	8202      	strh	r2, [r0, #16]
 808048c:	6142      	str	r2, [r0, #20]
 808048e:	7602      	strb	r2, [r0, #24]
 8080490:	8382      	strh	r2, [r0, #28]
 8080492:	6202      	str	r2, [r0, #32]
 8080494:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8080498:	8502      	strh	r2, [r0, #40]	; 0x28
 808049a:	62c2      	str	r2, [r0, #44]	; 0x2c
 808049c:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
 80804a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 80804a4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 80804a8:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
 80804aa:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
 80804ae:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 80804b2:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
 80804b4:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
 80804b8:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
 80804bc:	6602      	str	r2, [r0, #96]	; 0x60
 80804be:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
 80804c2:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
 80804c6:	6702      	str	r2, [r0, #112]	; 0x70
 80804c8:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80804cc:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
 80804d0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
 80804d4:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
 80804d8:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 80804dc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
 80804e0:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 80804e4:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
 80804e8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
 80804ec:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
 80804f0:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
 80804f4:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 80804f8:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
 80804fc:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
 8080500:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
 8080504:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8080508:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 808050c:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 8080510:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
 8080514:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
 8080518:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
 808051c:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
 8080520:	4770      	bx	lr

08080522 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
 8080522:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8080526:	2b05      	cmp	r3, #5
 8080528:	d802      	bhi.n	8080530 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
 808052a:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
 808052e:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
 8080530:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8080534:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
 8080536:	bf94      	ite	ls
 8080538:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
 808053c:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
 8080540:	4770      	bx	lr

08080542 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
 8080542:	b538      	push	{r3, r4, r5, lr}
 8080544:	4604      	mov	r4, r0
  bool negative = *term == '-';
 8080546:	7805      	ldrb	r5, [r0, #0]
  if (negative) ++term;
 8080548:	2d2d      	cmp	r5, #45	; 0x2d
 808054a:	bf08      	it	eq
 808054c:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
 808054e:	4620      	mov	r0, r4
 8080550:	f001 fef4 	bl	808233c <atol>
 8080554:	2364      	movs	r3, #100	; 0x64
 8080556:	4358      	muls	r0, r3
 8080558:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
 808055a:	f814 3b01 	ldrb.w	r3, [r4], #1
 808055e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8080562:	2909      	cmp	r1, #9
 8080564:	d9f8      	bls.n	8080558 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
 8080566:	2b2e      	cmp	r3, #46	; 0x2e
 8080568:	d10b      	bne.n	8080582 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
 808056a:	7853      	ldrb	r3, [r2, #1]
 808056c:	3b30      	subs	r3, #48	; 0x30
 808056e:	2b09      	cmp	r3, #9
 8080570:	d807      	bhi.n	8080582 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
 8080572:	210a      	movs	r1, #10
 8080574:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
 8080578:	7893      	ldrb	r3, [r2, #2]
 808057a:	3b30      	subs	r3, #48	; 0x30
 808057c:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
 808057e:	bf98      	it	ls
 8080580:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
 8080582:	2d2d      	cmp	r5, #45	; 0x2d
 8080584:	bf08      	it	eq
 8080586:	4240      	negeq	r0, r0
}
 8080588:	bd38      	pop	{r3, r4, r5, pc}
	...

0808058c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
 808058c:	b538      	push	{r3, r4, r5, lr}
 808058e:	4604      	mov	r4, r0
 8080590:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
 8080592:	f001 fed3 	bl	808233c <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 8080596:	2364      	movs	r3, #100	; 0x64
 8080598:	fbb0 f2f3 	udiv	r2, r0, r3
 808059c:	fb03 0012 	mls	r0, r3, r2, r0
 80805a0:	4b11      	ldr	r3, [pc, #68]	; (80805e8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
 80805a2:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 80805a4:	4343      	muls	r3, r0
 80805a6:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
 80805a8:	7802      	ldrb	r2, [r0, #0]
 80805aa:	4604      	mov	r4, r0
 80805ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80805b0:	2909      	cmp	r1, #9
 80805b2:	f100 0001 	add.w	r0, r0, #1
 80805b6:	d9f7      	bls.n	80805a8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
 80805b8:	2a2e      	cmp	r2, #46	; 0x2e
 80805ba:	d10b      	bne.n	80805d4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
 80805bc:	490a      	ldr	r1, [pc, #40]	; (80805e8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
 80805be:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
 80805c0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80805c4:	3a30      	subs	r2, #48	; 0x30
 80805c6:	2a09      	cmp	r2, #9
 80805c8:	d804      	bhi.n	80805d4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
 80805ca:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
 80805ce:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
 80805d2:	e7f5      	b.n	80805c0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 80805d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80805d8:	3301      	adds	r3, #1
 80805da:	2203      	movs	r2, #3
 80805dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80805e0:	606b      	str	r3, [r5, #4]
  deg.negative = false;
 80805e2:	2300      	movs	r3, #0
 80805e4:	722b      	strb	r3, [r5, #8]
 80805e6:	bd38      	pop	{r3, r4, r5, pc}
 80805e8:	00989680 	.word	0x00989680

080805ec <_ZN15TinyGPSLocation6commitEv>:
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
 80805ec:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 80805ee:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
 80805f0:	f853 2f1c 	ldr.w	r2, [r3, #28]!
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 80805f4:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
 80805f6:	6042      	str	r2, [r0, #4]
 80805f8:	685a      	ldr	r2, [r3, #4]
 80805fa:	6082      	str	r2, [r0, #8]
 80805fc:	7a1b      	ldrb	r3, [r3, #8]
 80805fe:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
 8080600:	4603      	mov	r3, r0
 8080602:	f853 2f28 	ldr.w	r2, [r3, #40]!
 8080606:	6102      	str	r2, [r0, #16]
 8080608:	685a      	ldr	r2, [r3, #4]
 808060a:	6142      	str	r2, [r0, #20]
 808060c:	7a1b      	ldrb	r3, [r3, #8]
 808060e:	7603      	strb	r3, [r0, #24]
 8080610:	f000 fa16 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080614:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
 8080616:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
 8080618:	7063      	strb	r3, [r4, #1]
 808061a:	7023      	strb	r3, [r4, #0]
 808061c:	bd10      	pop	{r4, pc}

0808061e <_ZN11TinyGPSDate6commitEv>:
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
 808061e:	b510      	push	{r4, lr}
   date = newDate;
 8080620:	6883      	ldr	r3, [r0, #8]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
 8080622:	4604      	mov	r4, r0
   date = newDate;
 8080624:	6043      	str	r3, [r0, #4]
 8080626:	f000 fa0b 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 808062a:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
 808062c:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
 808062e:	7063      	strb	r3, [r4, #1]
 8080630:	7023      	strb	r3, [r4, #0]
 8080632:	bd10      	pop	{r4, pc}

08080634 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
 8080634:	b510      	push	{r4, lr}
   time = newTime;
 8080636:	6883      	ldr	r3, [r0, #8]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
 8080638:	4604      	mov	r4, r0
   time = newTime;
 808063a:	6043      	str	r3, [r0, #4]
 808063c:	f000 fa00 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080640:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
 8080642:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
 8080644:	7063      	strb	r3, [r4, #1]
 8080646:	7023      	strb	r3, [r4, #0]
 8080648:	bd10      	pop	{r4, pc}

0808064a <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
 808064a:	b510      	push	{r4, lr}
 808064c:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
 808064e:	4608      	mov	r0, r1
 8080650:	f7ff ff77 	bl	8080542 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 8080654:	60a0      	str	r0, [r4, #8]
 8080656:	bd10      	pop	{r4, pc}

08080658 <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
 8080658:	b510      	push	{r4, lr}
 808065a:	4604      	mov	r4, r0
   newDate = atol(term);
 808065c:	4608      	mov	r0, r1
 808065e:	f001 fe6d 	bl	808233c <atol>
 8080662:	60a0      	str	r0, [r4, #8]
 8080664:	bd10      	pop	{r4, pc}

08080666 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 8080666:	b510      	push	{r4, lr}
   val = newval;
 8080668:	68c3      	ldr	r3, [r0, #12]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 808066a:	4604      	mov	r4, r0
   val = newval;
 808066c:	6083      	str	r3, [r0, #8]
 808066e:	f000 f9e7 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080672:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
 8080674:	6060      	str	r0, [r4, #4]
   valid = updated = true;
 8080676:	7063      	strb	r3, [r4, #1]
 8080678:	7023      	strb	r3, [r4, #0]
 808067a:	bd10      	pop	{r4, pc}

0808067c <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
 808067c:	b510      	push	{r4, lr}
 808067e:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
 8080680:	4608      	mov	r0, r1
 8080682:	f7ff ff5e 	bl	8080542 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 8080686:	60e0      	str	r0, [r4, #12]
 8080688:	bd10      	pop	{r4, pc}

0808068a <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
 808068a:	b510      	push	{r4, lr}
   val = newval;
 808068c:	68c3      	ldr	r3, [r0, #12]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
 808068e:	4604      	mov	r4, r0
   val = newval;
 8080690:	6083      	str	r3, [r0, #8]
 8080692:	f000 f9d5 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 8080696:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
 8080698:	6060      	str	r0, [r4, #4]
   valid = updated = true;
 808069a:	7063      	strb	r3, [r4, #1]
 808069c:	7023      	strb	r3, [r4, #0]
 808069e:	bd10      	pop	{r4, pc}

080806a0 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
 80806a0:	b510      	push	{r4, lr}
 80806a2:	4604      	mov	r4, r0
   newval = atol(term);
 80806a4:	4608      	mov	r0, r1
 80806a6:	f001 fe49 	bl	808233c <atol>
 80806aa:	60e0      	str	r0, [r4, #12]
 80806ac:	bd10      	pop	{r4, pc}

080806ae <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 80806ae:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
 80806b0:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 80806b2:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
 80806b4:	3010      	adds	r0, #16
 80806b6:	f001 fe99 	bl	80823ec <strcpy>
 80806ba:	f000 f9c1 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
 80806be:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
 80806c0:	6220      	str	r0, [r4, #32]
   valid = updated = true;
 80806c2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 80806c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80806ca:	bd10      	pop	{r4, pc}

080806cc <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 80806cc:	2210      	movs	r2, #16
 80806ce:	f001 be9d 	b.w	808240c <strncpy>
	...

080806d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 80806d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
 80806d6:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 80806da:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
 80806dc:	2d00      	cmp	r5, #0
 80806de:	d067      	beq.n	80807b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xdc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 80806e0:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
 80806e4:	f7ff ff1d 	bl	8080522 <_ZN11TinyGPSPlus7fromHexEc>
 80806e8:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 80806ec:	4602      	mov	r2, r0
 80806ee:	4620      	mov	r0, r4
 80806f0:	f7ff ff17 	bl	8080522 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
 80806f4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80806f8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80806fc:	b2c0      	uxtb	r0, r0
 80806fe:	4283      	cmp	r3, r0
 8080700:	d14f      	bne.n	80807a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xce>
    {
      passedChecksumCount++;
 8080702:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8080706:	3301      	adds	r3, #1
 8080708:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
 808070c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8080710:	b123      	cbz	r3, 808071c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
 8080712:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8080716:	3301      	adds	r3, #1
 8080718:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

      switch(curSentenceType)
 808071c:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8080720:	b1b3      	cbz	r3, 8080750 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7c>
 8080722:	2b01      	cmp	r3, #1
 8080724:	d12a      	bne.n	808077c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
 8080726:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808072a:	f7ff ff78 	bl	808061e <_ZN11TinyGPSDate6commitEv>
        time.commit();
 808072e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8080732:	f7ff ff7f 	bl	8080634 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8080736:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 808073a:	b1fb      	cbz	r3, 808077c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
        {
           location.commit();
 808073c:	4620      	mov	r0, r4
 808073e:	f7ff ff55 	bl	80805ec <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
 8080742:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8080746:	f7ff ff8e 	bl	8080666 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
 808074a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 808074e:	e013      	b.n	8080778 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa4>
        }
        break;
      case GPS_SENTENCE_GPGGA:
        time.commit();
 8080750:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8080754:	f7ff ff6e 	bl	8080634 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8080758:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 808075c:	b133      	cbz	r3, 808076c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x98>
        {
          location.commit();
 808075e:	4620      	mov	r0, r4
 8080760:	f7ff ff44 	bl	80805ec <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
 8080764:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8080768:	f7ff ff7d 	bl	8080666 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
 808076c:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8080770:	f7ff ff8b 	bl	808068a <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
 8080774:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8080778:	f7ff ff75 	bl	8080666 <_ZN14TinyGPSDecimal6commitEv>
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 808077c:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
 8080780:	2e00      	cmp	r6, #0
 8080782:	f000 80c5 	beq.w	8080910 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
 8080786:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 808078a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 808078c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 808078e:	f001 fe23 	bl	80823d8 <strcmp>
 8080792:	2800      	cmp	r0, #0
 8080794:	f040 80bc 	bne.w	8080910 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
         p->commit();
 8080798:	4630      	mov	r0, r6
 808079a:	f7ff ff88 	bl	80806ae <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 808079e:	6b36      	ldr	r6, [r6, #48]	; 0x30
 80807a0:	e7ee      	b.n	8080780 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
      return true;
    }

    else
    {
      ++failedChecksumCount;
 80807a2:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    }

    return false;
 80807a6:	2500      	movs	r5, #0
      return true;
    }

    else
    {
      ++failedChecksumCount;
 80807a8:	3301      	adds	r3, #1
 80807aa:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    }

    return false;
 80807ae:	e0af      	b.n	8080910 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
 80807b0:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
 80807b4:	bb2a      	cbnz	r2, 8080802 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12e>
  {
    if (!strcmp(term, _GPRMCterm))
 80807b6:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
 80807ba:	4956      	ldr	r1, [pc, #344]	; (8080914 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
 80807bc:	4638      	mov	r0, r7
 80807be:	f001 fe0b 	bl	80823d8 <strcmp>
 80807c2:	b908      	cbnz	r0, 80807c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      curSentenceType = GPS_SENTENCE_GPRMC;
 80807c4:	2301      	movs	r3, #1
 80807c6:	e008      	b.n	80807da <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
    else if (!strcmp(term, _GPGGAterm))
 80807c8:	4953      	ldr	r1, [pc, #332]	; (8080918 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>)
 80807ca:	4638      	mov	r0, r7
 80807cc:	f001 fe04 	bl	80823d8 <strcmp>
 80807d0:	b910      	cbnz	r0, 80807d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_GPGGA;
 80807d2:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 80807d6:	e002      	b.n	80807de <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10a>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
 80807d8:	2302      	movs	r3, #2
 80807da:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
 80807de:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80807e2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80807e6:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
 80807ea:	2e00      	cmp	r6, #0
 80807ec:	f000 8090 	beq.w	8080910 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
 80807f0:	4639      	mov	r1, r7
 80807f2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80807f4:	f001 fdf0 	bl	80823d8 <strcmp>
 80807f8:	2800      	cmp	r0, #0
 80807fa:	f280 8085 	bge.w	8080908 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x234>
 80807fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8080800:	e7ef      	b.n	80807e2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
 8080802:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
 8080806:	2902      	cmp	r1, #2
 8080808:	d066      	beq.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
 808080a:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 808080e:	2b00      	cmp	r3, #0
 8080810:	d062      	beq.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    switch(COMBINE(curSentenceType, curTermNumber))
 8080812:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8080816:	3a01      	subs	r2, #1
 8080818:	2a28      	cmp	r2, #40	; 0x28
 808081a:	d85d      	bhi.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
 808081c:	e8df f002 	tbb	[pc, r2]
 8080820:	2a232015 	.word	0x2a232015
 8080824:	534d4631 	.word	0x534d4631
 8080828:	5c5c5c57 	.word	0x5c5c5c57
 808082c:	5c5c5c5c 	.word	0x5c5c5c5c
 8080830:	5c5c5c5c 	.word	0x5c5c5c5c
 8080834:	5c5c5c5c 	.word	0x5c5c5c5c
 8080838:	5c5c5c5c 	.word	0x5c5c5c5c
 808083c:	5c5c5c5c 	.word	0x5c5c5c5c
 8080840:	23201b15 	.word	0x23201b15
 8080844:	3c38312a 	.word	0x3c38312a
 8080848:	40          	.byte	0x40
 8080849:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
 808084a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 808084e:	3048      	adds	r0, #72	; 0x48
 8080850:	f7ff fefb 	bl	808064a <_ZN11TinyGPSTime7setTimeEPKc>
      break;
 8080854:	e040      	b.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
 8080856:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 808085a:	4243      	negs	r3, r0
 808085c:	4143      	adcs	r3, r0
 808085e:	e029      	b.n	80808b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1e0>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
 8080860:	f100 011c 	add.w	r1, r0, #28
 8080864:	e008      	b.n	8080878 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
 8080866:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
 808086a:	424b      	negs	r3, r1
 808086c:	414b      	adcs	r3, r1
 808086e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
 8080872:	e031      	b.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
 8080874:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8080878:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
 808087c:	f7ff fe86 	bl	808058c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
 8080880:	e02a      	b.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
 8080882:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
 8080886:	4253      	negs	r3, r2
 8080888:	4153      	adcs	r3, r2
 808088a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
 808088e:	e023      	b.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
 8080890:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 8080894:	3058      	adds	r0, #88	; 0x58
 8080896:	e01d      	b.n	80808d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
 8080898:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 808089c:	3068      	adds	r0, #104	; 0x68
 808089e:	e019      	b.n	80808d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
 80808a0:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80808a4:	3038      	adds	r0, #56	; 0x38
 80808a6:	f7ff fed7 	bl	8080658 <_ZN11TinyGPSDate7setDateEPKc>
      break;
 80808aa:	e015      	b.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
 80808ac:	2b30      	cmp	r3, #48	; 0x30
 80808ae:	bf94      	ite	ls
 80808b0:	2300      	movls	r3, #0
 80808b2:	2301      	movhi	r3, #1
 80808b4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 80808b8:	e00e      	b.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
 80808ba:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80808be:	3088      	adds	r0, #136	; 0x88
 80808c0:	f7ff feee 	bl	80806a0 <_ZN14TinyGPSInteger3setEPKc>
      break;
 80808c4:	e008      	b.n	80808d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
 80808c6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80808ca:	3098      	adds	r0, #152	; 0x98
 80808cc:	e002      	b.n	80808d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
 80808ce:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80808d2:	3078      	adds	r0, #120	; 0x78
 80808d4:	f7ff fed2 	bl	808067c <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 80808d8:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
    if (p->termNumber == curTermNumber)
         p->set(term);
 80808dc:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 80808e0:	b1b6      	cbz	r6, 8080910 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
 80808e2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80808e6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80808e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80808ea:	f001 fd75 	bl	80823d8 <strcmp>
 80808ee:	b978      	cbnz	r0, 8080910 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
 80808f0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80808f2:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 80808f6:	429a      	cmp	r2, r3
 80808f8:	dc0a      	bgt.n	8080910 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
    if (p->termNumber == curTermNumber)
 80808fa:	d103      	bne.n	8080904 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
         p->set(term);
 80808fc:	4639      	mov	r1, r7
 80808fe:	4630      	mov	r0, r6
 8080900:	f7ff fee4 	bl	80806cc <_ZN13TinyGPSCustom3setEPKc>
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 8080904:	6b36      	ldr	r6, [r6, #48]	; 0x30
 8080906:	e7eb      	b.n	80808e0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
 8080908:	d002      	beq.n	8080910 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
       customCandidates = NULL;
 808090a:	2300      	movs	r3, #0
 808090c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
 8080910:	4628      	mov	r0, r5
 8080912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080914:	080825b0 	.word	0x080825b0
 8080918:	080825b6 	.word	0x080825b6

0808091c <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 808091c:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
 808091e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

  switch(c)
 8080922:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
 8080924:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 8080928:	4604      	mov	r4, r0
 808092a:	460d      	mov	r5, r1
  ++encodedCharCount;
 808092c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  switch(c)
 8080930:	d02a      	beq.n	8080988 <_ZN11TinyGPSPlus6encodeEc+0x6c>
 8080932:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
 8080936:	d804      	bhi.n	8080942 <_ZN11TinyGPSPlus6encodeEc+0x26>
 8080938:	290a      	cmp	r1, #10
 808093a:	d00c      	beq.n	8080956 <_ZN11TinyGPSPlus6encodeEc+0x3a>
 808093c:	290d      	cmp	r1, #13
 808093e:	d132      	bne.n	80809a6 <_ZN11TinyGPSPlus6encodeEc+0x8a>
 8080940:	e009      	b.n	8080956 <_ZN11TinyGPSPlus6encodeEc+0x3a>
 8080942:	292a      	cmp	r1, #42	; 0x2a
 8080944:	d007      	beq.n	8080956 <_ZN11TinyGPSPlus6encodeEc+0x3a>
 8080946:	292c      	cmp	r1, #44	; 0x2c
 8080948:	d12d      	bne.n	80809a6 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
 808094a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 808094e:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
 8080952:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
 8080956:	2b0e      	cmp	r3, #14
 8080958:	f04f 0000 	mov.w	r0, #0
 808095c:	d805      	bhi.n	808096a <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
 808095e:	4423      	add	r3, r4
 8080960:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
 8080964:	4620      	mov	r0, r4
 8080966:	f7ff feb5 	bl	80806d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
 808096a:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 808096e:	3301      	adds	r3, #1
 8080970:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
 8080974:	2300      	movs	r3, #0
 8080976:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
 808097a:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
 808097e:	425d      	negs	r5, r3
 8080980:	415d      	adcs	r5, r3
 8080982:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
      return isValidSentence;
 8080986:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 8080988:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
 808098a:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 808098c:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
 8080990:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
 8080994:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
 8080998:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    isChecksumTerm = false;
 808099c:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
 80809a0:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
 80809a4:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
 80809a6:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
 80809a8:	bf9f      	itttt	ls
 80809aa:	1c5a      	addls	r2, r3, #1
 80809ac:	191b      	addls	r3, r3, r4
 80809ae:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
 80809b2:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
 80809b6:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
 80809ba:	b928      	cbnz	r0, 80809c8 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
 80809bc:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 80809c0:	404d      	eors	r5, r1
 80809c2:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 80809c6:	bd38      	pop	{r3, r4, r5, pc}
    return false;
 80809c8:	2000      	movs	r0, #0
  }

  return false;
}
 80809ca:	bd38      	pop	{r3, r4, r5, pc}

080809cc <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
 80809cc:	f000 b840 	b.w	8080a50 <HAL_Pin_Map>

080809d0 <HAL_CAN_Init>:
#include "can_hal.h"
#endif

DYNALIB_BEGIN(hal_can)

DYNALIB_FN(0, hal_can, HAL_CAN_Init, void(HAL_CAN_Channel, uint16_t, uint16_t, void*))
 80809d0:	b508      	push	{r3, lr}
 80809d2:	4b02      	ldr	r3, [pc, #8]	; (80809dc <HAL_CAN_Init+0xc>)
 80809d4:	681b      	ldr	r3, [r3, #0]
 80809d6:	681b      	ldr	r3, [r3, #0]
 80809d8:	9301      	str	r3, [sp, #4]
 80809da:	bd08      	pop	{r3, pc}
 80809dc:	080401d4 	.word	0x080401d4

080809e0 <HAL_CAN_Begin>:
DYNALIB_FN(1, hal_can, HAL_CAN_Begin, void(HAL_CAN_Channel, uint32_t, uint32_t, void*))
 80809e0:	b508      	push	{r3, lr}
 80809e2:	4b02      	ldr	r3, [pc, #8]	; (80809ec <HAL_CAN_Begin+0xc>)
 80809e4:	681b      	ldr	r3, [r3, #0]
 80809e6:	685b      	ldr	r3, [r3, #4]
 80809e8:	9301      	str	r3, [sp, #4]
 80809ea:	bd08      	pop	{r3, pc}
 80809ec:	080401d4 	.word	0x080401d4

080809f0 <HAL_CAN_Receive>:
DYNALIB_FN(2, hal_can, HAL_CAN_End, void(HAL_CAN_Channel, void*))
DYNALIB_FN(3, hal_can, HAL_CAN_Transmit, bool(HAL_CAN_Channel, const CANMessage*, void*))
DYNALIB_FN(4, hal_can, HAL_CAN_Receive, bool(HAL_CAN_Channel, CANMessage*, void*))
 80809f0:	b508      	push	{r3, lr}
 80809f2:	4b02      	ldr	r3, [pc, #8]	; (80809fc <HAL_CAN_Receive+0xc>)
 80809f4:	681b      	ldr	r3, [r3, #0]
 80809f6:	691b      	ldr	r3, [r3, #16]
 80809f8:	9301      	str	r3, [sp, #4]
 80809fa:	bd08      	pop	{r3, pc}
 80809fc:	080401d4 	.word	0x080401d4

08080a00 <HAL_CAN_Add_Filter>:
DYNALIB_FN(5, hal_can, HAL_CAN_Available_Messages, uint8_t(HAL_CAN_Channel, void*))
DYNALIB_FN(6, hal_can, HAL_CAN_Add_Filter, bool(HAL_CAN_Channel, uint32_t, uint32_t, HAL_CAN_Filters, void*))
 8080a00:	b508      	push	{r3, lr}
 8080a02:	4b02      	ldr	r3, [pc, #8]	; (8080a0c <HAL_CAN_Add_Filter+0xc>)
 8080a04:	681b      	ldr	r3, [r3, #0]
 8080a06:	699b      	ldr	r3, [r3, #24]
 8080a08:	9301      	str	r3, [sp, #4]
 8080a0a:	bd08      	pop	{r3, pc}
 8080a0c:	080401d4 	.word	0x080401d4

08080a10 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080a10:	b508      	push	{r3, lr}
 8080a12:	4b02      	ldr	r3, [pc, #8]	; (8080a1c <os_mutex_create+0xc>)
 8080a14:	681b      	ldr	r3, [r3, #0]
 8080a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080a18:	9301      	str	r3, [sp, #4]
 8080a1a:	bd08      	pop	{r3, pc}
 8080a1c:	080401d0 	.word	0x080401d0

08080a20 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8080a20:	b508      	push	{r3, lr}
 8080a22:	4b02      	ldr	r3, [pc, #8]	; (8080a2c <HAL_Core_Get_Last_Reset_Info+0xc>)
 8080a24:	681b      	ldr	r3, [r3, #0]
 8080a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8080a28:	9301      	str	r3, [sp, #4]
 8080a2a:	bd08      	pop	{r3, pc}
 8080a2c:	080401b8 	.word	0x080401b8

08080a30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080a30:	b508      	push	{r3, lr}
 8080a32:	4b02      	ldr	r3, [pc, #8]	; (8080a3c <HAL_RNG_GetRandomNumber+0xc>)
 8080a34:	681b      	ldr	r3, [r3, #0]
 8080a36:	685b      	ldr	r3, [r3, #4]
 8080a38:	9301      	str	r3, [sp, #4]
 8080a3a:	bd08      	pop	{r3, pc}
 8080a3c:	0804019c 	.word	0x0804019c

08080a40 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080a40:	b508      	push	{r3, lr}
 8080a42:	4b02      	ldr	r3, [pc, #8]	; (8080a4c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080a44:	681b      	ldr	r3, [r3, #0]
 8080a46:	695b      	ldr	r3, [r3, #20]
 8080a48:	9301      	str	r3, [sp, #4]
 8080a4a:	bd08      	pop	{r3, pc}
 8080a4c:	0804019c 	.word	0x0804019c

08080a50 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8080a50:	b508      	push	{r3, lr}
 8080a52:	4b02      	ldr	r3, [pc, #8]	; (8080a5c <HAL_Pin_Map+0xc>)
 8080a54:	681b      	ldr	r3, [r3, #0]
 8080a56:	681b      	ldr	r3, [r3, #0]
 8080a58:	9301      	str	r3, [sp, #4]
 8080a5a:	bd08      	pop	{r3, pc}
 8080a5c:	080401b0 	.word	0x080401b0

08080a60 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080a60:	b508      	push	{r3, lr}
 8080a62:	4b02      	ldr	r3, [pc, #8]	; (8080a6c <HAL_Pin_Mode+0xc>)
 8080a64:	681b      	ldr	r3, [r3, #0]
 8080a66:	689b      	ldr	r3, [r3, #8]
 8080a68:	9301      	str	r3, [sp, #4]
 8080a6a:	bd08      	pop	{r3, pc}
 8080a6c:	080401b0 	.word	0x080401b0

08080a70 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080a70:	b508      	push	{r3, lr}
 8080a72:	4b02      	ldr	r3, [pc, #8]	; (8080a7c <HAL_Get_Pin_Mode+0xc>)
 8080a74:	681b      	ldr	r3, [r3, #0]
 8080a76:	68db      	ldr	r3, [r3, #12]
 8080a78:	9301      	str	r3, [sp, #4]
 8080a7a:	bd08      	pop	{r3, pc}
 8080a7c:	080401b0 	.word	0x080401b0

08080a80 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080a80:	b508      	push	{r3, lr}
 8080a82:	4b02      	ldr	r3, [pc, #8]	; (8080a8c <HAL_GPIO_Write+0xc>)
 8080a84:	681b      	ldr	r3, [r3, #0]
 8080a86:	691b      	ldr	r3, [r3, #16]
 8080a88:	9301      	str	r3, [sp, #4]
 8080a8a:	bd08      	pop	{r3, pc}
 8080a8c:	080401b0 	.word	0x080401b0

08080a90 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8080a90:	b508      	push	{r3, lr}
 8080a92:	4b02      	ldr	r3, [pc, #8]	; (8080a9c <HAL_I2C_Write_Data+0xc>)
 8080a94:	681b      	ldr	r3, [r3, #0]
 8080a96:	6a1b      	ldr	r3, [r3, #32]
 8080a98:	9301      	str	r3, [sp, #4]
 8080a9a:	bd08      	pop	{r3, pc}
 8080a9c:	080401ac 	.word	0x080401ac

08080aa0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8080aa0:	b508      	push	{r3, lr}
 8080aa2:	4b02      	ldr	r3, [pc, #8]	; (8080aac <HAL_I2C_Available_Data+0xc>)
 8080aa4:	681b      	ldr	r3, [r3, #0]
 8080aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080aa8:	9301      	str	r3, [sp, #4]
 8080aaa:	bd08      	pop	{r3, pc}
 8080aac:	080401ac 	.word	0x080401ac

08080ab0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8080ab0:	b508      	push	{r3, lr}
 8080ab2:	4b02      	ldr	r3, [pc, #8]	; (8080abc <HAL_I2C_Read_Data+0xc>)
 8080ab4:	681b      	ldr	r3, [r3, #0]
 8080ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080ab8:	9301      	str	r3, [sp, #4]
 8080aba:	bd08      	pop	{r3, pc}
 8080abc:	080401ac 	.word	0x080401ac

08080ac0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8080ac0:	b508      	push	{r3, lr}
 8080ac2:	4b02      	ldr	r3, [pc, #8]	; (8080acc <HAL_I2C_Peek_Data+0xc>)
 8080ac4:	681b      	ldr	r3, [r3, #0]
 8080ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080ac8:	9301      	str	r3, [sp, #4]
 8080aca:	bd08      	pop	{r3, pc}
 8080acc:	080401ac 	.word	0x080401ac

08080ad0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8080ad0:	b508      	push	{r3, lr}
 8080ad2:	4b02      	ldr	r3, [pc, #8]	; (8080adc <HAL_I2C_Flush_Data+0xc>)
 8080ad4:	681b      	ldr	r3, [r3, #0]
 8080ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080ad8:	9301      	str	r3, [sp, #4]
 8080ada:	bd08      	pop	{r3, pc}
 8080adc:	080401ac 	.word	0x080401ac

08080ae0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8080ae0:	b508      	push	{r3, lr}
 8080ae2:	4b02      	ldr	r3, [pc, #8]	; (8080aec <HAL_I2C_Is_Enabled+0xc>)
 8080ae4:	681b      	ldr	r3, [r3, #0]
 8080ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080ae8:	9301      	str	r3, [sp, #4]
 8080aea:	bd08      	pop	{r3, pc}
 8080aec:	080401ac 	.word	0x080401ac

08080af0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080af0:	b508      	push	{r3, lr}
 8080af2:	4b02      	ldr	r3, [pc, #8]	; (8080afc <HAL_I2C_Init+0xc>)
 8080af4:	681b      	ldr	r3, [r3, #0]
 8080af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080af8:	9301      	str	r3, [sp, #4]
 8080afa:	bd08      	pop	{r3, pc}
 8080afc:	080401ac 	.word	0x080401ac

08080b00 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8080b00:	b508      	push	{r3, lr}
 8080b02:	4b02      	ldr	r3, [pc, #8]	; (8080b0c <HAL_SPI_Begin+0xc>)
 8080b04:	681b      	ldr	r3, [r3, #0]
 8080b06:	681b      	ldr	r3, [r3, #0]
 8080b08:	9301      	str	r3, [sp, #4]
 8080b0a:	bd08      	pop	{r3, pc}
 8080b0c:	080401b4 	.word	0x080401b4

08080b10 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080b10:	b508      	push	{r3, lr}
 8080b12:	4b02      	ldr	r3, [pc, #8]	; (8080b1c <HAL_SPI_Init+0xc>)
 8080b14:	681b      	ldr	r3, [r3, #0]
 8080b16:	69db      	ldr	r3, [r3, #28]
 8080b18:	9301      	str	r3, [sp, #4]
 8080b1a:	bd08      	pop	{r3, pc}
 8080b1c:	080401b4 	.word	0x080401b4

08080b20 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8080b20:	b508      	push	{r3, lr}
 8080b22:	4b02      	ldr	r3, [pc, #8]	; (8080b2c <HAL_SPI_Is_Enabled+0xc>)
 8080b24:	681b      	ldr	r3, [r3, #0]
 8080b26:	6a1b      	ldr	r3, [r3, #32]
 8080b28:	9301      	str	r3, [sp, #4]
 8080b2a:	bd08      	pop	{r3, pc}
 8080b2c:	080401b4 	.word	0x080401b4

08080b30 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8080b30:	b508      	push	{r3, lr}
 8080b32:	4b02      	ldr	r3, [pc, #8]	; (8080b3c <HAL_USART_Init+0xc>)
 8080b34:	681b      	ldr	r3, [r3, #0]
 8080b36:	699b      	ldr	r3, [r3, #24]
 8080b38:	9301      	str	r3, [sp, #4]
 8080b3a:	bd08      	pop	{r3, pc}
 8080b3c:	080401c4 	.word	0x080401c4

08080b40 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8080b40:	b508      	push	{r3, lr}
 8080b42:	4b02      	ldr	r3, [pc, #8]	; (8080b4c <HAL_USART_Write_Data+0xc>)
 8080b44:	681b      	ldr	r3, [r3, #0]
 8080b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080b48:	9301      	str	r3, [sp, #4]
 8080b4a:	bd08      	pop	{r3, pc}
 8080b4c:	080401c4 	.word	0x080401c4

08080b50 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8080b50:	b508      	push	{r3, lr}
 8080b52:	4b02      	ldr	r3, [pc, #8]	; (8080b5c <HAL_USART_Available_Data+0xc>)
 8080b54:	681b      	ldr	r3, [r3, #0]
 8080b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080b58:	9301      	str	r3, [sp, #4]
 8080b5a:	bd08      	pop	{r3, pc}
 8080b5c:	080401c4 	.word	0x080401c4

08080b60 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8080b60:	b508      	push	{r3, lr}
 8080b62:	4b02      	ldr	r3, [pc, #8]	; (8080b6c <HAL_USART_Read_Data+0xc>)
 8080b64:	681b      	ldr	r3, [r3, #0]
 8080b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080b68:	9301      	str	r3, [sp, #4]
 8080b6a:	bd08      	pop	{r3, pc}
 8080b6c:	080401c4 	.word	0x080401c4

08080b70 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8080b70:	b508      	push	{r3, lr}
 8080b72:	4b02      	ldr	r3, [pc, #8]	; (8080b7c <HAL_USART_Peek_Data+0xc>)
 8080b74:	681b      	ldr	r3, [r3, #0]
 8080b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080b78:	9301      	str	r3, [sp, #4]
 8080b7a:	bd08      	pop	{r3, pc}
 8080b7c:	080401c4 	.word	0x080401c4

08080b80 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080b80:	b508      	push	{r3, lr}
 8080b82:	4b02      	ldr	r3, [pc, #8]	; (8080b8c <HAL_USART_Flush_Data+0xc>)
 8080b84:	681b      	ldr	r3, [r3, #0]
 8080b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080b88:	9301      	str	r3, [sp, #4]
 8080b8a:	bd08      	pop	{r3, pc}
 8080b8c:	080401c4 	.word	0x080401c4

08080b90 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080b90:	b508      	push	{r3, lr}
 8080b92:	4b02      	ldr	r3, [pc, #8]	; (8080b9c <HAL_USART_Is_Enabled+0xc>)
 8080b94:	681b      	ldr	r3, [r3, #0]
 8080b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080b98:	9301      	str	r3, [sp, #4]
 8080b9a:	bd08      	pop	{r3, pc}
 8080b9c:	080401c4 	.word	0x080401c4

08080ba0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080ba0:	b508      	push	{r3, lr}
 8080ba2:	4b02      	ldr	r3, [pc, #8]	; (8080bac <HAL_USART_Available_Data_For_Write+0xc>)
 8080ba4:	681b      	ldr	r3, [r3, #0]
 8080ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080ba8:	9301      	str	r3, [sp, #4]
 8080baa:	bd08      	pop	{r3, pc}
 8080bac:	080401c4 	.word	0x080401c4

08080bb0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8080bb0:	b508      	push	{r3, lr}
 8080bb2:	4b02      	ldr	r3, [pc, #8]	; (8080bbc <HAL_USART_BeginConfig+0xc>)
 8080bb4:	681b      	ldr	r3, [r3, #0]
 8080bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080bb8:	9301      	str	r3, [sp, #4]
 8080bba:	bd08      	pop	{r3, pc}
 8080bbc:	080401c4 	.word	0x080401c4

08080bc0 <HAL_USART_Write_NineBitData>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, HAL_USART_Write_NineBitData, uint32_t(HAL_USART_Serial serial, uint16_t data))
 8080bc0:	b508      	push	{r3, lr}
 8080bc2:	4b02      	ldr	r3, [pc, #8]	; (8080bcc <HAL_USART_Write_NineBitData+0xc>)
 8080bc4:	681b      	ldr	r3, [r3, #0]
 8080bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8080bc8:	9301      	str	r3, [sp, #4]
 8080bca:	bd08      	pop	{r3, pc}
 8080bcc:	080401c4 	.word	0x080401c4

08080bd0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080bd0:	b508      	push	{r3, lr}
 8080bd2:	4b02      	ldr	r3, [pc, #8]	; (8080bdc <HAL_USB_USART_Init+0xc>)
 8080bd4:	681b      	ldr	r3, [r3, #0]
 8080bd6:	681b      	ldr	r3, [r3, #0]
 8080bd8:	9301      	str	r3, [sp, #4]
 8080bda:	bd08      	pop	{r3, pc}
 8080bdc:	0806001c 	.word	0x0806001c

08080be0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080be0:	b508      	push	{r3, lr}
 8080be2:	4b02      	ldr	r3, [pc, #8]	; (8080bec <HAL_USB_USART_Begin+0xc>)
 8080be4:	681b      	ldr	r3, [r3, #0]
 8080be6:	685b      	ldr	r3, [r3, #4]
 8080be8:	9301      	str	r3, [sp, #4]
 8080bea:	bd08      	pop	{r3, pc}
 8080bec:	0806001c 	.word	0x0806001c

08080bf0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080bf0:	b508      	push	{r3, lr}
 8080bf2:	4b02      	ldr	r3, [pc, #8]	; (8080bfc <HAL_USB_USART_Available_Data+0xc>)
 8080bf4:	681b      	ldr	r3, [r3, #0]
 8080bf6:	691b      	ldr	r3, [r3, #16]
 8080bf8:	9301      	str	r3, [sp, #4]
 8080bfa:	bd08      	pop	{r3, pc}
 8080bfc:	0806001c 	.word	0x0806001c

08080c00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080c00:	b508      	push	{r3, lr}
 8080c02:	4b02      	ldr	r3, [pc, #8]	; (8080c0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080c04:	681b      	ldr	r3, [r3, #0]
 8080c06:	695b      	ldr	r3, [r3, #20]
 8080c08:	9301      	str	r3, [sp, #4]
 8080c0a:	bd08      	pop	{r3, pc}
 8080c0c:	0806001c 	.word	0x0806001c

08080c10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080c10:	b508      	push	{r3, lr}
 8080c12:	4b02      	ldr	r3, [pc, #8]	; (8080c1c <HAL_USB_USART_Receive_Data+0xc>)
 8080c14:	681b      	ldr	r3, [r3, #0]
 8080c16:	699b      	ldr	r3, [r3, #24]
 8080c18:	9301      	str	r3, [sp, #4]
 8080c1a:	bd08      	pop	{r3, pc}
 8080c1c:	0806001c 	.word	0x0806001c

08080c20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080c20:	b508      	push	{r3, lr}
 8080c22:	4b02      	ldr	r3, [pc, #8]	; (8080c2c <HAL_USB_USART_Send_Data+0xc>)
 8080c24:	681b      	ldr	r3, [r3, #0]
 8080c26:	69db      	ldr	r3, [r3, #28]
 8080c28:	9301      	str	r3, [sp, #4]
 8080c2a:	bd08      	pop	{r3, pc}
 8080c2c:	0806001c 	.word	0x0806001c

08080c30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080c30:	b508      	push	{r3, lr}
 8080c32:	4b02      	ldr	r3, [pc, #8]	; (8080c3c <HAL_USB_USART_Flush_Data+0xc>)
 8080c34:	681b      	ldr	r3, [r3, #0]
 8080c36:	6a1b      	ldr	r3, [r3, #32]
 8080c38:	9301      	str	r3, [sp, #4]
 8080c3a:	bd08      	pop	{r3, pc}
 8080c3c:	0806001c 	.word	0x0806001c

08080c40 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080c40:	b508      	push	{r3, lr}
 8080c42:	4b02      	ldr	r3, [pc, #8]	; (8080c4c <set_system_mode+0xc>)
 8080c44:	681b      	ldr	r3, [r3, #0]
 8080c46:	685b      	ldr	r3, [r3, #4]
 8080c48:	9301      	str	r3, [sp, #4]
 8080c4a:	bd08      	pop	{r3, pc}
 8080c4c:	080401a4 	.word	0x080401a4

08080c50 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8080c50:	b508      	push	{r3, lr}
 8080c52:	4b02      	ldr	r3, [pc, #8]	; (8080c5c <system_thread_set_state+0xc>)
 8080c54:	681b      	ldr	r3, [r3, #0]
 8080c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080c58:	9301      	str	r3, [sp, #4]
 8080c5a:	bd08      	pop	{r3, pc}
 8080c5c:	080401a4 	.word	0x080401a4

08080c60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080c60:	b508      	push	{r3, lr}
 8080c62:	4b03      	ldr	r3, [pc, #12]	; (8080c70 <system_ctrl_set_app_request_handler+0x10>)
 8080c64:	681b      	ldr	r3, [r3, #0]
 8080c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080c6a:	9301      	str	r3, [sp, #4]
 8080c6c:	bd08      	pop	{r3, pc}
 8080c6e:	0000      	.short	0x0000
 8080c70:	080401a4 	.word	0x080401a4

08080c74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080c74:	b508      	push	{r3, lr}
 8080c76:	4b03      	ldr	r3, [pc, #12]	; (8080c84 <system_ctrl_set_result+0x10>)
 8080c78:	681b      	ldr	r3, [r3, #0]
 8080c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080c7e:	9301      	str	r3, [sp, #4]
 8080c80:	bd08      	pop	{r3, pc}
 8080c82:	0000      	.short	0x0000
 8080c84:	080401a4 	.word	0x080401a4

08080c88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080c88:	b508      	push	{r3, lr}
 8080c8a:	4b02      	ldr	r3, [pc, #8]	; (8080c94 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080c8c:	681b      	ldr	r3, [r3, #0]
 8080c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080c90:	9301      	str	r3, [sp, #4]
 8080c92:	bd08      	pop	{r3, pc}
 8080c94:	080401cc 	.word	0x080401cc

08080c98 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080c98:	b508      	push	{r3, lr}
 8080c9a:	4b02      	ldr	r3, [pc, #8]	; (8080ca4 <network_ready+0xc>)
 8080c9c:	681b      	ldr	r3, [r3, #0]
 8080c9e:	691b      	ldr	r3, [r3, #16]
 8080ca0:	9301      	str	r3, [sp, #4]
 8080ca2:	bd08      	pop	{r3, pc}
 8080ca4:	080401c8 	.word	0x080401c8

08080ca8 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080ca8:	b508      	push	{r3, lr}
 8080caa:	4b02      	ldr	r3, [pc, #8]	; (8080cb4 <malloc+0xc>)
 8080cac:	681b      	ldr	r3, [r3, #0]
 8080cae:	681b      	ldr	r3, [r3, #0]
 8080cb0:	9301      	str	r3, [sp, #4]
 8080cb2:	bd08      	pop	{r3, pc}
 8080cb4:	080401a0 	.word	0x080401a0

08080cb8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080cb8:	b508      	push	{r3, lr}
 8080cba:	4b02      	ldr	r3, [pc, #8]	; (8080cc4 <free+0xc>)
 8080cbc:	681b      	ldr	r3, [r3, #0]
 8080cbe:	685b      	ldr	r3, [r3, #4]
 8080cc0:	9301      	str	r3, [sp, #4]
 8080cc2:	bd08      	pop	{r3, pc}
 8080cc4:	080401a0 	.word	0x080401a0

08080cc8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8080cc8:	b508      	push	{r3, lr}
 8080cca:	4b02      	ldr	r3, [pc, #8]	; (8080cd4 <vsnprintf+0xc>)
 8080ccc:	681b      	ldr	r3, [r3, #0]
 8080cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080cd0:	9301      	str	r3, [sp, #4]
 8080cd2:	bd08      	pop	{r3, pc}
 8080cd4:	080401a0 	.word	0x080401a0

08080cd8 <_ZN10CANChannelC1E15HAL_CAN_Channeltt>:
#include "spark_wiring_can.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

CANChannel::CANChannel(HAL_CAN_Channel channel,
 8080cd8:	b510      	push	{r4, lr}
 8080cda:	4604      	mov	r4, r0
 8080cdc:	4608      	mov	r0, r1
 8080cde:	4611      	mov	r1, r2
        uint16_t rxQueueSize, uint16_t txQueueSize)
{
    _channel = channel;
 8080ce0:	7020      	strb	r0, [r4, #0]
#include "spark_wiring_can.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

CANChannel::CANChannel(HAL_CAN_Channel channel,
 8080ce2:	461a      	mov	r2, r3
        uint16_t rxQueueSize, uint16_t txQueueSize)
{
    _channel = channel;
    HAL_CAN_Init(_channel, rxQueueSize, txQueueSize, NULL);
 8080ce4:	2300      	movs	r3, #0
 8080ce6:	f7ff fe73 	bl	80809d0 <HAL_CAN_Init>
}
 8080cea:	4620      	mov	r0, r4
 8080cec:	bd10      	pop	{r4, pc}

08080cee <_ZN10CANChannel5beginEmm>:
// Public Methods //////////////////////////////////////////////////////////////

void CANChannel::begin(unsigned long baud, uint32_t flags)
{
    HAL_CAN_Begin(_channel, baud, flags, NULL);
 8080cee:	2300      	movs	r3, #0
 8080cf0:	7800      	ldrb	r0, [r0, #0]
 8080cf2:	f7ff be75 	b.w	80809e0 <HAL_CAN_Begin>

08080cf6 <_ZN10CANChannel7receiveER10CANMessage>:
    return HAL_CAN_Available_Messages(_channel, NULL);
}

bool CANChannel::receive(CANMessage &message)
{
    return HAL_CAN_Receive(_channel, &message, NULL);
 8080cf6:	2200      	movs	r2, #0
 8080cf8:	7800      	ldrb	r0, [r0, #0]
 8080cfa:	f7ff be79 	b.w	80809f0 <HAL_CAN_Receive>

08080cfe <_ZN10CANChannel9addFilterEmm15HAL_CAN_Filters>:
{
    return HAL_CAN_Transmit(_channel, &message, NULL);
}

bool CANChannel::addFilter(uint32_t id, uint32_t mask, HAL_CAN_Filters type)
{
 8080cfe:	b513      	push	{r0, r1, r4, lr}
    return HAL_CAN_Add_Filter(_channel, id, mask, type, NULL);
 8080d00:	2400      	movs	r4, #0
 8080d02:	7800      	ldrb	r0, [r0, #0]
 8080d04:	9400      	str	r4, [sp, #0]
 8080d06:	f7ff fe7b 	bl	8080a00 <HAL_CAN_Add_Filter>
}
 8080d0a:	b002      	add	sp, #8
 8080d0c:	bd10      	pop	{r4, pc}

08080d0e <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080d0e:	2200      	movs	r2, #0
 8080d10:	4611      	mov	r1, r2
 8080d12:	4610      	mov	r0, r2
 8080d14:	f7ff bfc0 	b.w	8080c98 <network_ready>

08080d18 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8080d18:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080d1a:	4c0b      	ldr	r4, [pc, #44]	; (8080d48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 8080d1c:	2528      	movs	r5, #40	; 0x28
 8080d1e:	462a      	mov	r2, r5
 8080d20:	2100      	movs	r1, #0
 8080d22:	4620      	mov	r0, r4
 8080d24:	f001 fb27 	bl	8082376 <memset>
        cid = -1;
 8080d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080d2c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8080d2e:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8080d30:	4c06      	ldr	r4, [pc, #24]	; (8080d4c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8080d32:	4b07      	ldr	r3, [pc, #28]	; (8080d50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8080d34:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080d36:	252c      	movs	r5, #44	; 0x2c
 8080d38:	f840 3b04 	str.w	r3, [r0], #4
 8080d3c:	462a      	mov	r2, r5
 8080d3e:	2100      	movs	r1, #0
 8080d40:	f001 fb19 	bl	8082376 <memset>
        size = sizeof(*this);
 8080d44:	80a5      	strh	r5, [r4, #4]
 8080d46:	bd38      	pop	{r3, r4, r5, pc}
 8080d48:	200007e0 	.word	0x200007e0
 8080d4c:	200007b0 	.word	0x200007b0
 8080d50:	080825e8 	.word	0x080825e8

08080d54 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080d54:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080d56:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080d58:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080d5a:	b113      	cbz	r3, 8080d62 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080d5c:	2203      	movs	r2, #3
 8080d5e:	4601      	mov	r1, r0
 8080d60:	4798      	blx	r3
    }
 8080d62:	4620      	mov	r0, r4
 8080d64:	bd10      	pop	{r4, pc}

08080d66 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8080d66:	4770      	bx	lr

08080d68 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8080d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080d6a:	4606      	mov	r6, r0
 8080d6c:	4615      	mov	r5, r2
 8080d6e:	460c      	mov	r4, r1
 8080d70:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080d72:	42bc      	cmp	r4, r7
 8080d74:	d006      	beq.n	8080d84 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8080d76:	6833      	ldr	r3, [r6, #0]
 8080d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8080d7c:	689b      	ldr	r3, [r3, #8]
 8080d7e:	4630      	mov	r0, r6
 8080d80:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080d82:	e7f6      	b.n	8080d72 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8080d84:	4628      	mov	r0, r5
 8080d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080d88 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8080d88:	2200      	movs	r2, #0
 8080d8a:	7c00      	ldrb	r0, [r0, #16]
 8080d8c:	f7ff be80 	b.w	8080a90 <HAL_I2C_Write_Data>

08080d90 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8080d90:	2100      	movs	r1, #0
 8080d92:	7c00      	ldrb	r0, [r0, #16]
 8080d94:	f7ff be84 	b.w	8080aa0 <HAL_I2C_Available_Data>

08080d98 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8080d98:	2100      	movs	r1, #0
 8080d9a:	7c00      	ldrb	r0, [r0, #16]
 8080d9c:	f7ff be88 	b.w	8080ab0 <HAL_I2C_Read_Data>

08080da0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8080da0:	2100      	movs	r1, #0
 8080da2:	7c00      	ldrb	r0, [r0, #16]
 8080da4:	f7ff be8c 	b.w	8080ac0 <HAL_I2C_Peek_Data>

08080da8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8080da8:	2100      	movs	r1, #0
 8080daa:	7c00      	ldrb	r0, [r0, #16]
 8080dac:	f7ff be90 	b.w	8080ad0 <HAL_I2C_Flush_Data>

08080db0 <_ZN7TwoWireD0Ev>:
 8080db0:	b510      	push	{r4, lr}
 8080db2:	4604      	mov	r4, r0
 8080db4:	f7ff f971 	bl	808009a <_ZdlPv>
 8080db8:	4620      	mov	r0, r4
 8080dba:	bd10      	pop	{r4, pc}

08080dbc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080dbc:	b510      	push	{r4, lr}
 8080dbe:	4604      	mov	r4, r0
 8080dc0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080dc6:	60a3      	str	r3, [r4, #8]
 8080dc8:	4b04      	ldr	r3, [pc, #16]	; (8080ddc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080dca:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8080dcc:	7420      	strb	r0, [r4, #16]
 8080dce:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080dd0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8080dd2:	f7ff fe8d 	bl	8080af0 <HAL_I2C_Init>

}
 8080dd6:	4620      	mov	r0, r4
 8080dd8:	bd10      	pop	{r4, pc}
 8080dda:	bf00      	nop
 8080ddc:	080825f4 	.word	0x080825f4

08080de0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8080de0:	2100      	movs	r1, #0
 8080de2:	7c00      	ldrb	r0, [r0, #16]
 8080de4:	f7ff be7c 	b.w	8080ae0 <HAL_I2C_Is_Enabled>

08080de8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080de8:	4770      	bx	lr

08080dea <_ZN9IPAddressD0Ev>:
 8080dea:	b510      	push	{r4, lr}
 8080dec:	4604      	mov	r4, r0
 8080dee:	f7ff f954 	bl	808009a <_ZdlPv>
 8080df2:	4620      	mov	r0, r4
 8080df4:	bd10      	pop	{r4, pc}

08080df6 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080df8:	460f      	mov	r7, r1
 8080dfa:	f100 0608 	add.w	r6, r0, #8
 8080dfe:	1d05      	adds	r5, r0, #4
 8080e00:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080e02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8080e06:	220a      	movs	r2, #10
 8080e08:	4638      	mov	r0, r7
 8080e0a:	f000 f896 	bl	8080f3a <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080e0e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080e10:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080e12:	d007      	beq.n	8080e24 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8080e14:	2c00      	cmp	r4, #0
 8080e16:	d0f4      	beq.n	8080e02 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080e18:	212e      	movs	r1, #46	; 0x2e
 8080e1a:	4638      	mov	r0, r7
 8080e1c:	f000 f84a 	bl	8080eb4 <_ZN5Print5printEc>
 8080e20:	4404      	add	r4, r0
 8080e22:	e7ee      	b.n	8080e02 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8080e24:	4620      	mov	r0, r4
 8080e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080e28 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8080e28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080e2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080e2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8080e32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8080e36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8080e3a:	6041      	str	r1, [r0, #4]
 8080e3c:	bd10      	pop	{r4, pc}
	...

08080e40 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080e42:	4d04      	ldr	r5, [pc, #16]	; (8080e54 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080e44:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080e46:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080e4a:	9500      	str	r5, [sp, #0]
 8080e4c:	f7ff ffec 	bl	8080e28 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080e50:	b003      	add	sp, #12
 8080e52:	bd30      	pop	{r4, r5, pc}
 8080e54:	0808261c 	.word	0x0808261c

08080e58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080e58:	4a01      	ldr	r2, [pc, #4]	; (8080e60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080e5a:	4b02      	ldr	r3, [pc, #8]	; (8080e64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080e5c:	601a      	str	r2, [r3, #0]
 8080e5e:	4770      	bx	lr
 8080e60:	080826de 	.word	0x080826de
 8080e64:	20000808 	.word	0x20000808

08080e68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080e6a:	4606      	mov	r6, r0
 8080e6c:	460d      	mov	r5, r1
 8080e6e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8080e70:	2400      	movs	r4, #0
  while (size--) {
 8080e72:	42bd      	cmp	r5, r7
 8080e74:	d00c      	beq.n	8080e90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080e76:	6833      	ldr	r3, [r6, #0]
 8080e78:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080e7c:	689b      	ldr	r3, [r3, #8]
 8080e7e:	4630      	mov	r0, r6
 8080e80:	4798      	blx	r3
     if (chunk>=0)
 8080e82:	2800      	cmp	r0, #0
 8080e84:	db01      	blt.n	8080e8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080e86:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8080e88:	e7f3      	b.n	8080e72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080e8a:	2c00      	cmp	r4, #0
 8080e8c:	bf08      	it	eq
 8080e8e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8080e90:	4620      	mov	r0, r4
 8080e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080e94 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080e94:	b570      	push	{r4, r5, r6, lr}
 8080e96:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080e98:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080e9a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8080e9c:	b149      	cbz	r1, 8080eb2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080e9e:	f001 faad 	bl	80823fc <strlen>
 8080ea2:	682b      	ldr	r3, [r5, #0]
 8080ea4:	4602      	mov	r2, r0
 8080ea6:	4621      	mov	r1, r4
 8080ea8:	4628      	mov	r0, r5
    }
 8080eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8080eae:	68db      	ldr	r3, [r3, #12]
 8080eb0:	4718      	bx	r3
    }
 8080eb2:	bd70      	pop	{r4, r5, r6, pc}

08080eb4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080eb4:	6803      	ldr	r3, [r0, #0]
 8080eb6:	689b      	ldr	r3, [r3, #8]
 8080eb8:	4718      	bx	r3

08080eba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080eba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080ebc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080ebe:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080ec0:	f7ff fff8 	bl	8080eb4 <_ZN5Print5printEc>
  n += print('\n');
 8080ec4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8080ec6:	4604      	mov	r4, r0
  n += print('\n');
 8080ec8:	4628      	mov	r0, r5
 8080eca:	f7ff fff3 	bl	8080eb4 <_ZN5Print5printEc>
  return n;
}
 8080ece:	4420      	add	r0, r4
 8080ed0:	bd38      	pop	{r3, r4, r5, pc}

08080ed2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8080ed2:	b538      	push	{r3, r4, r5, lr}
 8080ed4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080ed6:	f7ff ffdd 	bl	8080e94 <_ZN5Print5writeEPKc>
 8080eda:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8080edc:	4628      	mov	r0, r5
 8080ede:	f7ff ffec 	bl	8080eba <_ZN5Print7printlnEv>
  return n;
}
 8080ee2:	4420      	add	r0, r4
 8080ee4:	bd38      	pop	{r3, r4, r5, pc}

08080ee6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080ee6:	2a01      	cmp	r2, #1
 8080ee8:	bf98      	it	ls
 8080eea:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080eec:	b530      	push	{r4, r5, lr}
 8080eee:	460b      	mov	r3, r1
 8080ef0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080ef2:	2100      	movs	r1, #0
 8080ef4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8080ef8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8080efc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8080f00:	fb05 3312 	mls	r3, r5, r2, r3
 8080f04:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080f06:	2b09      	cmp	r3, #9
 8080f08:	bf94      	ite	ls
 8080f0a:	3330      	addls	r3, #48	; 0x30
 8080f0c:	3337      	addhi	r3, #55	; 0x37
 8080f0e:	b2db      	uxtb	r3, r3
 8080f10:	4621      	mov	r1, r4
 8080f12:	f804 3901 	strb.w	r3, [r4], #-1
 8080f16:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8080f18:	2d00      	cmp	r5, #0
 8080f1a:	d1ef      	bne.n	8080efc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8080f1c:	f7ff ffba 	bl	8080e94 <_ZN5Print5writeEPKc>
}
 8080f20:	b00b      	add	sp, #44	; 0x2c
 8080f22:	bd30      	pop	{r4, r5, pc}

08080f24 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8080f24:	b410      	push	{r4}
  if (base == 0) return write(n);
 8080f26:	b922      	cbnz	r2, 8080f32 <_ZN5Print5printEmi+0xe>
 8080f28:	6803      	ldr	r3, [r0, #0]
 8080f2a:	b2c9      	uxtb	r1, r1
 8080f2c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8080f2e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8080f30:	4718      	bx	r3
  else return printNumber(n, base);
 8080f32:	b2d2      	uxtb	r2, r2
}
 8080f34:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080f36:	f7ff bfd6 	b.w	8080ee6 <_ZN5Print11printNumberEmh>

08080f3a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8080f3a:	f7ff bff3 	b.w	8080f24 <_ZN5Print5printEmi>

08080f3e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8080f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080f42:	4607      	mov	r7, r0
 8080f44:	460e      	mov	r6, r1
  if (base == 0) {
 8080f46:	4615      	mov	r5, r2
 8080f48:	b92a      	cbnz	r2, 8080f56 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8080f4e:	6803      	ldr	r3, [r0, #0]
 8080f50:	b2c9      	uxtb	r1, r1
 8080f52:	689b      	ldr	r3, [r3, #8]
 8080f54:	4718      	bx	r3
  } else if (base == 10) {
 8080f56:	2a0a      	cmp	r2, #10
 8080f58:	d102      	bne.n	8080f60 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8080f5a:	2900      	cmp	r1, #0
 8080f5c:	da01      	bge.n	8080f62 <_ZN5Print5printEli+0x24>
 8080f5e:	e004      	b.n	8080f6a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8080f60:	b2d2      	uxtb	r2, r2
  }
}
 8080f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8080f66:	f7ff bfbe 	b.w	8080ee6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8080f6a:	212d      	movs	r1, #45	; 0x2d
 8080f6c:	f7ff ffa2 	bl	8080eb4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8080f70:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8080f72:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8080f74:	4271      	negs	r1, r6
 8080f76:	4638      	mov	r0, r7
 8080f78:	f7ff ffb5 	bl	8080ee6 <_ZN5Print11printNumberEmh>
 8080f7c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08080f84 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080f88:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080f8a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080f8c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080f8e:	4617      	mov	r7, r2
 8080f90:	461e      	mov	r6, r3
 8080f92:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080f96:	f001 f973 	bl	8082280 <__aeabi_dcmpun>
 8080f9a:	b108      	cbz	r0, 8080fa0 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080f9c:	4947      	ldr	r1, [pc, #284]	; (80810bc <_ZN5Print10printFloatEdh+0x138>)
 8080f9e:	e012      	b.n	8080fc6 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8080fa0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8080fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080fa8:	4b45      	ldr	r3, [pc, #276]	; (80810c0 <_ZN5Print10printFloatEdh+0x13c>)
 8080faa:	4638      	mov	r0, r7
 8080fac:	4621      	mov	r1, r4
 8080fae:	f001 f967 	bl	8082280 <__aeabi_dcmpun>
 8080fb2:	b968      	cbnz	r0, 8080fd0 <_ZN5Print10printFloatEdh+0x4c>
 8080fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080fb8:	4b41      	ldr	r3, [pc, #260]	; (80810c0 <_ZN5Print10printFloatEdh+0x13c>)
 8080fba:	4638      	mov	r0, r7
 8080fbc:	4621      	mov	r1, r4
 8080fbe:	f001 f941 	bl	8082244 <__aeabi_dcmple>
 8080fc2:	b928      	cbnz	r0, 8080fd0 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080fc4:	493f      	ldr	r1, [pc, #252]	; (80810c4 <_ZN5Print10printFloatEdh+0x140>)
 8080fc6:	4640      	mov	r0, r8
 8080fc8:	f7ff ff64 	bl	8080e94 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8080fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8080fd0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8080fd4:	4b3c      	ldr	r3, [pc, #240]	; (80810c8 <_ZN5Print10printFloatEdh+0x144>)
 8080fd6:	4638      	mov	r0, r7
 8080fd8:	4631      	mov	r1, r6
 8080fda:	f001 f947 	bl	808226c <__aeabi_dcmpgt>
 8080fde:	b108      	cbz	r0, 8080fe4 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080fe0:	493a      	ldr	r1, [pc, #232]	; (80810cc <_ZN5Print10printFloatEdh+0x148>)
 8080fe2:	e7f0      	b.n	8080fc6 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8080fe4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8080fe8:	4b39      	ldr	r3, [pc, #228]	; (80810d0 <_ZN5Print10printFloatEdh+0x14c>)
 8080fea:	4638      	mov	r0, r7
 8080fec:	4631      	mov	r1, r6
 8080fee:	f001 f91f 	bl	8082230 <__aeabi_dcmplt>
 8080ff2:	2800      	cmp	r0, #0
 8080ff4:	d1f4      	bne.n	8080fe0 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8080ff6:	2200      	movs	r2, #0
 8080ff8:	2300      	movs	r3, #0
 8080ffa:	4638      	mov	r0, r7
 8080ffc:	4631      	mov	r1, r6
 8080ffe:	f001 f917 	bl	8082230 <__aeabi_dcmplt>
 8081002:	b138      	cbz	r0, 8081014 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8081004:	212d      	movs	r1, #45	; 0x2d
 8081006:	4640      	mov	r0, r8
 8081008:	f7ff ff54 	bl	8080eb4 <_ZN5Print5printEc>
     number = -number;
 808100c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8081010:	4604      	mov	r4, r0
 8081012:	e000      	b.n	8081016 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8081014:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8081016:	492f      	ldr	r1, [pc, #188]	; (80810d4 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8081018:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808101c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 808101e:	fa5f f389 	uxtb.w	r3, r9
 8081022:	429d      	cmp	r5, r3
 8081024:	d906      	bls.n	8081034 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8081026:	2200      	movs	r2, #0
 8081028:	4b2b      	ldr	r3, [pc, #172]	; (80810d8 <_ZN5Print10printFloatEdh+0x154>)
 808102a:	f000 ffb9 	bl	8081fa0 <__aeabi_ddiv>
 808102e:	f109 0901 	add.w	r9, r9, #1
 8081032:	e7f4      	b.n	808101e <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8081034:	463a      	mov	r2, r7
 8081036:	4633      	mov	r3, r6
 8081038:	f000 fcd6 	bl	80819e8 <__adddf3>
 808103c:	460f      	mov	r7, r1
 808103e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8081040:	f001 f95c 	bl	80822fc <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8081044:	220a      	movs	r2, #10
 8081046:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8081048:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808104a:	4640      	mov	r0, r8
 808104c:	f7ff ff4b 	bl	8080ee6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8081050:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8081052:	b37d      	cbz	r5, 80810b4 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8081054:	4648      	mov	r0, r9
 8081056:	f000 fe03 	bl	8081c60 <__aeabi_ui2d>
 808105a:	4602      	mov	r2, r0
 808105c:	460b      	mov	r3, r1
 808105e:	4630      	mov	r0, r6
 8081060:	4639      	mov	r1, r7
 8081062:	f000 fcbf 	bl	80819e4 <__aeabi_dsub>
 8081066:	4606      	mov	r6, r0
 8081068:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808106a:	4640      	mov	r0, r8
 808106c:	491b      	ldr	r1, [pc, #108]	; (80810dc <_ZN5Print10printFloatEdh+0x158>)
 808106e:	f7ff ff11 	bl	8080e94 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8081072:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8081074:	4b18      	ldr	r3, [pc, #96]	; (80810d8 <_ZN5Print10printFloatEdh+0x154>)
 8081076:	2200      	movs	r2, #0
 8081078:	4630      	mov	r0, r6
 808107a:	4639      	mov	r1, r7
 808107c:	f000 fe66 	bl	8081d4c <__aeabi_dmul>
 8081080:	460f      	mov	r7, r1
 8081082:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 8081084:	f001 f912 	bl	80822ac <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8081088:	220a      	movs	r2, #10
 808108a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 808108c:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808108e:	4640      	mov	r0, r8
 8081090:	f7ff ff55 	bl	8080f3e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 8081094:	4404      	add	r4, r0
    remainder -= toPrint;
 8081096:	4648      	mov	r0, r9
 8081098:	f000 fdf2 	bl	8081c80 <__aeabi_i2d>
 808109c:	4602      	mov	r2, r0
 808109e:	460b      	mov	r3, r1
 80810a0:	4630      	mov	r0, r6
 80810a2:	4639      	mov	r1, r7
 80810a4:	f000 fc9e 	bl	80819e4 <__aeabi_dsub>
 80810a8:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80810aa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80810ae:	4606      	mov	r6, r0
 80810b0:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80810b2:	d1df      	bne.n	8081074 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80810b4:	4620      	mov	r0, r4
 80810b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80810ba:	bf00      	nop
 80810bc:	08082707 	.word	0x08082707
 80810c0:	7fefffff 	.word	0x7fefffff
 80810c4:	08082711 	.word	0x08082711
 80810c8:	41efffff 	.word	0x41efffff
 80810cc:	0808270b 	.word	0x0808270b
 80810d0:	c1efffff 	.word	0xc1efffff
 80810d4:	3fe00000 	.word	0x3fe00000
 80810d8:	40240000 	.word	0x40240000
 80810dc:	0808270f 	.word	0x0808270f

080810e0 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80810e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80810e2:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80810e6:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80810e8:	9100      	str	r1, [sp, #0]
 80810ea:	f7ff ff4b 	bl	8080f84 <_ZN5Print10printFloatEdh>
 80810ee:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80810f0:	4628      	mov	r0, r5
 80810f2:	f7ff fee2 	bl	8080eba <_ZN5Print7printlnEv>
  return n;
}
 80810f6:	4420      	add	r0, r4
 80810f8:	b003      	add	sp, #12
 80810fa:	bd30      	pop	{r4, r5, pc}

080810fc <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80810fc:	b40c      	push	{r2, r3}
 80810fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081102:	b087      	sub	sp, #28
 8081104:	af00      	add	r7, sp, #0
 8081106:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808110a:	f854 9b04 	ldr.w	r9, [r4], #4
 808110e:	4605      	mov	r5, r0
 8081110:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8081112:	4623      	mov	r3, r4
 8081114:	464a      	mov	r2, r9
 8081116:	2114      	movs	r1, #20
 8081118:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808111a:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 808111c:	f7ff fdd4 	bl	8080cc8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8081120:	2813      	cmp	r0, #19
 8081122:	d805      	bhi.n	8081130 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8081124:	1d39      	adds	r1, r7, #4
 8081126:	4628      	mov	r0, r5
 8081128:	f7ff feb4 	bl	8080e94 <_ZN5Print5writeEPKc>
 808112c:	4604      	mov	r4, r0
 808112e:	e013      	b.n	8081158 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8081130:	f100 0308 	add.w	r3, r0, #8
 8081134:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8081138:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808113a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808113e:	1c41      	adds	r1, r0, #1
 8081140:	4623      	mov	r3, r4
 8081142:	464a      	mov	r2, r9
 8081144:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8081146:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8081148:	f7ff fdbe 	bl	8080cc8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808114c:	4669      	mov	r1, sp
 808114e:	4628      	mov	r0, r5
 8081150:	f7ff fea0 	bl	8080e94 <_ZN5Print5writeEPKc>
 8081154:	4604      	mov	r4, r0
 8081156:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8081158:	b11e      	cbz	r6, 8081162 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808115a:	4628      	mov	r0, r5
 808115c:	f7ff fead 	bl	8080eba <_ZN5Print7printlnEv>
 8081160:	4404      	add	r4, r0
    return n;
}
 8081162:	4620      	mov	r0, r4
 8081164:	371c      	adds	r7, #28
 8081166:	46bd      	mov	sp, r7
 8081168:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808116c:	b002      	add	sp, #8
 808116e:	4770      	bx	lr

08081170 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8081170:	b510      	push	{r4, lr}
 8081172:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081174:	f7ff fdee 	bl	8080d54 <_ZNSt14_Function_baseD1Ev>
 8081178:	4620      	mov	r0, r4
 808117a:	bd10      	pop	{r4, pc}

0808117c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808117c:	4803      	ldr	r0, [pc, #12]	; (808118c <_GLOBAL__sub_I_RGB+0x10>)
 808117e:	2300      	movs	r3, #0
 8081180:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8081182:	4a03      	ldr	r2, [pc, #12]	; (8081190 <_GLOBAL__sub_I_RGB+0x14>)
 8081184:	4903      	ldr	r1, [pc, #12]	; (8081194 <_GLOBAL__sub_I_RGB+0x18>)
 8081186:	f000 badb 	b.w	8081740 <__aeabi_atexit>
 808118a:	bf00      	nop
 808118c:	2000080c 	.word	0x2000080c
 8081190:	20000478 	.word	0x20000478
 8081194:	08081171 	.word	0x08081171

08081198 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081198:	4770      	bx	lr

0808119a <_ZN8SPIClassD0Ev>:
 808119a:	b510      	push	{r4, lr}
 808119c:	4604      	mov	r4, r0
 808119e:	f7fe ff7c 	bl	808009a <_ZdlPv>
 80811a2:	4620      	mov	r0, r4
 80811a4:	bd10      	pop	{r4, pc}
	...

080811a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80811a8:	b570      	push	{r4, r5, r6, lr}
 80811aa:	4604      	mov	r4, r0
 80811ac:	460e      	mov	r6, r1
 80811ae:	4b07      	ldr	r3, [pc, #28]	; (80811cc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80811b0:	2500      	movs	r5, #0
 80811b2:	6003      	str	r3, [r0, #0]
 80811b4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80811b8:	f7ff fc2a 	bl	8080a10 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80811bc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80811be:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80811c0:	f7ff fca6 	bl	8080b10 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80811c4:	60a5      	str	r5, [r4, #8]
}
 80811c6:	4620      	mov	r0, r4
 80811c8:	bd70      	pop	{r4, r5, r6, pc}
 80811ca:	bf00      	nop
 80811cc:	08082720 	.word	0x08082720

080811d0 <_ZN8SPIClass5beginEt>:
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 80811d0:	292e      	cmp	r1, #46	; 0x2e
 80811d2:	d802      	bhi.n	80811da <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 80811d4:	7900      	ldrb	r0, [r0, #4]
 80811d6:	f7ff bc93 	b.w	8080b00 <HAL_SPI_Begin>
 80811da:	4770      	bx	lr

080811dc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80811dc:	7900      	ldrb	r0, [r0, #4]
 80811de:	f7ff bc9f 	b.w	8080b20 <HAL_SPI_Is_Enabled>
	...

080811e4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80811e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80811e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80811ea:	4c0d      	ldr	r4, [pc, #52]	; (8081220 <_GLOBAL__sub_I_System+0x3c>)
 80811ec:	2500      	movs	r5, #0
 80811ee:	8063      	strh	r3, [r4, #2]
 80811f0:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80811f4:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80811f6:	80a3      	strh	r3, [r4, #4]
 80811f8:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80811fa:	f7ff fd21 	bl	8080c40 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80811fe:	a802      	add	r0, sp, #8
 8081200:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081204:	462a      	mov	r2, r5
 8081206:	4629      	mov	r1, r5
 8081208:	f7ff fc0a 	bl	8080a20 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 808120c:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 808120e:	2b1e      	cmp	r3, #30
 8081210:	d104      	bne.n	808121c <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 8081212:	2303      	movs	r3, #3
 8081214:	7023      	strb	r3, [r4, #0]
 8081216:	2311      	movs	r3, #17
 8081218:	8065      	strh	r5, [r4, #2]
 808121a:	80a3      	strh	r3, [r4, #4]
 808121c:	b003      	add	sp, #12
 808121e:	bd30      	pop	{r4, r5, pc}
 8081220:	2000081c 	.word	0x2000081c

08081224 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081224:	4b02      	ldr	r3, [pc, #8]	; (8081230 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081226:	681a      	ldr	r2, [r3, #0]
 8081228:	4b02      	ldr	r3, [pc, #8]	; (8081234 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808122a:	601a      	str	r2, [r3, #0]
 808122c:	4770      	bx	lr
 808122e:	bf00      	nop
 8081230:	2000040c 	.word	0x2000040c
 8081234:	20000824 	.word	0x20000824

08081238 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081238:	7441      	strb	r1, [r0, #17]
 808123a:	4770      	bx	lr

0808123c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 808123c:	7c00      	ldrb	r0, [r0, #16]
 808123e:	f7ff bcaf 	b.w	8080ba0 <HAL_USART_Available_Data_For_Write>

08081242 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8081242:	7c00      	ldrb	r0, [r0, #16]
 8081244:	f7ff bc84 	b.w	8080b50 <HAL_USART_Available_Data>

08081248 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8081248:	7c00      	ldrb	r0, [r0, #16]
 808124a:	f7ff bc91 	b.w	8080b70 <HAL_USART_Peek_Data>

0808124e <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 808124e:	7c00      	ldrb	r0, [r0, #16]
 8081250:	f7ff bc86 	b.w	8080b60 <HAL_USART_Read_Data>

08081254 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8081254:	7c00      	ldrb	r0, [r0, #16]
 8081256:	f7ff bc93 	b.w	8080b80 <HAL_USART_Flush_Data>

0808125a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808125a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808125c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808125e:	4604      	mov	r4, r0
 8081260:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081262:	b925      	cbnz	r5, 808126e <_ZN11USARTSerial5writeEh+0x14>
 8081264:	7c00      	ldrb	r0, [r0, #16]
 8081266:	f7ff fc9b 	bl	8080ba0 <HAL_USART_Available_Data_For_Write>
 808126a:	2800      	cmp	r0, #0
 808126c:	dd05      	ble.n	808127a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808126e:	4631      	mov	r1, r6
 8081270:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081276:	f7ff bc63 	b.w	8080b40 <HAL_USART_Write_Data>
  }
  return 0;
}
 808127a:	4628      	mov	r0, r5
 808127c:	bd70      	pop	{r4, r5, r6, pc}
	...

08081280 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081280:	b510      	push	{r4, lr}
 8081282:	4604      	mov	r4, r0
 8081284:	4608      	mov	r0, r1
 8081286:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081288:	2200      	movs	r2, #0
 808128a:	6062      	str	r2, [r4, #4]
 808128c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081290:	60a2      	str	r2, [r4, #8]
 8081292:	4a05      	ldr	r2, [pc, #20]	; (80812a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8081294:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081296:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8081298:	2201      	movs	r2, #1
 808129a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808129c:	461a      	mov	r2, r3
 808129e:	f7ff fc47 	bl	8080b30 <HAL_USART_Init>
}
 80812a2:	4620      	mov	r0, r4
 80812a4:	bd10      	pop	{r4, pc}
 80812a6:	bf00      	nop
 80812a8:	0808275c 	.word	0x0808275c

080812ac <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80812ac:	2300      	movs	r3, #0
 80812ae:	7c00      	ldrb	r0, [r0, #16]
 80812b0:	f7ff bc7e 	b.w	8080bb0 <HAL_USART_BeginConfig>

080812b4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80812b4:	2200      	movs	r2, #0
 80812b6:	f7ff bff9 	b.w	80812ac <_ZN11USARTSerial5beginEmm>

080812ba <_ZN11USARTSerial5writeEt>:
  return 0;
}

size_t USARTSerial::write(uint16_t c)
{
  return HAL_USART_Write_NineBitData(_serial, c);
 80812ba:	7c00      	ldrb	r0, [r0, #16]
 80812bc:	f7ff bc80 	b.w	8080bc0 <HAL_USART_Write_NineBitData>

080812c0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80812c0:	7c00      	ldrb	r0, [r0, #16]
 80812c2:	f7ff bc65 	b.w	8080b90 <HAL_USART_Is_Enabled>
	...

080812c8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80812c8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80812ca:	4d0c      	ldr	r5, [pc, #48]	; (80812fc <_Z22__fetch_global_Serial1v+0x34>)
 80812cc:	6829      	ldr	r1, [r5, #0]
 80812ce:	f011 0401 	ands.w	r4, r1, #1
 80812d2:	d111      	bne.n	80812f8 <_Z22__fetch_global_Serial1v+0x30>
 80812d4:	4628      	mov	r0, r5
 80812d6:	f7fe fee2 	bl	808009e <__cxa_guard_acquire>
 80812da:	b168      	cbz	r0, 80812f8 <_Z22__fetch_global_Serial1v+0x30>
 80812dc:	4a08      	ldr	r2, [pc, #32]	; (8081300 <_Z22__fetch_global_Serial1v+0x38>)
 80812de:	4621      	mov	r1, r4
 80812e0:	4b08      	ldr	r3, [pc, #32]	; (8081304 <_Z22__fetch_global_Serial1v+0x3c>)
 80812e2:	4809      	ldr	r0, [pc, #36]	; (8081308 <_Z22__fetch_global_Serial1v+0x40>)
 80812e4:	f7ff ffcc 	bl	8081280 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80812e8:	4628      	mov	r0, r5
 80812ea:	f7fe fedd 	bl	80800a8 <__cxa_guard_release>
 80812ee:	4a07      	ldr	r2, [pc, #28]	; (808130c <_Z22__fetch_global_Serial1v+0x44>)
 80812f0:	4907      	ldr	r1, [pc, #28]	; (8081310 <_Z22__fetch_global_Serial1v+0x48>)
 80812f2:	4805      	ldr	r0, [pc, #20]	; (8081308 <_Z22__fetch_global_Serial1v+0x40>)
 80812f4:	f000 fa24 	bl	8081740 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80812f8:	4803      	ldr	r0, [pc, #12]	; (8081308 <_Z22__fetch_global_Serial1v+0x40>)
 80812fa:	bd38      	pop	{r3, r4, r5, pc}
 80812fc:	200008c0 	.word	0x200008c0
 8081300:	200008c4 	.word	0x200008c4
 8081304:	2000083c 	.word	0x2000083c
 8081308:	20000828 	.word	0x20000828
 808130c:	20000478 	.word	0x20000478
 8081310:	080800af 	.word	0x080800af

08081314 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081314:	7441      	strb	r1, [r0, #17]
 8081316:	4770      	bx	lr

08081318 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8081318:	4770      	bx	lr

0808131a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 808131a:	2100      	movs	r1, #0
 808131c:	7c00      	ldrb	r0, [r0, #16]
 808131e:	f7ff bc77 	b.w	8080c10 <HAL_USB_USART_Receive_Data>

08081322 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8081322:	2101      	movs	r1, #1
 8081324:	7c00      	ldrb	r0, [r0, #16]
 8081326:	f7ff bc73 	b.w	8080c10 <HAL_USB_USART_Receive_Data>

0808132a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 808132a:	7c00      	ldrb	r0, [r0, #16]
 808132c:	f7ff bc68 	b.w	8080c00 <HAL_USB_USART_Available_Data_For_Write>

08081330 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8081330:	7c00      	ldrb	r0, [r0, #16]
 8081332:	f7ff bc5d 	b.w	8080bf0 <HAL_USB_USART_Available_Data>

08081336 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8081336:	b538      	push	{r3, r4, r5, lr}
 8081338:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808133a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 808133c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808133e:	f7ff fc5f 	bl	8080c00 <HAL_USB_USART_Available_Data_For_Write>
 8081342:	2800      	cmp	r0, #0
 8081344:	dc01      	bgt.n	808134a <_ZN9USBSerial5writeEh+0x14>
 8081346:	7c60      	ldrb	r0, [r4, #17]
 8081348:	b120      	cbz	r0, 8081354 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 808134a:	4629      	mov	r1, r5
 808134c:	7c20      	ldrb	r0, [r4, #16]
 808134e:	f7ff fc67 	bl	8080c20 <HAL_USB_USART_Send_Data>
    return 1;
 8081352:	2001      	movs	r0, #1
  }
  return 0;
}
 8081354:	bd38      	pop	{r3, r4, r5, pc}

08081356 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8081356:	7c00      	ldrb	r0, [r0, #16]
 8081358:	f7ff bc6a 	b.w	8080c30 <HAL_USB_USART_Flush_Data>

0808135c <_ZN9USBSerialD0Ev>:
 808135c:	b510      	push	{r4, lr}
 808135e:	4604      	mov	r4, r0
 8081360:	f7fe fe9b 	bl	808009a <_ZdlPv>
 8081364:	4620      	mov	r0, r4
 8081366:	bd10      	pop	{r4, pc}

08081368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081368:	b510      	push	{r4, lr}
 808136a:	4604      	mov	r4, r0
 808136c:	2300      	movs	r3, #0
 808136e:	6063      	str	r3, [r4, #4]
 8081370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081374:	60a3      	str	r3, [r4, #8]
 8081376:	4b05      	ldr	r3, [pc, #20]	; (808138c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8081378:	4608      	mov	r0, r1
 808137a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808137c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808137e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081380:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8081382:	4611      	mov	r1, r2
 8081384:	f7ff fc24 	bl	8080bd0 <HAL_USB_USART_Init>
}
 8081388:	4620      	mov	r0, r4
 808138a:	bd10      	pop	{r4, pc}
 808138c:	0808278c 	.word	0x0808278c

08081390 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8081390:	2200      	movs	r2, #0
 8081392:	7c00      	ldrb	r0, [r0, #16]
 8081394:	f7ff bc24 	b.w	8080be0 <HAL_USB_USART_Begin>

08081398 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081398:	b510      	push	{r4, lr}
 808139a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808139c:	2214      	movs	r2, #20
 808139e:	2100      	movs	r1, #0
 80813a0:	f000 ffe9 	bl	8082376 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80813a4:	4b05      	ldr	r3, [pc, #20]	; (80813bc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80813a6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80813a8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80813aa:	4b05      	ldr	r3, [pc, #20]	; (80813c0 <_Z19acquireSerialBufferv+0x28>)
 80813ac:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80813ae:	f240 1301 	movw	r3, #257	; 0x101
 80813b2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80813b4:	2381      	movs	r3, #129	; 0x81
 80813b6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80813b8:	bd10      	pop	{r4, pc}
 80813ba:	bf00      	nop
 80813bc:	200009cd 	.word	0x200009cd
 80813c0:	2000094c 	.word	0x2000094c

080813c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80813c4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80813c6:	4d0e      	ldr	r5, [pc, #56]	; (8081400 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80813c8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80813ca:	a801      	add	r0, sp, #4
 80813cc:	f7ff ffe4 	bl	8081398 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80813d0:	6829      	ldr	r1, [r5, #0]
 80813d2:	f011 0401 	ands.w	r4, r1, #1
 80813d6:	d110      	bne.n	80813fa <_Z16_fetch_usbserialv+0x36>
 80813d8:	4628      	mov	r0, r5
 80813da:	f7fe fe60 	bl	808009e <__cxa_guard_acquire>
 80813de:	b160      	cbz	r0, 80813fa <_Z16_fetch_usbserialv+0x36>
 80813e0:	aa01      	add	r2, sp, #4
 80813e2:	4621      	mov	r1, r4
 80813e4:	4807      	ldr	r0, [pc, #28]	; (8081404 <_Z16_fetch_usbserialv+0x40>)
 80813e6:	f7ff ffbf 	bl	8081368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80813ea:	4628      	mov	r0, r5
 80813ec:	f7fe fe5c 	bl	80800a8 <__cxa_guard_release>
 80813f0:	4a05      	ldr	r2, [pc, #20]	; (8081408 <_Z16_fetch_usbserialv+0x44>)
 80813f2:	4906      	ldr	r1, [pc, #24]	; (808140c <_Z16_fetch_usbserialv+0x48>)
 80813f4:	4803      	ldr	r0, [pc, #12]	; (8081404 <_Z16_fetch_usbserialv+0x40>)
 80813f6:	f000 f9a3 	bl	8081740 <__aeabi_atexit>
	return _usbserial;
}
 80813fa:	4802      	ldr	r0, [pc, #8]	; (8081404 <_Z16_fetch_usbserialv+0x40>)
 80813fc:	b007      	add	sp, #28
 80813fe:	bd30      	pop	{r4, r5, pc}
 8081400:	20000948 	.word	0x20000948
 8081404:	20000ad0 	.word	0x20000ad0
 8081408:	20000478 	.word	0x20000478
 808140c:	08081319 	.word	0x08081319

08081410 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081410:	b510      	push	{r4, lr}
 8081412:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081414:	2214      	movs	r2, #20
 8081416:	2100      	movs	r1, #0
 8081418:	f000 ffad 	bl	8082376 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808141c:	4b05      	ldr	r3, [pc, #20]	; (8081434 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808141e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081420:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081422:	4b05      	ldr	r3, [pc, #20]	; (8081438 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081424:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081426:	f240 1301 	movw	r3, #257	; 0x101
 808142a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808142c:	2381      	movs	r3, #129	; 0x81
 808142e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081430:	bd10      	pop	{r4, pc}
 8081432:	bf00      	nop
 8081434:	20000b80 	.word	0x20000b80
 8081438:	20000ae8 	.word	0x20000ae8

0808143c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808143c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808143e:	4c0e      	ldr	r4, [pc, #56]	; (8081478 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081440:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081442:	a801      	add	r0, sp, #4
 8081444:	f7ff ffe4 	bl	8081410 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081448:	6823      	ldr	r3, [r4, #0]
 808144a:	07db      	lsls	r3, r3, #31
 808144c:	d410      	bmi.n	8081470 <_Z17_fetch_usbserial1v+0x34>
 808144e:	4620      	mov	r0, r4
 8081450:	f7fe fe25 	bl	808009e <__cxa_guard_acquire>
 8081454:	b160      	cbz	r0, 8081470 <_Z17_fetch_usbserial1v+0x34>
 8081456:	aa01      	add	r2, sp, #4
 8081458:	2101      	movs	r1, #1
 808145a:	4808      	ldr	r0, [pc, #32]	; (808147c <_Z17_fetch_usbserial1v+0x40>)
 808145c:	f7ff ff84 	bl	8081368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081460:	4620      	mov	r0, r4
 8081462:	f7fe fe21 	bl	80800a8 <__cxa_guard_release>
 8081466:	4a06      	ldr	r2, [pc, #24]	; (8081480 <_Z17_fetch_usbserial1v+0x44>)
 8081468:	4906      	ldr	r1, [pc, #24]	; (8081484 <_Z17_fetch_usbserial1v+0x48>)
 808146a:	4804      	ldr	r0, [pc, #16]	; (808147c <_Z17_fetch_usbserial1v+0x40>)
 808146c:	f000 f968 	bl	8081740 <__aeabi_atexit>
  return _usbserial1;
}
 8081470:	4802      	ldr	r0, [pc, #8]	; (808147c <_Z17_fetch_usbserial1v+0x40>)
 8081472:	b006      	add	sp, #24
 8081474:	bd10      	pop	{r4, pc}
 8081476:	bf00      	nop
 8081478:	20000ae4 	.word	0x20000ae4
 808147c:	20000b6c 	.word	0x20000b6c
 8081480:	20000478 	.word	0x20000478
 8081484:	08081319 	.word	0x08081319

08081488 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081488:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808148a:	4b18      	ldr	r3, [pc, #96]	; (80814ec <serialEventRun+0x64>)
 808148c:	b133      	cbz	r3, 808149c <serialEventRun+0x14>
 808148e:	f7ff ff99 	bl	80813c4 <_Z16_fetch_usbserialv>
 8081492:	6803      	ldr	r3, [r0, #0]
 8081494:	691b      	ldr	r3, [r3, #16]
 8081496:	4798      	blx	r3
 8081498:	2800      	cmp	r0, #0
 808149a:	dc1e      	bgt.n	80814da <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808149c:	4b14      	ldr	r3, [pc, #80]	; (80814f0 <serialEventRun+0x68>)
 808149e:	b133      	cbz	r3, 80814ae <serialEventRun+0x26>
 80814a0:	f7ff ff12 	bl	80812c8 <_Z22__fetch_global_Serial1v>
 80814a4:	6803      	ldr	r3, [r0, #0]
 80814a6:	691b      	ldr	r3, [r3, #16]
 80814a8:	4798      	blx	r3
 80814aa:	2800      	cmp	r0, #0
 80814ac:	dc18      	bgt.n	80814e0 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80814ae:	4b11      	ldr	r3, [pc, #68]	; (80814f4 <serialEventRun+0x6c>)
 80814b0:	b10b      	cbz	r3, 80814b6 <serialEventRun+0x2e>
 80814b2:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80814b6:	4b10      	ldr	r3, [pc, #64]	; (80814f8 <serialEventRun+0x70>)
 80814b8:	b10b      	cbz	r3, 80814be <serialEventRun+0x36>
 80814ba:	f7fe fe27 	bl	808010c <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80814be:	4b0f      	ldr	r3, [pc, #60]	; (80814fc <serialEventRun+0x74>)
 80814c0:	b10b      	cbz	r3, 80814c6 <serialEventRun+0x3e>
 80814c2:	f7fe fe5d 	bl	8080180 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80814c6:	4b0e      	ldr	r3, [pc, #56]	; (8081500 <serialEventRun+0x78>)
 80814c8:	b17b      	cbz	r3, 80814ea <serialEventRun+0x62>
 80814ca:	f7ff ffb7 	bl	808143c <_Z17_fetch_usbserial1v>
 80814ce:	6803      	ldr	r3, [r0, #0]
 80814d0:	691b      	ldr	r3, [r3, #16]
 80814d2:	4798      	blx	r3
 80814d4:	2800      	cmp	r0, #0
 80814d6:	dc06      	bgt.n	80814e6 <serialEventRun+0x5e>
 80814d8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80814da:	f3af 8000 	nop.w
 80814de:	e7dd      	b.n	808149c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80814e0:	f3af 8000 	nop.w
 80814e4:	e7e3      	b.n	80814ae <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80814e6:	f3af 8000 	nop.w
 80814ea:	bd08      	pop	{r3, pc}
	...
 80814f8:	0808010d 	.word	0x0808010d
 80814fc:	08080181 	.word	0x08080181
 8081500:	00000000 	.word	0x00000000

08081504 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8081504:	b508      	push	{r3, lr}
	serialEventRun();
 8081506:	f7ff ffbf 	bl	8081488 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808150a:	f7ff fa99 	bl	8080a40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808150e:	4b01      	ldr	r3, [pc, #4]	; (8081514 <_post_loop+0x10>)
 8081510:	6018      	str	r0, [r3, #0]
 8081512:	bd08      	pop	{r3, pc}
 8081514:	20000c8c 	.word	0x20000c8c

08081518 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081518:	4802      	ldr	r0, [pc, #8]	; (8081524 <_Z33system_initialize_user_backup_ramv+0xc>)
 808151a:	4a03      	ldr	r2, [pc, #12]	; (8081528 <_Z33system_initialize_user_backup_ramv+0x10>)
 808151c:	4903      	ldr	r1, [pc, #12]	; (808152c <_Z33system_initialize_user_backup_ramv+0x14>)
 808151e:	1a12      	subs	r2, r2, r0
 8081520:	f000 bf1e 	b.w	8082360 <memcpy>
 8081524:	40024000 	.word	0x40024000
 8081528:	40024004 	.word	0x40024004
 808152c:	08082950 	.word	0x08082950

08081530 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081530:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081532:	2300      	movs	r3, #0
 8081534:	9300      	str	r3, [sp, #0]
 8081536:	461a      	mov	r2, r3
 8081538:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808153c:	f7ff fb9a 	bl	8080c74 <system_ctrl_set_result>
}
 8081540:	b003      	add	sp, #12
 8081542:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081548 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081548:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808154a:	8843      	ldrh	r3, [r0, #2]
 808154c:	2b0a      	cmp	r3, #10
 808154e:	d008      	beq.n	8081562 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081550:	2b50      	cmp	r3, #80	; 0x50
 8081552:	d109      	bne.n	8081568 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081554:	4b09      	ldr	r3, [pc, #36]	; (808157c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081556:	681b      	ldr	r3, [r3, #0]
 8081558:	b13b      	cbz	r3, 808156a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808155a:	b003      	add	sp, #12
 808155c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8081560:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8081562:	f7ff ffe5 	bl	8081530 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8081566:	e006      	b.n	8081576 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081568:	2300      	movs	r3, #0
 808156a:	9300      	str	r3, [sp, #0]
 808156c:	461a      	mov	r2, r3
 808156e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081572:	f7ff fb7f 	bl	8080c74 <system_ctrl_set_result>
        break;
    }
}
 8081576:	b003      	add	sp, #12
 8081578:	f85d fb04 	ldr.w	pc, [sp], #4
 808157c:	20000c84 	.word	0x20000c84

08081580 <module_user_init_hook>:

void module_user_init_hook()
{
 8081580:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081582:	4c10      	ldr	r4, [pc, #64]	; (80815c4 <module_user_init_hook+0x44>)
 8081584:	4d10      	ldr	r5, [pc, #64]	; (80815c8 <module_user_init_hook+0x48>)
 8081586:	6823      	ldr	r3, [r4, #0]
 8081588:	42ab      	cmp	r3, r5
 808158a:	4b10      	ldr	r3, [pc, #64]	; (80815cc <module_user_init_hook+0x4c>)
 808158c:	bf0c      	ite	eq
 808158e:	2201      	moveq	r2, #1
 8081590:	2200      	movne	r2, #0
 8081592:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081594:	d002      	beq.n	808159c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8081596:	f7ff ffbf 	bl	8081518 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808159a:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 808159c:	f7ff fa48 	bl	8080a30 <HAL_RNG_GetRandomNumber>
 80815a0:	f000 fef2 	bl	8082388 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80815a4:	4b0a      	ldr	r3, [pc, #40]	; (80815d0 <module_user_init_hook+0x50>)
 80815a6:	b11b      	cbz	r3, 80815b0 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80815a8:	f7ff fa42 	bl	8080a30 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80815ac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80815b0:	2100      	movs	r1, #0
 80815b2:	4807      	ldr	r0, [pc, #28]	; (80815d0 <module_user_init_hook+0x50>)
 80815b4:	f7ff fb68 	bl	8080c88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80815b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80815bc:	2100      	movs	r1, #0
 80815be:	4805      	ldr	r0, [pc, #20]	; (80815d4 <module_user_init_hook+0x54>)
 80815c0:	f7ff bb4e 	b.w	8080c60 <system_ctrl_set_app_request_handler>
 80815c4:	40024000 	.word	0x40024000
 80815c8:	9a271c1e 	.word	0x9a271c1e
 80815cc:	20000c88 	.word	0x20000c88
 80815d0:	00000000 	.word	0x00000000
 80815d4:	08081549 	.word	0x08081549

080815d8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80815d8:	b510      	push	{r4, lr}
 80815da:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80815dc:	480f      	ldr	r0, [pc, #60]	; (808161c <pinAvailable+0x44>)
 80815de:	f7ff fdfd 	bl	80811dc <_ZN8SPIClass9isEnabledEv>
 80815e2:	b128      	cbz	r0, 80815f0 <pinAvailable+0x18>
 80815e4:	f1a4 030d 	sub.w	r3, r4, #13
 80815e8:	2b02      	cmp	r3, #2
 80815ea:	d801      	bhi.n	80815f0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80815ec:	2000      	movs	r0, #0
 80815ee:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80815f0:	f000 f840 	bl	8081674 <_Z19__fetch_global_Wirev>
 80815f4:	f7ff fbf4 	bl	8080de0 <_ZN7TwoWire9isEnabledEv>
 80815f8:	b108      	cbz	r0, 80815fe <pinAvailable+0x26>
 80815fa:	2c01      	cmp	r4, #1
 80815fc:	d9f6      	bls.n	80815ec <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80815fe:	f7ff fe63 	bl	80812c8 <_Z22__fetch_global_Serial1v>
 8081602:	f7ff fe5d 	bl	80812c0 <_ZN11USARTSerial9isEnabledEv>
 8081606:	b118      	cbz	r0, 8081610 <pinAvailable+0x38>
 8081608:	f1a4 0312 	sub.w	r3, r4, #18
 808160c:	2b01      	cmp	r3, #1
 808160e:	d9ed      	bls.n	80815ec <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8081610:	2c2e      	cmp	r4, #46	; 0x2e
 8081612:	bf8c      	ite	hi
 8081614:	2000      	movhi	r0, #0
 8081616:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8081618:	bd10      	pop	{r4, pc}
 808161a:	bf00      	nop
 808161c:	20000cb0 	.word	0x20000cb0

08081620 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081620:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8081622:	b538      	push	{r3, r4, r5, lr}
 8081624:	4604      	mov	r4, r0
 8081626:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081628:	d80a      	bhi.n	8081640 <pinMode+0x20>
 808162a:	29ff      	cmp	r1, #255	; 0xff
 808162c:	d008      	beq.n	8081640 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808162e:	f7ff ffd3 	bl	80815d8 <pinAvailable>
 8081632:	b128      	cbz	r0, 8081640 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8081634:	4629      	mov	r1, r5
 8081636:	4620      	mov	r0, r4
}
 8081638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808163c:	f7ff ba10 	b.w	8080a60 <HAL_Pin_Mode>
 8081640:	bd38      	pop	{r3, r4, r5, pc}

08081642 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8081642:	b538      	push	{r3, r4, r5, lr}
 8081644:	4604      	mov	r4, r0
 8081646:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081648:	f7ff fa12 	bl	8080a70 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808164c:	28ff      	cmp	r0, #255	; 0xff
 808164e:	d010      	beq.n	8081672 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8081650:	2806      	cmp	r0, #6
 8081652:	d804      	bhi.n	808165e <digitalWrite+0x1c>
 8081654:	234d      	movs	r3, #77	; 0x4d
 8081656:	fa23 f000 	lsr.w	r0, r3, r0
 808165a:	07c3      	lsls	r3, r0, #31
 808165c:	d409      	bmi.n	8081672 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808165e:	4620      	mov	r0, r4
 8081660:	f7ff ffba 	bl	80815d8 <pinAvailable>
 8081664:	b128      	cbz	r0, 8081672 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8081666:	4629      	mov	r1, r5
 8081668:	4620      	mov	r0, r4
}
 808166a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808166e:	f7ff ba07 	b.w	8080a80 <HAL_GPIO_Write>
 8081672:	bd38      	pop	{r3, r4, r5, pc}

08081674 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8081674:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8081676:	4d0b      	ldr	r5, [pc, #44]	; (80816a4 <_Z19__fetch_global_Wirev+0x30>)
 8081678:	6829      	ldr	r1, [r5, #0]
 808167a:	f011 0401 	ands.w	r4, r1, #1
 808167e:	d10f      	bne.n	80816a0 <_Z19__fetch_global_Wirev+0x2c>
 8081680:	4628      	mov	r0, r5
 8081682:	f7fe fd0c 	bl	808009e <__cxa_guard_acquire>
 8081686:	b158      	cbz	r0, 80816a0 <_Z19__fetch_global_Wirev+0x2c>
 8081688:	4621      	mov	r1, r4
 808168a:	4807      	ldr	r0, [pc, #28]	; (80816a8 <_Z19__fetch_global_Wirev+0x34>)
 808168c:	f7ff fb96 	bl	8080dbc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8081690:	4628      	mov	r0, r5
 8081692:	f7fe fd09 	bl	80800a8 <__cxa_guard_release>
 8081696:	4a05      	ldr	r2, [pc, #20]	; (80816ac <_Z19__fetch_global_Wirev+0x38>)
 8081698:	4905      	ldr	r1, [pc, #20]	; (80816b0 <_Z19__fetch_global_Wirev+0x3c>)
 808169a:	4803      	ldr	r0, [pc, #12]	; (80816a8 <_Z19__fetch_global_Wirev+0x34>)
 808169c:	f000 f850 	bl	8081740 <__aeabi_atexit>
	return wire;
}
 80816a0:	4801      	ldr	r0, [pc, #4]	; (80816a8 <_Z19__fetch_global_Wirev+0x34>)
 80816a2:	bd38      	pop	{r3, r4, r5, pc}
 80816a4:	20000c90 	.word	0x20000c90
 80816a8:	20000c94 	.word	0x20000c94
 80816ac:	20000478 	.word	0x20000478
 80816b0:	08080d67 	.word	0x08080d67

080816b4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80816b4:	b513      	push	{r0, r1, r4, lr}
 80816b6:	4c08      	ldr	r4, [pc, #32]	; (80816d8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80816b8:	2300      	movs	r3, #0
 80816ba:	461a      	mov	r2, r3
 80816bc:	4619      	mov	r1, r3
 80816be:	9300      	str	r3, [sp, #0]
 80816c0:	4620      	mov	r0, r4
 80816c2:	f7ff fbbd 	bl	8080e40 <_ZN9IPAddressC1Ehhhh>
 80816c6:	4620      	mov	r0, r4
 80816c8:	4a04      	ldr	r2, [pc, #16]	; (80816dc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80816ca:	4905      	ldr	r1, [pc, #20]	; (80816e0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80816cc:	b002      	add	sp, #8
 80816ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80816d2:	f000 b835 	b.w	8081740 <__aeabi_atexit>
 80816d6:	bf00      	nop
 80816d8:	20000ca8 	.word	0x20000ca8
 80816dc:	20000478 	.word	0x20000478
 80816e0:	08080de9 	.word	0x08080de9

080816e4 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80816e4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80816e6:	4e11      	ldr	r6, [pc, #68]	; (808172c <_GLOBAL__sub_I_SPI+0x48>)
 80816e8:	4d11      	ldr	r5, [pc, #68]	; (8081730 <_GLOBAL__sub_I_SPI+0x4c>)
 80816ea:	4c12      	ldr	r4, [pc, #72]	; (8081734 <_GLOBAL__sub_I_SPI+0x50>)
 80816ec:	2100      	movs	r1, #0
 80816ee:	4630      	mov	r0, r6
 80816f0:	f7ff fd5a 	bl	80811a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80816f4:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80816f6:	4e10      	ldr	r6, [pc, #64]	; (8081738 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80816f8:	462a      	mov	r2, r5
 80816fa:	4621      	mov	r1, r4
 80816fc:	f000 f820 	bl	8081740 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081700:	2101      	movs	r1, #1
 8081702:	4630      	mov	r0, r6
 8081704:	f7ff fd50 	bl	80811a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081708:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808170a:	4e0c      	ldr	r6, [pc, #48]	; (808173c <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808170c:	462a      	mov	r2, r5
 808170e:	4621      	mov	r1, r4
 8081710:	f000 f816 	bl	8081740 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081714:	2102      	movs	r1, #2
 8081716:	4630      	mov	r0, r6
 8081718:	f7ff fd46 	bl	80811a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808171c:	462a      	mov	r2, r5
 808171e:	4621      	mov	r1, r4
 8081720:	4630      	mov	r0, r6
 8081722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081726:	f000 b80b 	b.w	8081740 <__aeabi_atexit>
 808172a:	bf00      	nop
 808172c:	20000cb0 	.word	0x20000cb0
 8081730:	20000478 	.word	0x20000478
 8081734:	08081199 	.word	0x08081199
 8081738:	20000cc0 	.word	0x20000cc0
 808173c:	20000cd0 	.word	0x20000cd0

08081740 <__aeabi_atexit>:
 8081740:	460b      	mov	r3, r1
 8081742:	4601      	mov	r1, r0
 8081744:	4618      	mov	r0, r3
 8081746:	f000 bdfd 	b.w	8082344 <__cxa_atexit>
	...

0808174c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808174c:	4b24      	ldr	r3, [pc, #144]	; (80817e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808174e:	681a      	ldr	r2, [r3, #0]
 8081750:	07d0      	lsls	r0, r2, #31
 8081752:	bf5c      	itt	pl
 8081754:	2201      	movpl	r2, #1
 8081756:	601a      	strpl	r2, [r3, #0]
 8081758:	4b22      	ldr	r3, [pc, #136]	; (80817e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808175a:	681a      	ldr	r2, [r3, #0]
 808175c:	07d1      	lsls	r1, r2, #31
 808175e:	bf5c      	itt	pl
 8081760:	2201      	movpl	r2, #1
 8081762:	601a      	strpl	r2, [r3, #0]
 8081764:	4b20      	ldr	r3, [pc, #128]	; (80817e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8081766:	681a      	ldr	r2, [r3, #0]
 8081768:	07d2      	lsls	r2, r2, #31
 808176a:	bf5c      	itt	pl
 808176c:	2201      	movpl	r2, #1
 808176e:	601a      	strpl	r2, [r3, #0]
 8081770:	4b1e      	ldr	r3, [pc, #120]	; (80817ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8081772:	681a      	ldr	r2, [r3, #0]
 8081774:	07d0      	lsls	r0, r2, #31
 8081776:	bf5c      	itt	pl
 8081778:	2201      	movpl	r2, #1
 808177a:	601a      	strpl	r2, [r3, #0]
 808177c:	4b1c      	ldr	r3, [pc, #112]	; (80817f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808177e:	681a      	ldr	r2, [r3, #0]
 8081780:	07d1      	lsls	r1, r2, #31
 8081782:	bf5c      	itt	pl
 8081784:	2201      	movpl	r2, #1
 8081786:	601a      	strpl	r2, [r3, #0]
 8081788:	4b1a      	ldr	r3, [pc, #104]	; (80817f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808178a:	681a      	ldr	r2, [r3, #0]
 808178c:	07d2      	lsls	r2, r2, #31
 808178e:	bf5c      	itt	pl
 8081790:	2201      	movpl	r2, #1
 8081792:	601a      	strpl	r2, [r3, #0]
 8081794:	4b18      	ldr	r3, [pc, #96]	; (80817f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8081796:	681a      	ldr	r2, [r3, #0]
 8081798:	07d0      	lsls	r0, r2, #31
 808179a:	bf5c      	itt	pl
 808179c:	2201      	movpl	r2, #1
 808179e:	601a      	strpl	r2, [r3, #0]
 80817a0:	4b16      	ldr	r3, [pc, #88]	; (80817fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80817a2:	681a      	ldr	r2, [r3, #0]
 80817a4:	07d1      	lsls	r1, r2, #31
 80817a6:	bf5c      	itt	pl
 80817a8:	2201      	movpl	r2, #1
 80817aa:	601a      	strpl	r2, [r3, #0]
 80817ac:	4b14      	ldr	r3, [pc, #80]	; (8081800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80817ae:	681a      	ldr	r2, [r3, #0]
 80817b0:	07d2      	lsls	r2, r2, #31
 80817b2:	bf5c      	itt	pl
 80817b4:	2201      	movpl	r2, #1
 80817b6:	601a      	strpl	r2, [r3, #0]
 80817b8:	4b12      	ldr	r3, [pc, #72]	; (8081804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80817ba:	681a      	ldr	r2, [r3, #0]
 80817bc:	07d0      	lsls	r0, r2, #31
 80817be:	bf5c      	itt	pl
 80817c0:	2201      	movpl	r2, #1
 80817c2:	601a      	strpl	r2, [r3, #0]
 80817c4:	4b10      	ldr	r3, [pc, #64]	; (8081808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80817c6:	681a      	ldr	r2, [r3, #0]
 80817c8:	07d1      	lsls	r1, r2, #31
 80817ca:	bf5c      	itt	pl
 80817cc:	2201      	movpl	r2, #1
 80817ce:	601a      	strpl	r2, [r3, #0]
 80817d0:	4b0e      	ldr	r3, [pc, #56]	; (808180c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80817d2:	681a      	ldr	r2, [r3, #0]
 80817d4:	07d2      	lsls	r2, r2, #31
 80817d6:	bf5c      	itt	pl
 80817d8:	2201      	movpl	r2, #1
 80817da:	601a      	strpl	r2, [r3, #0]
 80817dc:	4770      	bx	lr
 80817de:	bf00      	nop
 80817e0:	20000d0c 	.word	0x20000d0c
 80817e4:	20000d08 	.word	0x20000d08
 80817e8:	20000d04 	.word	0x20000d04
 80817ec:	20000d00 	.word	0x20000d00
 80817f0:	20000cfc 	.word	0x20000cfc
 80817f4:	20000cf8 	.word	0x20000cf8
 80817f8:	20000cf4 	.word	0x20000cf4
 80817fc:	20000cf0 	.word	0x20000cf0
 8081800:	20000cec 	.word	0x20000cec
 8081804:	20000ce8 	.word	0x20000ce8
 8081808:	20000ce4 	.word	0x20000ce4
 808180c:	20000ce0 	.word	0x20000ce0

08081810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081810:	4b18      	ldr	r3, [pc, #96]	; (8081874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081812:	681a      	ldr	r2, [r3, #0]
 8081814:	07d1      	lsls	r1, r2, #31
 8081816:	bf5c      	itt	pl
 8081818:	2201      	movpl	r2, #1
 808181a:	601a      	strpl	r2, [r3, #0]
 808181c:	4b16      	ldr	r3, [pc, #88]	; (8081878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808181e:	681a      	ldr	r2, [r3, #0]
 8081820:	07d2      	lsls	r2, r2, #31
 8081822:	bf5c      	itt	pl
 8081824:	2201      	movpl	r2, #1
 8081826:	601a      	strpl	r2, [r3, #0]
 8081828:	4b14      	ldr	r3, [pc, #80]	; (808187c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808182a:	681a      	ldr	r2, [r3, #0]
 808182c:	07d0      	lsls	r0, r2, #31
 808182e:	bf5c      	itt	pl
 8081830:	2201      	movpl	r2, #1
 8081832:	601a      	strpl	r2, [r3, #0]
 8081834:	4b12      	ldr	r3, [pc, #72]	; (8081880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081836:	681a      	ldr	r2, [r3, #0]
 8081838:	07d1      	lsls	r1, r2, #31
 808183a:	bf5c      	itt	pl
 808183c:	2201      	movpl	r2, #1
 808183e:	601a      	strpl	r2, [r3, #0]
 8081840:	4b10      	ldr	r3, [pc, #64]	; (8081884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081842:	681a      	ldr	r2, [r3, #0]
 8081844:	07d2      	lsls	r2, r2, #31
 8081846:	bf5c      	itt	pl
 8081848:	2201      	movpl	r2, #1
 808184a:	601a      	strpl	r2, [r3, #0]
 808184c:	4b0e      	ldr	r3, [pc, #56]	; (8081888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808184e:	681a      	ldr	r2, [r3, #0]
 8081850:	07d0      	lsls	r0, r2, #31
 8081852:	bf5c      	itt	pl
 8081854:	2201      	movpl	r2, #1
 8081856:	601a      	strpl	r2, [r3, #0]
 8081858:	4b0c      	ldr	r3, [pc, #48]	; (808188c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808185a:	681a      	ldr	r2, [r3, #0]
 808185c:	07d1      	lsls	r1, r2, #31
 808185e:	bf5c      	itt	pl
 8081860:	2201      	movpl	r2, #1
 8081862:	601a      	strpl	r2, [r3, #0]
 8081864:	4b0a      	ldr	r3, [pc, #40]	; (8081890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081866:	681a      	ldr	r2, [r3, #0]
 8081868:	07d2      	lsls	r2, r2, #31
 808186a:	bf5c      	itt	pl
 808186c:	2201      	movpl	r2, #1
 808186e:	601a      	strpl	r2, [r3, #0]
 8081870:	4770      	bx	lr
 8081872:	bf00      	nop
 8081874:	20000d2c 	.word	0x20000d2c
 8081878:	20000d28 	.word	0x20000d28
 808187c:	20000d24 	.word	0x20000d24
 8081880:	20000d20 	.word	0x20000d20
 8081884:	20000d1c 	.word	0x20000d1c
 8081888:	20000d18 	.word	0x20000d18
 808188c:	20000d14 	.word	0x20000d14
 8081890:	20000d10 	.word	0x20000d10

08081894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081894:	4b18      	ldr	r3, [pc, #96]	; (80818f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081896:	681a      	ldr	r2, [r3, #0]
 8081898:	07d1      	lsls	r1, r2, #31
 808189a:	bf5c      	itt	pl
 808189c:	2201      	movpl	r2, #1
 808189e:	601a      	strpl	r2, [r3, #0]
 80818a0:	4b16      	ldr	r3, [pc, #88]	; (80818fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80818a2:	681a      	ldr	r2, [r3, #0]
 80818a4:	07d2      	lsls	r2, r2, #31
 80818a6:	bf5c      	itt	pl
 80818a8:	2201      	movpl	r2, #1
 80818aa:	601a      	strpl	r2, [r3, #0]
 80818ac:	4b14      	ldr	r3, [pc, #80]	; (8081900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80818ae:	681a      	ldr	r2, [r3, #0]
 80818b0:	07d0      	lsls	r0, r2, #31
 80818b2:	bf5c      	itt	pl
 80818b4:	2201      	movpl	r2, #1
 80818b6:	601a      	strpl	r2, [r3, #0]
 80818b8:	4b12      	ldr	r3, [pc, #72]	; (8081904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80818ba:	681a      	ldr	r2, [r3, #0]
 80818bc:	07d1      	lsls	r1, r2, #31
 80818be:	bf5c      	itt	pl
 80818c0:	2201      	movpl	r2, #1
 80818c2:	601a      	strpl	r2, [r3, #0]
 80818c4:	4b10      	ldr	r3, [pc, #64]	; (8081908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80818c6:	681a      	ldr	r2, [r3, #0]
 80818c8:	07d2      	lsls	r2, r2, #31
 80818ca:	bf5c      	itt	pl
 80818cc:	2201      	movpl	r2, #1
 80818ce:	601a      	strpl	r2, [r3, #0]
 80818d0:	4b0e      	ldr	r3, [pc, #56]	; (808190c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80818d2:	681a      	ldr	r2, [r3, #0]
 80818d4:	07d0      	lsls	r0, r2, #31
 80818d6:	bf5c      	itt	pl
 80818d8:	2201      	movpl	r2, #1
 80818da:	601a      	strpl	r2, [r3, #0]
 80818dc:	4b0c      	ldr	r3, [pc, #48]	; (8081910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80818de:	681a      	ldr	r2, [r3, #0]
 80818e0:	07d1      	lsls	r1, r2, #31
 80818e2:	bf5c      	itt	pl
 80818e4:	2201      	movpl	r2, #1
 80818e6:	601a      	strpl	r2, [r3, #0]
 80818e8:	4b0a      	ldr	r3, [pc, #40]	; (8081914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80818ea:	681a      	ldr	r2, [r3, #0]
 80818ec:	07d2      	lsls	r2, r2, #31
 80818ee:	bf5c      	itt	pl
 80818f0:	2201      	movpl	r2, #1
 80818f2:	601a      	strpl	r2, [r3, #0]
 80818f4:	4770      	bx	lr
 80818f6:	bf00      	nop
 80818f8:	20000d4c 	.word	0x20000d4c
 80818fc:	20000d48 	.word	0x20000d48
 8081900:	20000d44 	.word	0x20000d44
 8081904:	20000d40 	.word	0x20000d40
 8081908:	20000d3c 	.word	0x20000d3c
 808190c:	20000d38 	.word	0x20000d38
 8081910:	20000d34 	.word	0x20000d34
 8081914:	20000d30 	.word	0x20000d30

08081918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8081918:	4b24      	ldr	r3, [pc, #144]	; (80819ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808191a:	681a      	ldr	r2, [r3, #0]
 808191c:	07d0      	lsls	r0, r2, #31
 808191e:	bf5c      	itt	pl
 8081920:	2201      	movpl	r2, #1
 8081922:	601a      	strpl	r2, [r3, #0]
 8081924:	4b22      	ldr	r3, [pc, #136]	; (80819b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8081926:	681a      	ldr	r2, [r3, #0]
 8081928:	07d1      	lsls	r1, r2, #31
 808192a:	bf5c      	itt	pl
 808192c:	2201      	movpl	r2, #1
 808192e:	601a      	strpl	r2, [r3, #0]
 8081930:	4b20      	ldr	r3, [pc, #128]	; (80819b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8081932:	681a      	ldr	r2, [r3, #0]
 8081934:	07d2      	lsls	r2, r2, #31
 8081936:	bf5c      	itt	pl
 8081938:	2201      	movpl	r2, #1
 808193a:	601a      	strpl	r2, [r3, #0]
 808193c:	4b1e      	ldr	r3, [pc, #120]	; (80819b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808193e:	681a      	ldr	r2, [r3, #0]
 8081940:	07d0      	lsls	r0, r2, #31
 8081942:	bf5c      	itt	pl
 8081944:	2201      	movpl	r2, #1
 8081946:	601a      	strpl	r2, [r3, #0]
 8081948:	4b1c      	ldr	r3, [pc, #112]	; (80819bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808194a:	681a      	ldr	r2, [r3, #0]
 808194c:	07d1      	lsls	r1, r2, #31
 808194e:	bf5c      	itt	pl
 8081950:	2201      	movpl	r2, #1
 8081952:	601a      	strpl	r2, [r3, #0]
 8081954:	4b1a      	ldr	r3, [pc, #104]	; (80819c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8081956:	681a      	ldr	r2, [r3, #0]
 8081958:	07d2      	lsls	r2, r2, #31
 808195a:	bf5c      	itt	pl
 808195c:	2201      	movpl	r2, #1
 808195e:	601a      	strpl	r2, [r3, #0]
 8081960:	4b18      	ldr	r3, [pc, #96]	; (80819c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8081962:	681a      	ldr	r2, [r3, #0]
 8081964:	07d0      	lsls	r0, r2, #31
 8081966:	bf5c      	itt	pl
 8081968:	2201      	movpl	r2, #1
 808196a:	601a      	strpl	r2, [r3, #0]
 808196c:	4b16      	ldr	r3, [pc, #88]	; (80819c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808196e:	681a      	ldr	r2, [r3, #0]
 8081970:	07d1      	lsls	r1, r2, #31
 8081972:	bf5c      	itt	pl
 8081974:	2201      	movpl	r2, #1
 8081976:	601a      	strpl	r2, [r3, #0]
 8081978:	4b14      	ldr	r3, [pc, #80]	; (80819cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808197a:	681a      	ldr	r2, [r3, #0]
 808197c:	07d2      	lsls	r2, r2, #31
 808197e:	bf5c      	itt	pl
 8081980:	2201      	movpl	r2, #1
 8081982:	601a      	strpl	r2, [r3, #0]
 8081984:	4b12      	ldr	r3, [pc, #72]	; (80819d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8081986:	681a      	ldr	r2, [r3, #0]
 8081988:	07d0      	lsls	r0, r2, #31
 808198a:	bf5c      	itt	pl
 808198c:	2201      	movpl	r2, #1
 808198e:	601a      	strpl	r2, [r3, #0]
 8081990:	4b10      	ldr	r3, [pc, #64]	; (80819d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8081992:	681a      	ldr	r2, [r3, #0]
 8081994:	07d1      	lsls	r1, r2, #31
 8081996:	bf5c      	itt	pl
 8081998:	2201      	movpl	r2, #1
 808199a:	601a      	strpl	r2, [r3, #0]
 808199c:	4b0e      	ldr	r3, [pc, #56]	; (80819d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808199e:	681a      	ldr	r2, [r3, #0]
 80819a0:	07d2      	lsls	r2, r2, #31
 80819a2:	bf5c      	itt	pl
 80819a4:	2201      	movpl	r2, #1
 80819a6:	601a      	strpl	r2, [r3, #0]
 80819a8:	4770      	bx	lr
 80819aa:	bf00      	nop
 80819ac:	20000d7c 	.word	0x20000d7c
 80819b0:	20000d78 	.word	0x20000d78
 80819b4:	20000d74 	.word	0x20000d74
 80819b8:	20000d70 	.word	0x20000d70
 80819bc:	20000d6c 	.word	0x20000d6c
 80819c0:	20000d68 	.word	0x20000d68
 80819c4:	20000d64 	.word	0x20000d64
 80819c8:	20000d60 	.word	0x20000d60
 80819cc:	20000d5c 	.word	0x20000d5c
 80819d0:	20000d58 	.word	0x20000d58
 80819d4:	20000d54 	.word	0x20000d54
 80819d8:	20000d50 	.word	0x20000d50

080819dc <__aeabi_drsub>:
 80819dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80819e0:	e002      	b.n	80819e8 <__adddf3>
 80819e2:	bf00      	nop

080819e4 <__aeabi_dsub>:
 80819e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080819e8 <__adddf3>:
 80819e8:	b530      	push	{r4, r5, lr}
 80819ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80819ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80819f2:	ea94 0f05 	teq	r4, r5
 80819f6:	bf08      	it	eq
 80819f8:	ea90 0f02 	teqeq	r0, r2
 80819fc:	bf1f      	itttt	ne
 80819fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8081a02:	ea55 0c02 	orrsne.w	ip, r5, r2
 8081a06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8081a0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081a0e:	f000 80e2 	beq.w	8081bd6 <__adddf3+0x1ee>
 8081a12:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8081a16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8081a1a:	bfb8      	it	lt
 8081a1c:	426d      	neglt	r5, r5
 8081a1e:	dd0c      	ble.n	8081a3a <__adddf3+0x52>
 8081a20:	442c      	add	r4, r5
 8081a22:	ea80 0202 	eor.w	r2, r0, r2
 8081a26:	ea81 0303 	eor.w	r3, r1, r3
 8081a2a:	ea82 0000 	eor.w	r0, r2, r0
 8081a2e:	ea83 0101 	eor.w	r1, r3, r1
 8081a32:	ea80 0202 	eor.w	r2, r0, r2
 8081a36:	ea81 0303 	eor.w	r3, r1, r3
 8081a3a:	2d36      	cmp	r5, #54	; 0x36
 8081a3c:	bf88      	it	hi
 8081a3e:	bd30      	pophi	{r4, r5, pc}
 8081a40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8081a44:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8081a48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8081a4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8081a50:	d002      	beq.n	8081a58 <__adddf3+0x70>
 8081a52:	4240      	negs	r0, r0
 8081a54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081a58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8081a5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081a60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8081a64:	d002      	beq.n	8081a6c <__adddf3+0x84>
 8081a66:	4252      	negs	r2, r2
 8081a68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8081a6c:	ea94 0f05 	teq	r4, r5
 8081a70:	f000 80a7 	beq.w	8081bc2 <__adddf3+0x1da>
 8081a74:	f1a4 0401 	sub.w	r4, r4, #1
 8081a78:	f1d5 0e20 	rsbs	lr, r5, #32
 8081a7c:	db0d      	blt.n	8081a9a <__adddf3+0xb2>
 8081a7e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8081a82:	fa22 f205 	lsr.w	r2, r2, r5
 8081a86:	1880      	adds	r0, r0, r2
 8081a88:	f141 0100 	adc.w	r1, r1, #0
 8081a8c:	fa03 f20e 	lsl.w	r2, r3, lr
 8081a90:	1880      	adds	r0, r0, r2
 8081a92:	fa43 f305 	asr.w	r3, r3, r5
 8081a96:	4159      	adcs	r1, r3
 8081a98:	e00e      	b.n	8081ab8 <__adddf3+0xd0>
 8081a9a:	f1a5 0520 	sub.w	r5, r5, #32
 8081a9e:	f10e 0e20 	add.w	lr, lr, #32
 8081aa2:	2a01      	cmp	r2, #1
 8081aa4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8081aa8:	bf28      	it	cs
 8081aaa:	f04c 0c02 	orrcs.w	ip, ip, #2
 8081aae:	fa43 f305 	asr.w	r3, r3, r5
 8081ab2:	18c0      	adds	r0, r0, r3
 8081ab4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8081ab8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081abc:	d507      	bpl.n	8081ace <__adddf3+0xe6>
 8081abe:	f04f 0e00 	mov.w	lr, #0
 8081ac2:	f1dc 0c00 	rsbs	ip, ip, #0
 8081ac6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8081aca:	eb6e 0101 	sbc.w	r1, lr, r1
 8081ace:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8081ad2:	d31b      	bcc.n	8081b0c <__adddf3+0x124>
 8081ad4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8081ad8:	d30c      	bcc.n	8081af4 <__adddf3+0x10c>
 8081ada:	0849      	lsrs	r1, r1, #1
 8081adc:	ea5f 0030 	movs.w	r0, r0, rrx
 8081ae0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8081ae4:	f104 0401 	add.w	r4, r4, #1
 8081ae8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8081aec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8081af0:	f080 809a 	bcs.w	8081c28 <__adddf3+0x240>
 8081af4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8081af8:	bf08      	it	eq
 8081afa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8081afe:	f150 0000 	adcs.w	r0, r0, #0
 8081b02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081b06:	ea41 0105 	orr.w	r1, r1, r5
 8081b0a:	bd30      	pop	{r4, r5, pc}
 8081b0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8081b10:	4140      	adcs	r0, r0
 8081b12:	eb41 0101 	adc.w	r1, r1, r1
 8081b16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081b1a:	f1a4 0401 	sub.w	r4, r4, #1
 8081b1e:	d1e9      	bne.n	8081af4 <__adddf3+0x10c>
 8081b20:	f091 0f00 	teq	r1, #0
 8081b24:	bf04      	itt	eq
 8081b26:	4601      	moveq	r1, r0
 8081b28:	2000      	moveq	r0, #0
 8081b2a:	fab1 f381 	clz	r3, r1
 8081b2e:	bf08      	it	eq
 8081b30:	3320      	addeq	r3, #32
 8081b32:	f1a3 030b 	sub.w	r3, r3, #11
 8081b36:	f1b3 0220 	subs.w	r2, r3, #32
 8081b3a:	da0c      	bge.n	8081b56 <__adddf3+0x16e>
 8081b3c:	320c      	adds	r2, #12
 8081b3e:	dd08      	ble.n	8081b52 <__adddf3+0x16a>
 8081b40:	f102 0c14 	add.w	ip, r2, #20
 8081b44:	f1c2 020c 	rsb	r2, r2, #12
 8081b48:	fa01 f00c 	lsl.w	r0, r1, ip
 8081b4c:	fa21 f102 	lsr.w	r1, r1, r2
 8081b50:	e00c      	b.n	8081b6c <__adddf3+0x184>
 8081b52:	f102 0214 	add.w	r2, r2, #20
 8081b56:	bfd8      	it	le
 8081b58:	f1c2 0c20 	rsble	ip, r2, #32
 8081b5c:	fa01 f102 	lsl.w	r1, r1, r2
 8081b60:	fa20 fc0c 	lsr.w	ip, r0, ip
 8081b64:	bfdc      	itt	le
 8081b66:	ea41 010c 	orrle.w	r1, r1, ip
 8081b6a:	4090      	lslle	r0, r2
 8081b6c:	1ae4      	subs	r4, r4, r3
 8081b6e:	bfa2      	ittt	ge
 8081b70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8081b74:	4329      	orrge	r1, r5
 8081b76:	bd30      	popge	{r4, r5, pc}
 8081b78:	ea6f 0404 	mvn.w	r4, r4
 8081b7c:	3c1f      	subs	r4, #31
 8081b7e:	da1c      	bge.n	8081bba <__adddf3+0x1d2>
 8081b80:	340c      	adds	r4, #12
 8081b82:	dc0e      	bgt.n	8081ba2 <__adddf3+0x1ba>
 8081b84:	f104 0414 	add.w	r4, r4, #20
 8081b88:	f1c4 0220 	rsb	r2, r4, #32
 8081b8c:	fa20 f004 	lsr.w	r0, r0, r4
 8081b90:	fa01 f302 	lsl.w	r3, r1, r2
 8081b94:	ea40 0003 	orr.w	r0, r0, r3
 8081b98:	fa21 f304 	lsr.w	r3, r1, r4
 8081b9c:	ea45 0103 	orr.w	r1, r5, r3
 8081ba0:	bd30      	pop	{r4, r5, pc}
 8081ba2:	f1c4 040c 	rsb	r4, r4, #12
 8081ba6:	f1c4 0220 	rsb	r2, r4, #32
 8081baa:	fa20 f002 	lsr.w	r0, r0, r2
 8081bae:	fa01 f304 	lsl.w	r3, r1, r4
 8081bb2:	ea40 0003 	orr.w	r0, r0, r3
 8081bb6:	4629      	mov	r1, r5
 8081bb8:	bd30      	pop	{r4, r5, pc}
 8081bba:	fa21 f004 	lsr.w	r0, r1, r4
 8081bbe:	4629      	mov	r1, r5
 8081bc0:	bd30      	pop	{r4, r5, pc}
 8081bc2:	f094 0f00 	teq	r4, #0
 8081bc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8081bca:	bf06      	itte	eq
 8081bcc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8081bd0:	3401      	addeq	r4, #1
 8081bd2:	3d01      	subne	r5, #1
 8081bd4:	e74e      	b.n	8081a74 <__adddf3+0x8c>
 8081bd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081bda:	bf18      	it	ne
 8081bdc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081be0:	d029      	beq.n	8081c36 <__adddf3+0x24e>
 8081be2:	ea94 0f05 	teq	r4, r5
 8081be6:	bf08      	it	eq
 8081be8:	ea90 0f02 	teqeq	r0, r2
 8081bec:	d005      	beq.n	8081bfa <__adddf3+0x212>
 8081bee:	ea54 0c00 	orrs.w	ip, r4, r0
 8081bf2:	bf04      	itt	eq
 8081bf4:	4619      	moveq	r1, r3
 8081bf6:	4610      	moveq	r0, r2
 8081bf8:	bd30      	pop	{r4, r5, pc}
 8081bfa:	ea91 0f03 	teq	r1, r3
 8081bfe:	bf1e      	ittt	ne
 8081c00:	2100      	movne	r1, #0
 8081c02:	2000      	movne	r0, #0
 8081c04:	bd30      	popne	{r4, r5, pc}
 8081c06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8081c0a:	d105      	bne.n	8081c18 <__adddf3+0x230>
 8081c0c:	0040      	lsls	r0, r0, #1
 8081c0e:	4149      	adcs	r1, r1
 8081c10:	bf28      	it	cs
 8081c12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8081c16:	bd30      	pop	{r4, r5, pc}
 8081c18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8081c1c:	bf3c      	itt	cc
 8081c1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8081c22:	bd30      	popcc	{r4, r5, pc}
 8081c24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081c28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8081c2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8081c30:	f04f 0000 	mov.w	r0, #0
 8081c34:	bd30      	pop	{r4, r5, pc}
 8081c36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081c3a:	bf1a      	itte	ne
 8081c3c:	4619      	movne	r1, r3
 8081c3e:	4610      	movne	r0, r2
 8081c40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8081c44:	bf1c      	itt	ne
 8081c46:	460b      	movne	r3, r1
 8081c48:	4602      	movne	r2, r0
 8081c4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8081c4e:	bf06      	itte	eq
 8081c50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8081c54:	ea91 0f03 	teqeq	r1, r3
 8081c58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8081c5c:	bd30      	pop	{r4, r5, pc}
 8081c5e:	bf00      	nop

08081c60 <__aeabi_ui2d>:
 8081c60:	f090 0f00 	teq	r0, #0
 8081c64:	bf04      	itt	eq
 8081c66:	2100      	moveq	r1, #0
 8081c68:	4770      	bxeq	lr
 8081c6a:	b530      	push	{r4, r5, lr}
 8081c6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081c70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081c74:	f04f 0500 	mov.w	r5, #0
 8081c78:	f04f 0100 	mov.w	r1, #0
 8081c7c:	e750      	b.n	8081b20 <__adddf3+0x138>
 8081c7e:	bf00      	nop

08081c80 <__aeabi_i2d>:
 8081c80:	f090 0f00 	teq	r0, #0
 8081c84:	bf04      	itt	eq
 8081c86:	2100      	moveq	r1, #0
 8081c88:	4770      	bxeq	lr
 8081c8a:	b530      	push	{r4, r5, lr}
 8081c8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081c90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081c94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8081c98:	bf48      	it	mi
 8081c9a:	4240      	negmi	r0, r0
 8081c9c:	f04f 0100 	mov.w	r1, #0
 8081ca0:	e73e      	b.n	8081b20 <__adddf3+0x138>
 8081ca2:	bf00      	nop

08081ca4 <__aeabi_f2d>:
 8081ca4:	0042      	lsls	r2, r0, #1
 8081ca6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8081caa:	ea4f 0131 	mov.w	r1, r1, rrx
 8081cae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8081cb2:	bf1f      	itttt	ne
 8081cb4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8081cb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8081cbc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8081cc0:	4770      	bxne	lr
 8081cc2:	f092 0f00 	teq	r2, #0
 8081cc6:	bf14      	ite	ne
 8081cc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8081ccc:	4770      	bxeq	lr
 8081cce:	b530      	push	{r4, r5, lr}
 8081cd0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8081cd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081cd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081cdc:	e720      	b.n	8081b20 <__adddf3+0x138>
 8081cde:	bf00      	nop

08081ce0 <__aeabi_ul2d>:
 8081ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8081ce4:	bf08      	it	eq
 8081ce6:	4770      	bxeq	lr
 8081ce8:	b530      	push	{r4, r5, lr}
 8081cea:	f04f 0500 	mov.w	r5, #0
 8081cee:	e00a      	b.n	8081d06 <__aeabi_l2d+0x16>

08081cf0 <__aeabi_l2d>:
 8081cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8081cf4:	bf08      	it	eq
 8081cf6:	4770      	bxeq	lr
 8081cf8:	b530      	push	{r4, r5, lr}
 8081cfa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8081cfe:	d502      	bpl.n	8081d06 <__aeabi_l2d+0x16>
 8081d00:	4240      	negs	r0, r0
 8081d02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081d06:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081d0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081d0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8081d12:	f43f aedc 	beq.w	8081ace <__adddf3+0xe6>
 8081d16:	f04f 0203 	mov.w	r2, #3
 8081d1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8081d1e:	bf18      	it	ne
 8081d20:	3203      	addne	r2, #3
 8081d22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8081d26:	bf18      	it	ne
 8081d28:	3203      	addne	r2, #3
 8081d2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8081d2e:	f1c2 0320 	rsb	r3, r2, #32
 8081d32:	fa00 fc03 	lsl.w	ip, r0, r3
 8081d36:	fa20 f002 	lsr.w	r0, r0, r2
 8081d3a:	fa01 fe03 	lsl.w	lr, r1, r3
 8081d3e:	ea40 000e 	orr.w	r0, r0, lr
 8081d42:	fa21 f102 	lsr.w	r1, r1, r2
 8081d46:	4414      	add	r4, r2
 8081d48:	e6c1      	b.n	8081ace <__adddf3+0xe6>
 8081d4a:	bf00      	nop

08081d4c <__aeabi_dmul>:
 8081d4c:	b570      	push	{r4, r5, r6, lr}
 8081d4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8081d52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8081d56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8081d5a:	bf1d      	ittte	ne
 8081d5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8081d60:	ea94 0f0c 	teqne	r4, ip
 8081d64:	ea95 0f0c 	teqne	r5, ip
 8081d68:	f000 f8de 	bleq	8081f28 <__aeabi_dmul+0x1dc>
 8081d6c:	442c      	add	r4, r5
 8081d6e:	ea81 0603 	eor.w	r6, r1, r3
 8081d72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8081d76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8081d7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8081d7e:	bf18      	it	ne
 8081d80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8081d84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8081d8c:	d038      	beq.n	8081e00 <__aeabi_dmul+0xb4>
 8081d8e:	fba0 ce02 	umull	ip, lr, r0, r2
 8081d92:	f04f 0500 	mov.w	r5, #0
 8081d96:	fbe1 e502 	umlal	lr, r5, r1, r2
 8081d9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8081d9e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8081da2:	f04f 0600 	mov.w	r6, #0
 8081da6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8081daa:	f09c 0f00 	teq	ip, #0
 8081dae:	bf18      	it	ne
 8081db0:	f04e 0e01 	orrne.w	lr, lr, #1
 8081db4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8081db8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081dbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8081dc0:	d204      	bcs.n	8081dcc <__aeabi_dmul+0x80>
 8081dc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8081dc6:	416d      	adcs	r5, r5
 8081dc8:	eb46 0606 	adc.w	r6, r6, r6
 8081dcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8081dd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8081dd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8081dd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8081ddc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8081de0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8081de4:	bf88      	it	hi
 8081de6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8081dea:	d81e      	bhi.n	8081e2a <__aeabi_dmul+0xde>
 8081dec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8081df0:	bf08      	it	eq
 8081df2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8081df6:	f150 0000 	adcs.w	r0, r0, #0
 8081dfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081dfe:	bd70      	pop	{r4, r5, r6, pc}
 8081e00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8081e04:	ea46 0101 	orr.w	r1, r6, r1
 8081e08:	ea40 0002 	orr.w	r0, r0, r2
 8081e0c:	ea81 0103 	eor.w	r1, r1, r3
 8081e10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8081e14:	bfc2      	ittt	gt
 8081e16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8081e1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8081e1e:	bd70      	popgt	{r4, r5, r6, pc}
 8081e20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081e24:	f04f 0e00 	mov.w	lr, #0
 8081e28:	3c01      	subs	r4, #1
 8081e2a:	f300 80ab 	bgt.w	8081f84 <__aeabi_dmul+0x238>
 8081e2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8081e32:	bfde      	ittt	le
 8081e34:	2000      	movle	r0, #0
 8081e36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8081e3a:	bd70      	pople	{r4, r5, r6, pc}
 8081e3c:	f1c4 0400 	rsb	r4, r4, #0
 8081e40:	3c20      	subs	r4, #32
 8081e42:	da35      	bge.n	8081eb0 <__aeabi_dmul+0x164>
 8081e44:	340c      	adds	r4, #12
 8081e46:	dc1b      	bgt.n	8081e80 <__aeabi_dmul+0x134>
 8081e48:	f104 0414 	add.w	r4, r4, #20
 8081e4c:	f1c4 0520 	rsb	r5, r4, #32
 8081e50:	fa00 f305 	lsl.w	r3, r0, r5
 8081e54:	fa20 f004 	lsr.w	r0, r0, r4
 8081e58:	fa01 f205 	lsl.w	r2, r1, r5
 8081e5c:	ea40 0002 	orr.w	r0, r0, r2
 8081e60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8081e64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081e68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081e6c:	fa21 f604 	lsr.w	r6, r1, r4
 8081e70:	eb42 0106 	adc.w	r1, r2, r6
 8081e74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081e78:	bf08      	it	eq
 8081e7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081e7e:	bd70      	pop	{r4, r5, r6, pc}
 8081e80:	f1c4 040c 	rsb	r4, r4, #12
 8081e84:	f1c4 0520 	rsb	r5, r4, #32
 8081e88:	fa00 f304 	lsl.w	r3, r0, r4
 8081e8c:	fa20 f005 	lsr.w	r0, r0, r5
 8081e90:	fa01 f204 	lsl.w	r2, r1, r4
 8081e94:	ea40 0002 	orr.w	r0, r0, r2
 8081e98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081e9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081ea0:	f141 0100 	adc.w	r1, r1, #0
 8081ea4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081ea8:	bf08      	it	eq
 8081eaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081eae:	bd70      	pop	{r4, r5, r6, pc}
 8081eb0:	f1c4 0520 	rsb	r5, r4, #32
 8081eb4:	fa00 f205 	lsl.w	r2, r0, r5
 8081eb8:	ea4e 0e02 	orr.w	lr, lr, r2
 8081ebc:	fa20 f304 	lsr.w	r3, r0, r4
 8081ec0:	fa01 f205 	lsl.w	r2, r1, r5
 8081ec4:	ea43 0302 	orr.w	r3, r3, r2
 8081ec8:	fa21 f004 	lsr.w	r0, r1, r4
 8081ecc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081ed0:	fa21 f204 	lsr.w	r2, r1, r4
 8081ed4:	ea20 0002 	bic.w	r0, r0, r2
 8081ed8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8081edc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081ee0:	bf08      	it	eq
 8081ee2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081ee6:	bd70      	pop	{r4, r5, r6, pc}
 8081ee8:	f094 0f00 	teq	r4, #0
 8081eec:	d10f      	bne.n	8081f0e <__aeabi_dmul+0x1c2>
 8081eee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8081ef2:	0040      	lsls	r0, r0, #1
 8081ef4:	eb41 0101 	adc.w	r1, r1, r1
 8081ef8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081efc:	bf08      	it	eq
 8081efe:	3c01      	subeq	r4, #1
 8081f00:	d0f7      	beq.n	8081ef2 <__aeabi_dmul+0x1a6>
 8081f02:	ea41 0106 	orr.w	r1, r1, r6
 8081f06:	f095 0f00 	teq	r5, #0
 8081f0a:	bf18      	it	ne
 8081f0c:	4770      	bxne	lr
 8081f0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8081f12:	0052      	lsls	r2, r2, #1
 8081f14:	eb43 0303 	adc.w	r3, r3, r3
 8081f18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8081f1c:	bf08      	it	eq
 8081f1e:	3d01      	subeq	r5, #1
 8081f20:	d0f7      	beq.n	8081f12 <__aeabi_dmul+0x1c6>
 8081f22:	ea43 0306 	orr.w	r3, r3, r6
 8081f26:	4770      	bx	lr
 8081f28:	ea94 0f0c 	teq	r4, ip
 8081f2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8081f30:	bf18      	it	ne
 8081f32:	ea95 0f0c 	teqne	r5, ip
 8081f36:	d00c      	beq.n	8081f52 <__aeabi_dmul+0x206>
 8081f38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081f3c:	bf18      	it	ne
 8081f3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081f42:	d1d1      	bne.n	8081ee8 <__aeabi_dmul+0x19c>
 8081f44:	ea81 0103 	eor.w	r1, r1, r3
 8081f48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081f4c:	f04f 0000 	mov.w	r0, #0
 8081f50:	bd70      	pop	{r4, r5, r6, pc}
 8081f52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081f56:	bf06      	itte	eq
 8081f58:	4610      	moveq	r0, r2
 8081f5a:	4619      	moveq	r1, r3
 8081f5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081f60:	d019      	beq.n	8081f96 <__aeabi_dmul+0x24a>
 8081f62:	ea94 0f0c 	teq	r4, ip
 8081f66:	d102      	bne.n	8081f6e <__aeabi_dmul+0x222>
 8081f68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8081f6c:	d113      	bne.n	8081f96 <__aeabi_dmul+0x24a>
 8081f6e:	ea95 0f0c 	teq	r5, ip
 8081f72:	d105      	bne.n	8081f80 <__aeabi_dmul+0x234>
 8081f74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8081f78:	bf1c      	itt	ne
 8081f7a:	4610      	movne	r0, r2
 8081f7c:	4619      	movne	r1, r3
 8081f7e:	d10a      	bne.n	8081f96 <__aeabi_dmul+0x24a>
 8081f80:	ea81 0103 	eor.w	r1, r1, r3
 8081f84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081f88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8081f8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8081f90:	f04f 0000 	mov.w	r0, #0
 8081f94:	bd70      	pop	{r4, r5, r6, pc}
 8081f96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8081f9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8081f9e:	bd70      	pop	{r4, r5, r6, pc}

08081fa0 <__aeabi_ddiv>:
 8081fa0:	b570      	push	{r4, r5, r6, lr}
 8081fa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8081fa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8081faa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8081fae:	bf1d      	ittte	ne
 8081fb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8081fb4:	ea94 0f0c 	teqne	r4, ip
 8081fb8:	ea95 0f0c 	teqne	r5, ip
 8081fbc:	f000 f8a7 	bleq	808210e <__aeabi_ddiv+0x16e>
 8081fc0:	eba4 0405 	sub.w	r4, r4, r5
 8081fc4:	ea81 0e03 	eor.w	lr, r1, r3
 8081fc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8081fcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8081fd0:	f000 8088 	beq.w	80820e4 <__aeabi_ddiv+0x144>
 8081fd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081fd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8081fdc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8081fe0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8081fe4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8081fe8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8081fec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8081ff0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8081ff4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8081ff8:	429d      	cmp	r5, r3
 8081ffa:	bf08      	it	eq
 8081ffc:	4296      	cmpeq	r6, r2
 8081ffe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8082002:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8082006:	d202      	bcs.n	808200e <__aeabi_ddiv+0x6e>
 8082008:	085b      	lsrs	r3, r3, #1
 808200a:	ea4f 0232 	mov.w	r2, r2, rrx
 808200e:	1ab6      	subs	r6, r6, r2
 8082010:	eb65 0503 	sbc.w	r5, r5, r3
 8082014:	085b      	lsrs	r3, r3, #1
 8082016:	ea4f 0232 	mov.w	r2, r2, rrx
 808201a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808201e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8082022:	ebb6 0e02 	subs.w	lr, r6, r2
 8082026:	eb75 0e03 	sbcs.w	lr, r5, r3
 808202a:	bf22      	ittt	cs
 808202c:	1ab6      	subcs	r6, r6, r2
 808202e:	4675      	movcs	r5, lr
 8082030:	ea40 000c 	orrcs.w	r0, r0, ip
 8082034:	085b      	lsrs	r3, r3, #1
 8082036:	ea4f 0232 	mov.w	r2, r2, rrx
 808203a:	ebb6 0e02 	subs.w	lr, r6, r2
 808203e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082042:	bf22      	ittt	cs
 8082044:	1ab6      	subcs	r6, r6, r2
 8082046:	4675      	movcs	r5, lr
 8082048:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808204c:	085b      	lsrs	r3, r3, #1
 808204e:	ea4f 0232 	mov.w	r2, r2, rrx
 8082052:	ebb6 0e02 	subs.w	lr, r6, r2
 8082056:	eb75 0e03 	sbcs.w	lr, r5, r3
 808205a:	bf22      	ittt	cs
 808205c:	1ab6      	subcs	r6, r6, r2
 808205e:	4675      	movcs	r5, lr
 8082060:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8082064:	085b      	lsrs	r3, r3, #1
 8082066:	ea4f 0232 	mov.w	r2, r2, rrx
 808206a:	ebb6 0e02 	subs.w	lr, r6, r2
 808206e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082072:	bf22      	ittt	cs
 8082074:	1ab6      	subcs	r6, r6, r2
 8082076:	4675      	movcs	r5, lr
 8082078:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808207c:	ea55 0e06 	orrs.w	lr, r5, r6
 8082080:	d018      	beq.n	80820b4 <__aeabi_ddiv+0x114>
 8082082:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8082086:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808208a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808208e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8082092:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8082096:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808209a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808209e:	d1c0      	bne.n	8082022 <__aeabi_ddiv+0x82>
 80820a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80820a4:	d10b      	bne.n	80820be <__aeabi_ddiv+0x11e>
 80820a6:	ea41 0100 	orr.w	r1, r1, r0
 80820aa:	f04f 0000 	mov.w	r0, #0
 80820ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80820b2:	e7b6      	b.n	8082022 <__aeabi_ddiv+0x82>
 80820b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80820b8:	bf04      	itt	eq
 80820ba:	4301      	orreq	r1, r0
 80820bc:	2000      	moveq	r0, #0
 80820be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80820c2:	bf88      	it	hi
 80820c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80820c8:	f63f aeaf 	bhi.w	8081e2a <__aeabi_dmul+0xde>
 80820cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80820d0:	bf04      	itt	eq
 80820d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80820d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80820da:	f150 0000 	adcs.w	r0, r0, #0
 80820de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80820e2:	bd70      	pop	{r4, r5, r6, pc}
 80820e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80820e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80820ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80820f0:	bfc2      	ittt	gt
 80820f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80820f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80820fa:	bd70      	popgt	{r4, r5, r6, pc}
 80820fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082100:	f04f 0e00 	mov.w	lr, #0
 8082104:	3c01      	subs	r4, #1
 8082106:	e690      	b.n	8081e2a <__aeabi_dmul+0xde>
 8082108:	ea45 0e06 	orr.w	lr, r5, r6
 808210c:	e68d      	b.n	8081e2a <__aeabi_dmul+0xde>
 808210e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082112:	ea94 0f0c 	teq	r4, ip
 8082116:	bf08      	it	eq
 8082118:	ea95 0f0c 	teqeq	r5, ip
 808211c:	f43f af3b 	beq.w	8081f96 <__aeabi_dmul+0x24a>
 8082120:	ea94 0f0c 	teq	r4, ip
 8082124:	d10a      	bne.n	808213c <__aeabi_ddiv+0x19c>
 8082126:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808212a:	f47f af34 	bne.w	8081f96 <__aeabi_dmul+0x24a>
 808212e:	ea95 0f0c 	teq	r5, ip
 8082132:	f47f af25 	bne.w	8081f80 <__aeabi_dmul+0x234>
 8082136:	4610      	mov	r0, r2
 8082138:	4619      	mov	r1, r3
 808213a:	e72c      	b.n	8081f96 <__aeabi_dmul+0x24a>
 808213c:	ea95 0f0c 	teq	r5, ip
 8082140:	d106      	bne.n	8082150 <__aeabi_ddiv+0x1b0>
 8082142:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082146:	f43f aefd 	beq.w	8081f44 <__aeabi_dmul+0x1f8>
 808214a:	4610      	mov	r0, r2
 808214c:	4619      	mov	r1, r3
 808214e:	e722      	b.n	8081f96 <__aeabi_dmul+0x24a>
 8082150:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082154:	bf18      	it	ne
 8082156:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808215a:	f47f aec5 	bne.w	8081ee8 <__aeabi_dmul+0x19c>
 808215e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8082162:	f47f af0d 	bne.w	8081f80 <__aeabi_dmul+0x234>
 8082166:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808216a:	f47f aeeb 	bne.w	8081f44 <__aeabi_dmul+0x1f8>
 808216e:	e712      	b.n	8081f96 <__aeabi_dmul+0x24a>

08082170 <__gedf2>:
 8082170:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8082174:	e006      	b.n	8082184 <__cmpdf2+0x4>
 8082176:	bf00      	nop

08082178 <__ledf2>:
 8082178:	f04f 0c01 	mov.w	ip, #1
 808217c:	e002      	b.n	8082184 <__cmpdf2+0x4>
 808217e:	bf00      	nop

08082180 <__cmpdf2>:
 8082180:	f04f 0c01 	mov.w	ip, #1
 8082184:	f84d cd04 	str.w	ip, [sp, #-4]!
 8082188:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808218c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082190:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082194:	bf18      	it	ne
 8082196:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808219a:	d01b      	beq.n	80821d4 <__cmpdf2+0x54>
 808219c:	b001      	add	sp, #4
 808219e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80821a2:	bf0c      	ite	eq
 80821a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80821a8:	ea91 0f03 	teqne	r1, r3
 80821ac:	bf02      	ittt	eq
 80821ae:	ea90 0f02 	teqeq	r0, r2
 80821b2:	2000      	moveq	r0, #0
 80821b4:	4770      	bxeq	lr
 80821b6:	f110 0f00 	cmn.w	r0, #0
 80821ba:	ea91 0f03 	teq	r1, r3
 80821be:	bf58      	it	pl
 80821c0:	4299      	cmppl	r1, r3
 80821c2:	bf08      	it	eq
 80821c4:	4290      	cmpeq	r0, r2
 80821c6:	bf2c      	ite	cs
 80821c8:	17d8      	asrcs	r0, r3, #31
 80821ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80821ce:	f040 0001 	orr.w	r0, r0, #1
 80821d2:	4770      	bx	lr
 80821d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80821d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80821dc:	d102      	bne.n	80821e4 <__cmpdf2+0x64>
 80821de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80821e2:	d107      	bne.n	80821f4 <__cmpdf2+0x74>
 80821e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80821e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80821ec:	d1d6      	bne.n	808219c <__cmpdf2+0x1c>
 80821ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80821f2:	d0d3      	beq.n	808219c <__cmpdf2+0x1c>
 80821f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80821f8:	4770      	bx	lr
 80821fa:	bf00      	nop

080821fc <__aeabi_cdrcmple>:
 80821fc:	4684      	mov	ip, r0
 80821fe:	4610      	mov	r0, r2
 8082200:	4662      	mov	r2, ip
 8082202:	468c      	mov	ip, r1
 8082204:	4619      	mov	r1, r3
 8082206:	4663      	mov	r3, ip
 8082208:	e000      	b.n	808220c <__aeabi_cdcmpeq>
 808220a:	bf00      	nop

0808220c <__aeabi_cdcmpeq>:
 808220c:	b501      	push	{r0, lr}
 808220e:	f7ff ffb7 	bl	8082180 <__cmpdf2>
 8082212:	2800      	cmp	r0, #0
 8082214:	bf48      	it	mi
 8082216:	f110 0f00 	cmnmi.w	r0, #0
 808221a:	bd01      	pop	{r0, pc}

0808221c <__aeabi_dcmpeq>:
 808221c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082220:	f7ff fff4 	bl	808220c <__aeabi_cdcmpeq>
 8082224:	bf0c      	ite	eq
 8082226:	2001      	moveq	r0, #1
 8082228:	2000      	movne	r0, #0
 808222a:	f85d fb08 	ldr.w	pc, [sp], #8
 808222e:	bf00      	nop

08082230 <__aeabi_dcmplt>:
 8082230:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082234:	f7ff ffea 	bl	808220c <__aeabi_cdcmpeq>
 8082238:	bf34      	ite	cc
 808223a:	2001      	movcc	r0, #1
 808223c:	2000      	movcs	r0, #0
 808223e:	f85d fb08 	ldr.w	pc, [sp], #8
 8082242:	bf00      	nop

08082244 <__aeabi_dcmple>:
 8082244:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082248:	f7ff ffe0 	bl	808220c <__aeabi_cdcmpeq>
 808224c:	bf94      	ite	ls
 808224e:	2001      	movls	r0, #1
 8082250:	2000      	movhi	r0, #0
 8082252:	f85d fb08 	ldr.w	pc, [sp], #8
 8082256:	bf00      	nop

08082258 <__aeabi_dcmpge>:
 8082258:	f84d ed08 	str.w	lr, [sp, #-8]!
 808225c:	f7ff ffce 	bl	80821fc <__aeabi_cdrcmple>
 8082260:	bf94      	ite	ls
 8082262:	2001      	movls	r0, #1
 8082264:	2000      	movhi	r0, #0
 8082266:	f85d fb08 	ldr.w	pc, [sp], #8
 808226a:	bf00      	nop

0808226c <__aeabi_dcmpgt>:
 808226c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082270:	f7ff ffc4 	bl	80821fc <__aeabi_cdrcmple>
 8082274:	bf34      	ite	cc
 8082276:	2001      	movcc	r0, #1
 8082278:	2000      	movcs	r0, #0
 808227a:	f85d fb08 	ldr.w	pc, [sp], #8
 808227e:	bf00      	nop

08082280 <__aeabi_dcmpun>:
 8082280:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082288:	d102      	bne.n	8082290 <__aeabi_dcmpun+0x10>
 808228a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808228e:	d10a      	bne.n	80822a6 <__aeabi_dcmpun+0x26>
 8082290:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082294:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082298:	d102      	bne.n	80822a0 <__aeabi_dcmpun+0x20>
 808229a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808229e:	d102      	bne.n	80822a6 <__aeabi_dcmpun+0x26>
 80822a0:	f04f 0000 	mov.w	r0, #0
 80822a4:	4770      	bx	lr
 80822a6:	f04f 0001 	mov.w	r0, #1
 80822aa:	4770      	bx	lr

080822ac <__aeabi_d2iz>:
 80822ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80822b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80822b4:	d215      	bcs.n	80822e2 <__aeabi_d2iz+0x36>
 80822b6:	d511      	bpl.n	80822dc <__aeabi_d2iz+0x30>
 80822b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80822bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80822c0:	d912      	bls.n	80822e8 <__aeabi_d2iz+0x3c>
 80822c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80822c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80822ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80822ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80822d2:	fa23 f002 	lsr.w	r0, r3, r2
 80822d6:	bf18      	it	ne
 80822d8:	4240      	negne	r0, r0
 80822da:	4770      	bx	lr
 80822dc:	f04f 0000 	mov.w	r0, #0
 80822e0:	4770      	bx	lr
 80822e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80822e6:	d105      	bne.n	80822f4 <__aeabi_d2iz+0x48>
 80822e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80822ec:	bf08      	it	eq
 80822ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80822f2:	4770      	bx	lr
 80822f4:	f04f 0000 	mov.w	r0, #0
 80822f8:	4770      	bx	lr
 80822fa:	bf00      	nop

080822fc <__aeabi_d2uiz>:
 80822fc:	004a      	lsls	r2, r1, #1
 80822fe:	d211      	bcs.n	8082324 <__aeabi_d2uiz+0x28>
 8082300:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082304:	d211      	bcs.n	808232a <__aeabi_d2uiz+0x2e>
 8082306:	d50d      	bpl.n	8082324 <__aeabi_d2uiz+0x28>
 8082308:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808230c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082310:	d40e      	bmi.n	8082330 <__aeabi_d2uiz+0x34>
 8082312:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808231a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808231e:	fa23 f002 	lsr.w	r0, r3, r2
 8082322:	4770      	bx	lr
 8082324:	f04f 0000 	mov.w	r0, #0
 8082328:	4770      	bx	lr
 808232a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808232e:	d102      	bne.n	8082336 <__aeabi_d2uiz+0x3a>
 8082330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8082334:	4770      	bx	lr
 8082336:	f04f 0000 	mov.w	r0, #0
 808233a:	4770      	bx	lr

0808233c <atol>:
 808233c:	220a      	movs	r2, #10
 808233e:	2100      	movs	r1, #0
 8082340:	f000 b8fe 	b.w	8082540 <strtol>

08082344 <__cxa_atexit>:
 8082344:	b510      	push	{r4, lr}
 8082346:	4c05      	ldr	r4, [pc, #20]	; (808235c <__cxa_atexit+0x18>)
 8082348:	4613      	mov	r3, r2
 808234a:	b12c      	cbz	r4, 8082358 <__cxa_atexit+0x14>
 808234c:	460a      	mov	r2, r1
 808234e:	4601      	mov	r1, r0
 8082350:	2002      	movs	r0, #2
 8082352:	f3af 8000 	nop.w
 8082356:	bd10      	pop	{r4, pc}
 8082358:	4620      	mov	r0, r4
 808235a:	bd10      	pop	{r4, pc}
 808235c:	00000000 	.word	0x00000000

08082360 <memcpy>:
 8082360:	b510      	push	{r4, lr}
 8082362:	1e43      	subs	r3, r0, #1
 8082364:	440a      	add	r2, r1
 8082366:	4291      	cmp	r1, r2
 8082368:	d004      	beq.n	8082374 <memcpy+0x14>
 808236a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808236e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8082372:	e7f8      	b.n	8082366 <memcpy+0x6>
 8082374:	bd10      	pop	{r4, pc}

08082376 <memset>:
 8082376:	4603      	mov	r3, r0
 8082378:	4402      	add	r2, r0
 808237a:	4293      	cmp	r3, r2
 808237c:	d002      	beq.n	8082384 <memset+0xe>
 808237e:	f803 1b01 	strb.w	r1, [r3], #1
 8082382:	e7fa      	b.n	808237a <memset+0x4>
 8082384:	4770      	bx	lr
	...

08082388 <srand>:
 8082388:	b538      	push	{r3, r4, r5, lr}
 808238a:	4b12      	ldr	r3, [pc, #72]	; (80823d4 <srand+0x4c>)
 808238c:	4605      	mov	r5, r0
 808238e:	681c      	ldr	r4, [r3, #0]
 8082390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8082392:	b9d3      	cbnz	r3, 80823ca <srand+0x42>
 8082394:	2018      	movs	r0, #24
 8082396:	f7fe fc87 	bl	8080ca8 <malloc>
 808239a:	f243 330e 	movw	r3, #13070	; 0x330e
 808239e:	63a0      	str	r0, [r4, #56]	; 0x38
 80823a0:	8003      	strh	r3, [r0, #0]
 80823a2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80823a6:	8043      	strh	r3, [r0, #2]
 80823a8:	f241 2334 	movw	r3, #4660	; 0x1234
 80823ac:	8083      	strh	r3, [r0, #4]
 80823ae:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80823b2:	80c3      	strh	r3, [r0, #6]
 80823b4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80823b8:	8103      	strh	r3, [r0, #8]
 80823ba:	2305      	movs	r3, #5
 80823bc:	8143      	strh	r3, [r0, #10]
 80823be:	230b      	movs	r3, #11
 80823c0:	8183      	strh	r3, [r0, #12]
 80823c2:	2201      	movs	r2, #1
 80823c4:	2300      	movs	r3, #0
 80823c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80823ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80823cc:	2200      	movs	r2, #0
 80823ce:	611d      	str	r5, [r3, #16]
 80823d0:	615a      	str	r2, [r3, #20]
 80823d2:	bd38      	pop	{r3, r4, r5, pc}
 80823d4:	20000474 	.word	0x20000474

080823d8 <strcmp>:
 80823d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80823dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80823e0:	2a01      	cmp	r2, #1
 80823e2:	bf28      	it	cs
 80823e4:	429a      	cmpcs	r2, r3
 80823e6:	d0f7      	beq.n	80823d8 <strcmp>
 80823e8:	1ad0      	subs	r0, r2, r3
 80823ea:	4770      	bx	lr

080823ec <strcpy>:
 80823ec:	4603      	mov	r3, r0
 80823ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80823f2:	f803 2b01 	strb.w	r2, [r3], #1
 80823f6:	2a00      	cmp	r2, #0
 80823f8:	d1f9      	bne.n	80823ee <strcpy+0x2>
 80823fa:	4770      	bx	lr

080823fc <strlen>:
 80823fc:	4603      	mov	r3, r0
 80823fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8082402:	2a00      	cmp	r2, #0
 8082404:	d1fb      	bne.n	80823fe <strlen+0x2>
 8082406:	1a18      	subs	r0, r3, r0
 8082408:	3801      	subs	r0, #1
 808240a:	4770      	bx	lr

0808240c <strncpy>:
 808240c:	4603      	mov	r3, r0
 808240e:	b510      	push	{r4, lr}
 8082410:	b142      	cbz	r2, 8082424 <strncpy+0x18>
 8082412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8082416:	3a01      	subs	r2, #1
 8082418:	f803 4b01 	strb.w	r4, [r3], #1
 808241c:	2c00      	cmp	r4, #0
 808241e:	d1f7      	bne.n	8082410 <strncpy+0x4>
 8082420:	441a      	add	r2, r3
 8082422:	e000      	b.n	8082426 <strncpy+0x1a>
 8082424:	bd10      	pop	{r4, pc}
 8082426:	4293      	cmp	r3, r2
 8082428:	d002      	beq.n	8082430 <strncpy+0x24>
 808242a:	f803 4b01 	strb.w	r4, [r3], #1
 808242e:	e7fa      	b.n	8082426 <strncpy+0x1a>
 8082430:	bd10      	pop	{r4, pc}
	...

08082434 <_strtol_r>:
 8082434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082438:	460f      	mov	r7, r1
 808243a:	4680      	mov	r8, r0
 808243c:	483f      	ldr	r0, [pc, #252]	; (808253c <_strtol_r+0x108>)
 808243e:	f8d0 9000 	ldr.w	r9, [r0]
 8082442:	463d      	mov	r5, r7
 8082444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8082448:	eb09 0004 	add.w	r0, r9, r4
 808244c:	7840      	ldrb	r0, [r0, #1]
 808244e:	f000 0008 	and.w	r0, r0, #8
 8082452:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8082456:	b108      	cbz	r0, 808245c <_strtol_r+0x28>
 8082458:	462f      	mov	r7, r5
 808245a:	e7f2      	b.n	8082442 <_strtol_r+0xe>
 808245c:	2c2d      	cmp	r4, #45	; 0x2d
 808245e:	d103      	bne.n	8082468 <_strtol_r+0x34>
 8082460:	1cbd      	adds	r5, r7, #2
 8082462:	787c      	ldrb	r4, [r7, #1]
 8082464:	2601      	movs	r6, #1
 8082466:	e003      	b.n	8082470 <_strtol_r+0x3c>
 8082468:	2c2b      	cmp	r4, #43	; 0x2b
 808246a:	bf04      	itt	eq
 808246c:	787c      	ldrbeq	r4, [r7, #1]
 808246e:	1cbd      	addeq	r5, r7, #2
 8082470:	b113      	cbz	r3, 8082478 <_strtol_r+0x44>
 8082472:	2b10      	cmp	r3, #16
 8082474:	d10a      	bne.n	808248c <_strtol_r+0x58>
 8082476:	e05b      	b.n	8082530 <_strtol_r+0xfc>
 8082478:	2c30      	cmp	r4, #48	; 0x30
 808247a:	d157      	bne.n	808252c <_strtol_r+0xf8>
 808247c:	7828      	ldrb	r0, [r5, #0]
 808247e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8082482:	2858      	cmp	r0, #88	; 0x58
 8082484:	d14d      	bne.n	8082522 <_strtol_r+0xee>
 8082486:	786c      	ldrb	r4, [r5, #1]
 8082488:	2310      	movs	r3, #16
 808248a:	3502      	adds	r5, #2
 808248c:	2e00      	cmp	r6, #0
 808248e:	bf14      	ite	ne
 8082490:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8082494:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8082498:	fbbc faf3 	udiv	sl, ip, r3
 808249c:	2700      	movs	r7, #0
 808249e:	4638      	mov	r0, r7
 80824a0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80824a4:	eb09 0e04 	add.w	lr, r9, r4
 80824a8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80824ac:	f01e 0f04 	tst.w	lr, #4
 80824b0:	d001      	beq.n	80824b6 <_strtol_r+0x82>
 80824b2:	3c30      	subs	r4, #48	; 0x30
 80824b4:	e00b      	b.n	80824ce <_strtol_r+0x9a>
 80824b6:	f01e 0e03 	ands.w	lr, lr, #3
 80824ba:	d01b      	beq.n	80824f4 <_strtol_r+0xc0>
 80824bc:	f1be 0f01 	cmp.w	lr, #1
 80824c0:	bf0c      	ite	eq
 80824c2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80824c6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80824ca:	ebce 0404 	rsb	r4, lr, r4
 80824ce:	42a3      	cmp	r3, r4
 80824d0:	dd10      	ble.n	80824f4 <_strtol_r+0xc0>
 80824d2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80824d6:	d00a      	beq.n	80824ee <_strtol_r+0xba>
 80824d8:	4550      	cmp	r0, sl
 80824da:	d806      	bhi.n	80824ea <_strtol_r+0xb6>
 80824dc:	d101      	bne.n	80824e2 <_strtol_r+0xae>
 80824de:	4564      	cmp	r4, ip
 80824e0:	dc03      	bgt.n	80824ea <_strtol_r+0xb6>
 80824e2:	fb03 4000 	mla	r0, r3, r0, r4
 80824e6:	2701      	movs	r7, #1
 80824e8:	e001      	b.n	80824ee <_strtol_r+0xba>
 80824ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80824ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80824f2:	e7d7      	b.n	80824a4 <_strtol_r+0x70>
 80824f4:	1c7b      	adds	r3, r7, #1
 80824f6:	d10c      	bne.n	8082512 <_strtol_r+0xde>
 80824f8:	2e00      	cmp	r6, #0
 80824fa:	f04f 0322 	mov.w	r3, #34	; 0x22
 80824fe:	bf14      	ite	ne
 8082500:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8082504:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8082508:	f8c8 3000 	str.w	r3, [r8]
 808250c:	b92a      	cbnz	r2, 808251a <_strtol_r+0xe6>
 808250e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082512:	b106      	cbz	r6, 8082516 <_strtol_r+0xe2>
 8082514:	4240      	negs	r0, r0
 8082516:	b172      	cbz	r2, 8082536 <_strtol_r+0x102>
 8082518:	b107      	cbz	r7, 808251c <_strtol_r+0xe8>
 808251a:	1e69      	subs	r1, r5, #1
 808251c:	6011      	str	r1, [r2, #0]
 808251e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082522:	2430      	movs	r4, #48	; 0x30
 8082524:	2b00      	cmp	r3, #0
 8082526:	d1b1      	bne.n	808248c <_strtol_r+0x58>
 8082528:	2308      	movs	r3, #8
 808252a:	e7af      	b.n	808248c <_strtol_r+0x58>
 808252c:	230a      	movs	r3, #10
 808252e:	e7ad      	b.n	808248c <_strtol_r+0x58>
 8082530:	2c30      	cmp	r4, #48	; 0x30
 8082532:	d0a3      	beq.n	808247c <_strtol_r+0x48>
 8082534:	e7aa      	b.n	808248c <_strtol_r+0x58>
 8082536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808253a:	bf00      	nop
 808253c:	20000410 	.word	0x20000410

08082540 <strtol>:
 8082540:	4613      	mov	r3, r2
 8082542:	460a      	mov	r2, r1
 8082544:	4601      	mov	r1, r0
 8082546:	4802      	ldr	r0, [pc, #8]	; (8082550 <strtol+0x10>)
 8082548:	6800      	ldr	r0, [r0, #0]
 808254a:	f7ff bf73 	b.w	8082434 <_strtol_r>
 808254e:	bf00      	nop
 8082550:	20000474 	.word	0x20000474

08082554 <dynalib_user>:
 8082554:	0808001d 0808005d 08080089 0808008d     ....]...........
 8082564:	00000000 61636f4c 6e6f6974 2c00203a     ....Location: .,
 8082574:	564e4900 44494c41 44202000 2f657461     .INVALID.  Date/
 8082584:	656d6954 2f00203a 65707300 69206465     Time: ./.speed i
 8082594:	6c61766e 6e006469 61762e30 6e003d6c     nvalid.n0.val=.n
 80825a4:	69747865 73206e6f 00646e65 4d525047     extion send.GPRM
 80825b4:	50470043 00414747 4e4e004e 4e450045     C.GPGGA.N.NNE.EN
 80825c4:	53450045 53530045 00530045 00575353     E.ESE.SSE.S.SSW.
 80825d4:	00575357 00574e57 00574e4e              WSW.WNW.NNW.

080825e0 <_ZTVN5spark13CellularClassE>:
	...
 80825e8:	08080d0f                                ....

080825ec <_ZTV7TwoWire>:
	...
 80825f4:	08080d67 08080db1 08080d89 08080d69     g...........i...
 8082604:	08080d91 08080d99 08080da1 08080da9     ................

08082614 <_ZTV9IPAddress>:
	...
 808261c:	08080df7 08080de9 08080deb 66006e6c     ............ln.f
 808262c:	6f63006e 64006564 69617465 0a0d006c     n.code.detail...
 808263c:	31302500 00207530 2500205d 202c0064     .%010u .] .%d., 
 808264c:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 808265c:	00692500 61746564 20736c69 6200203d     .%i.details = .b
 808266c:	00647561 69726553 55006c61 65534253     aud.Serial.USBSe
 808267c:	6c616972 79740031 70006570 6d617261     rial1.type.param
 808268c:	646d6300 646e6800 72747300 6966006d     .cmd.hnd.strm.fi
 808269c:	6c00746c 61006c76 61486464 656c646e     lt.lvl.addHandle
 80826ac:	65720072 65766f6d 646e6148 0072656c     r.removeHandler.
 80826bc:	6d756e65 646e6148 7372656c 4f534a00     enumHandlers.JSO
 80826cc:	7274534e 4c6d6165 6148676f 656c646e     NStreamLogHandle
 80826dc:	70610072 6f6e0070 7400656e 65636172     r.app.none.trace
 80826ec:	666e6900 6177006f 65006e72 726f7272     .info.warn.error
 80826fc:	6e617000 61006369 6e006c6c 6f006e61     .panic.all.nan.o
 808270c:	2e006676 666e6900 00000000              vf...inf....

08082718 <_ZTV8SPIClass>:
	...
 8082720:	08081199 0808119b 2b25005a 3a643330     ........Z.%+03d:
 8082730:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 8082740:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 8082750:	00000000                                ....

08082754 <_ZTV11USARTSerial>:
	...
 808275c:	080800af 080800b3 0808125b 08080e69     ........[...i...
 808276c:	08081243 0808124f 08081249 08081255     C...O...I...U...
 808277c:	08081239 0808123d                       9...=...

08082784 <_ZTV9USBSerial>:
	...
 808278c:	08081319 0808135d 08081337 08080e69     ....]...7...i...
 808279c:	08081331 0808131b 08081323 08081357     1.......#...W...
 80827ac:	0808132b 08081315                       +.......

080827b4 <_ctype_>:
 80827b4:	20202000 20202020 28282020 20282828     .         ((((( 
 80827c4:	20202020 20202020 20202020 20202020                     
 80827d4:	10108820 10101010 10101010 10101010      ...............
 80827e4:	04040410 04040404 10040404 10101010     ................
 80827f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8082804:	01010101 01010101 01010101 10101010     ................
 8082814:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8082824:	02020202 02020202 02020202 10101010     ................
 8082834:	00000020 00000000 00000000 00000000      ...............
	...

080828b8 <__sf_fake_stdin>:
	...

080828d8 <__sf_fake_stdout>:
	...

080828f8 <__sf_fake_stderr>:
	...

08082918 <link_const_variable_data_end>:
 8082918:	0808043d 	.word	0x0808043d
 808291c:	080809cd 	.word	0x080809cd
 8082920:	08080d19 	.word	0x08080d19
 8082924:	08080e59 	.word	0x08080e59
 8082928:	0808117d 	.word	0x0808117d
 808292c:	080811e5 	.word	0x080811e5
 8082930:	08081225 	.word	0x08081225
 8082934:	080816b5 	.word	0x080816b5
 8082938:	080816e5 	.word	0x080816e5
 808293c:	0808174d 	.word	0x0808174d
 8082940:	08081811 	.word	0x08081811
 8082944:	08081895 	.word	0x08081895
 8082948:	08081919 	.word	0x08081919

0808294c <link_constructors_end>:
 808294c:	00000000 	.word	0x00000000
